/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-28")
public class ApiFuncionario {

  public interface Iface {

    public boolean verificarFuncionario(java.lang.String usuario, java.lang.String contrasena) throws ErrorBD, org.apache.thrift.TException;

    public Funcionario getFuncionario(java.lang.String usuario) throws ErrorBD, org.apache.thrift.TException;

    public java.util.List<Funcionario> getFuncionarios() throws ErrorBD, org.apache.thrift.TException;

    public boolean cambiarEstatusFuncionario(java.lang.String usuario) throws ErrorBD, org.apache.thrift.TException;

    public boolean modificarPerito(Funcionario peritoAnterior, Funcionario peritoNuevo) throws ErrorBD, org.apache.thrift.TException;

    public boolean cambiarContrasenaPerito(java.lang.String usuario, java.lang.String contrasena) throws ErrorBD, org.apache.thrift.TException;

    public boolean registrarPerito(Funcionario perito) throws ErrorBD, org.apache.thrift.TException;

    public Funcionario getPerito(java.lang.String usuario) throws ErrorBD, org.apache.thrift.TException;

    public java.util.List<Funcionario> getPeritos() throws ErrorBD, org.apache.thrift.TException;

    public int getIdPerito(java.lang.String usuario) throws ErrorBD, org.apache.thrift.TException;

    public java.util.List<Reporte> getReportesPendientes() throws ErrorBD, org.apache.thrift.TException;

    public java.util.List<Reporte> getReportesAsignados(int idPerito) throws ErrorBD, org.apache.thrift.TException;

    public boolean asignarReportePerito(int idPerito, int idReporte) throws ErrorBD, org.apache.thrift.TException;

    public Reporte getReporte(int idReporte) throws ErrorBD, org.apache.thrift.TException;

    public boolean levantarDictamen(Dictamen dictamen) throws ErrorBD, org.apache.thrift.TException;

    public Dictamen getDictamen(int idReporte) throws ErrorBD, org.apache.thrift.TException;

    public java.util.List<VehiculosReporte> getPlacasVehiculosReporte() throws ErrorBD, org.apache.thrift.TException;

    public boolean cargarImagenes(java.util.List<java.nio.ByteBuffer> listaImagenes, int idreporte) throws ErrorBD, org.apache.thrift.TException;

    public java.util.List<java.nio.ByteBuffer> getImagenes(int idreporte) throws ErrorBD, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void verificarFuncionario(java.lang.String usuario, java.lang.String contrasena, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getFuncionario(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<Funcionario> resultHandler) throws org.apache.thrift.TException;

    public void getFuncionarios(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Funcionario>> resultHandler) throws org.apache.thrift.TException;

    public void cambiarEstatusFuncionario(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void modificarPerito(Funcionario peritoAnterior, Funcionario peritoNuevo, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void cambiarContrasenaPerito(java.lang.String usuario, java.lang.String contrasena, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void registrarPerito(Funcionario perito, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getPerito(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<Funcionario> resultHandler) throws org.apache.thrift.TException;

    public void getPeritos(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Funcionario>> resultHandler) throws org.apache.thrift.TException;

    public void getIdPerito(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void getReportesPendientes(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>> resultHandler) throws org.apache.thrift.TException;

    public void getReportesAsignados(int idPerito, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>> resultHandler) throws org.apache.thrift.TException;

    public void asignarReportePerito(int idPerito, int idReporte, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getReporte(int idReporte, org.apache.thrift.async.AsyncMethodCallback<Reporte> resultHandler) throws org.apache.thrift.TException;

    public void levantarDictamen(Dictamen dictamen, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getDictamen(int idReporte, org.apache.thrift.async.AsyncMethodCallback<Dictamen> resultHandler) throws org.apache.thrift.TException;

    public void getPlacasVehiculosReporte(org.apache.thrift.async.AsyncMethodCallback<java.util.List<VehiculosReporte>> resultHandler) throws org.apache.thrift.TException;

    public void cargarImagenes(java.util.List<java.nio.ByteBuffer> listaImagenes, int idreporte, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getImagenes(int idreporte, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.nio.ByteBuffer>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean verificarFuncionario(java.lang.String usuario, java.lang.String contrasena) throws ErrorBD, org.apache.thrift.TException
    {
      send_verificarFuncionario(usuario, contrasena);
      return recv_verificarFuncionario();
    }

    public void send_verificarFuncionario(java.lang.String usuario, java.lang.String contrasena) throws org.apache.thrift.TException
    {
      verificarFuncionario_args args = new verificarFuncionario_args();
      args.setUsuario(usuario);
      args.setContrasena(contrasena);
      sendBase("verificarFuncionario", args);
    }

    public boolean recv_verificarFuncionario() throws ErrorBD, org.apache.thrift.TException
    {
      verificarFuncionario_result result = new verificarFuncionario_result();
      receiveBase(result, "verificarFuncionario");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verificarFuncionario failed: unknown result");
    }

    public Funcionario getFuncionario(java.lang.String usuario) throws ErrorBD, org.apache.thrift.TException
    {
      send_getFuncionario(usuario);
      return recv_getFuncionario();
    }

    public void send_getFuncionario(java.lang.String usuario) throws org.apache.thrift.TException
    {
      getFuncionario_args args = new getFuncionario_args();
      args.setUsuario(usuario);
      sendBase("getFuncionario", args);
    }

    public Funcionario recv_getFuncionario() throws ErrorBD, org.apache.thrift.TException
    {
      getFuncionario_result result = new getFuncionario_result();
      receiveBase(result, "getFuncionario");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFuncionario failed: unknown result");
    }

    public java.util.List<Funcionario> getFuncionarios() throws ErrorBD, org.apache.thrift.TException
    {
      send_getFuncionarios();
      return recv_getFuncionarios();
    }

    public void send_getFuncionarios() throws org.apache.thrift.TException
    {
      getFuncionarios_args args = new getFuncionarios_args();
      sendBase("getFuncionarios", args);
    }

    public java.util.List<Funcionario> recv_getFuncionarios() throws ErrorBD, org.apache.thrift.TException
    {
      getFuncionarios_result result = new getFuncionarios_result();
      receiveBase(result, "getFuncionarios");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFuncionarios failed: unknown result");
    }

    public boolean cambiarEstatusFuncionario(java.lang.String usuario) throws ErrorBD, org.apache.thrift.TException
    {
      send_cambiarEstatusFuncionario(usuario);
      return recv_cambiarEstatusFuncionario();
    }

    public void send_cambiarEstatusFuncionario(java.lang.String usuario) throws org.apache.thrift.TException
    {
      cambiarEstatusFuncionario_args args = new cambiarEstatusFuncionario_args();
      args.setUsuario(usuario);
      sendBase("cambiarEstatusFuncionario", args);
    }

    public boolean recv_cambiarEstatusFuncionario() throws ErrorBD, org.apache.thrift.TException
    {
      cambiarEstatusFuncionario_result result = new cambiarEstatusFuncionario_result();
      receiveBase(result, "cambiarEstatusFuncionario");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cambiarEstatusFuncionario failed: unknown result");
    }

    public boolean modificarPerito(Funcionario peritoAnterior, Funcionario peritoNuevo) throws ErrorBD, org.apache.thrift.TException
    {
      send_modificarPerito(peritoAnterior, peritoNuevo);
      return recv_modificarPerito();
    }

    public void send_modificarPerito(Funcionario peritoAnterior, Funcionario peritoNuevo) throws org.apache.thrift.TException
    {
      modificarPerito_args args = new modificarPerito_args();
      args.setPeritoAnterior(peritoAnterior);
      args.setPeritoNuevo(peritoNuevo);
      sendBase("modificarPerito", args);
    }

    public boolean recv_modificarPerito() throws ErrorBD, org.apache.thrift.TException
    {
      modificarPerito_result result = new modificarPerito_result();
      receiveBase(result, "modificarPerito");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modificarPerito failed: unknown result");
    }

    public boolean cambiarContrasenaPerito(java.lang.String usuario, java.lang.String contrasena) throws ErrorBD, org.apache.thrift.TException
    {
      send_cambiarContrasenaPerito(usuario, contrasena);
      return recv_cambiarContrasenaPerito();
    }

    public void send_cambiarContrasenaPerito(java.lang.String usuario, java.lang.String contrasena) throws org.apache.thrift.TException
    {
      cambiarContrasenaPerito_args args = new cambiarContrasenaPerito_args();
      args.setUsuario(usuario);
      args.setContrasena(contrasena);
      sendBase("cambiarContrasenaPerito", args);
    }

    public boolean recv_cambiarContrasenaPerito() throws ErrorBD, org.apache.thrift.TException
    {
      cambiarContrasenaPerito_result result = new cambiarContrasenaPerito_result();
      receiveBase(result, "cambiarContrasenaPerito");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cambiarContrasenaPerito failed: unknown result");
    }

    public boolean registrarPerito(Funcionario perito) throws ErrorBD, org.apache.thrift.TException
    {
      send_registrarPerito(perito);
      return recv_registrarPerito();
    }

    public void send_registrarPerito(Funcionario perito) throws org.apache.thrift.TException
    {
      registrarPerito_args args = new registrarPerito_args();
      args.setPerito(perito);
      sendBase("registrarPerito", args);
    }

    public boolean recv_registrarPerito() throws ErrorBD, org.apache.thrift.TException
    {
      registrarPerito_result result = new registrarPerito_result();
      receiveBase(result, "registrarPerito");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registrarPerito failed: unknown result");
    }

    public Funcionario getPerito(java.lang.String usuario) throws ErrorBD, org.apache.thrift.TException
    {
      send_getPerito(usuario);
      return recv_getPerito();
    }

    public void send_getPerito(java.lang.String usuario) throws org.apache.thrift.TException
    {
      getPerito_args args = new getPerito_args();
      args.setUsuario(usuario);
      sendBase("getPerito", args);
    }

    public Funcionario recv_getPerito() throws ErrorBD, org.apache.thrift.TException
    {
      getPerito_result result = new getPerito_result();
      receiveBase(result, "getPerito");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPerito failed: unknown result");
    }

    public java.util.List<Funcionario> getPeritos() throws ErrorBD, org.apache.thrift.TException
    {
      send_getPeritos();
      return recv_getPeritos();
    }

    public void send_getPeritos() throws org.apache.thrift.TException
    {
      getPeritos_args args = new getPeritos_args();
      sendBase("getPeritos", args);
    }

    public java.util.List<Funcionario> recv_getPeritos() throws ErrorBD, org.apache.thrift.TException
    {
      getPeritos_result result = new getPeritos_result();
      receiveBase(result, "getPeritos");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPeritos failed: unknown result");
    }

    public int getIdPerito(java.lang.String usuario) throws ErrorBD, org.apache.thrift.TException
    {
      send_getIdPerito(usuario);
      return recv_getIdPerito();
    }

    public void send_getIdPerito(java.lang.String usuario) throws org.apache.thrift.TException
    {
      getIdPerito_args args = new getIdPerito_args();
      args.setUsuario(usuario);
      sendBase("getIdPerito", args);
    }

    public int recv_getIdPerito() throws ErrorBD, org.apache.thrift.TException
    {
      getIdPerito_result result = new getIdPerito_result();
      receiveBase(result, "getIdPerito");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getIdPerito failed: unknown result");
    }

    public java.util.List<Reporte> getReportesPendientes() throws ErrorBD, org.apache.thrift.TException
    {
      send_getReportesPendientes();
      return recv_getReportesPendientes();
    }

    public void send_getReportesPendientes() throws org.apache.thrift.TException
    {
      getReportesPendientes_args args = new getReportesPendientes_args();
      sendBase("getReportesPendientes", args);
    }

    public java.util.List<Reporte> recv_getReportesPendientes() throws ErrorBD, org.apache.thrift.TException
    {
      getReportesPendientes_result result = new getReportesPendientes_result();
      receiveBase(result, "getReportesPendientes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReportesPendientes failed: unknown result");
    }

    public java.util.List<Reporte> getReportesAsignados(int idPerito) throws ErrorBD, org.apache.thrift.TException
    {
      send_getReportesAsignados(idPerito);
      return recv_getReportesAsignados();
    }

    public void send_getReportesAsignados(int idPerito) throws org.apache.thrift.TException
    {
      getReportesAsignados_args args = new getReportesAsignados_args();
      args.setIdPerito(idPerito);
      sendBase("getReportesAsignados", args);
    }

    public java.util.List<Reporte> recv_getReportesAsignados() throws ErrorBD, org.apache.thrift.TException
    {
      getReportesAsignados_result result = new getReportesAsignados_result();
      receiveBase(result, "getReportesAsignados");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReportesAsignados failed: unknown result");
    }

    public boolean asignarReportePerito(int idPerito, int idReporte) throws ErrorBD, org.apache.thrift.TException
    {
      send_asignarReportePerito(idPerito, idReporte);
      return recv_asignarReportePerito();
    }

    public void send_asignarReportePerito(int idPerito, int idReporte) throws org.apache.thrift.TException
    {
      asignarReportePerito_args args = new asignarReportePerito_args();
      args.setIdPerito(idPerito);
      args.setIdReporte(idReporte);
      sendBase("asignarReportePerito", args);
    }

    public boolean recv_asignarReportePerito() throws ErrorBD, org.apache.thrift.TException
    {
      asignarReportePerito_result result = new asignarReportePerito_result();
      receiveBase(result, "asignarReportePerito");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "asignarReportePerito failed: unknown result");
    }

    public Reporte getReporte(int idReporte) throws ErrorBD, org.apache.thrift.TException
    {
      send_getReporte(idReporte);
      return recv_getReporte();
    }

    public void send_getReporte(int idReporte) throws org.apache.thrift.TException
    {
      getReporte_args args = new getReporte_args();
      args.setIdReporte(idReporte);
      sendBase("getReporte", args);
    }

    public Reporte recv_getReporte() throws ErrorBD, org.apache.thrift.TException
    {
      getReporte_result result = new getReporte_result();
      receiveBase(result, "getReporte");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReporte failed: unknown result");
    }

    public boolean levantarDictamen(Dictamen dictamen) throws ErrorBD, org.apache.thrift.TException
    {
      send_levantarDictamen(dictamen);
      return recv_levantarDictamen();
    }

    public void send_levantarDictamen(Dictamen dictamen) throws org.apache.thrift.TException
    {
      levantarDictamen_args args = new levantarDictamen_args();
      args.setDictamen(dictamen);
      sendBase("levantarDictamen", args);
    }

    public boolean recv_levantarDictamen() throws ErrorBD, org.apache.thrift.TException
    {
      levantarDictamen_result result = new levantarDictamen_result();
      receiveBase(result, "levantarDictamen");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "levantarDictamen failed: unknown result");
    }

    public Dictamen getDictamen(int idReporte) throws ErrorBD, org.apache.thrift.TException
    {
      send_getDictamen(idReporte);
      return recv_getDictamen();
    }

    public void send_getDictamen(int idReporte) throws org.apache.thrift.TException
    {
      getDictamen_args args = new getDictamen_args();
      args.setIdReporte(idReporte);
      sendBase("getDictamen", args);
    }

    public Dictamen recv_getDictamen() throws ErrorBD, org.apache.thrift.TException
    {
      getDictamen_result result = new getDictamen_result();
      receiveBase(result, "getDictamen");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDictamen failed: unknown result");
    }

    public java.util.List<VehiculosReporte> getPlacasVehiculosReporte() throws ErrorBD, org.apache.thrift.TException
    {
      send_getPlacasVehiculosReporte();
      return recv_getPlacasVehiculosReporte();
    }

    public void send_getPlacasVehiculosReporte() throws org.apache.thrift.TException
    {
      getPlacasVehiculosReporte_args args = new getPlacasVehiculosReporte_args();
      sendBase("getPlacasVehiculosReporte", args);
    }

    public java.util.List<VehiculosReporte> recv_getPlacasVehiculosReporte() throws ErrorBD, org.apache.thrift.TException
    {
      getPlacasVehiculosReporte_result result = new getPlacasVehiculosReporte_result();
      receiveBase(result, "getPlacasVehiculosReporte");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPlacasVehiculosReporte failed: unknown result");
    }

    public boolean cargarImagenes(java.util.List<java.nio.ByteBuffer> listaImagenes, int idreporte) throws ErrorBD, org.apache.thrift.TException
    {
      send_cargarImagenes(listaImagenes, idreporte);
      return recv_cargarImagenes();
    }

    public void send_cargarImagenes(java.util.List<java.nio.ByteBuffer> listaImagenes, int idreporte) throws org.apache.thrift.TException
    {
      cargarImagenes_args args = new cargarImagenes_args();
      args.setListaImagenes(listaImagenes);
      args.setIdreporte(idreporte);
      sendBase("cargarImagenes", args);
    }

    public boolean recv_cargarImagenes() throws ErrorBD, org.apache.thrift.TException
    {
      cargarImagenes_result result = new cargarImagenes_result();
      receiveBase(result, "cargarImagenes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cargarImagenes failed: unknown result");
    }

    public java.util.List<java.nio.ByteBuffer> getImagenes(int idreporte) throws ErrorBD, org.apache.thrift.TException
    {
      send_getImagenes(idreporte);
      return recv_getImagenes();
    }

    public void send_getImagenes(int idreporte) throws org.apache.thrift.TException
    {
      getImagenes_args args = new getImagenes_args();
      args.setIdreporte(idreporte);
      sendBase("getImagenes", args);
    }

    public java.util.List<java.nio.ByteBuffer> recv_getImagenes() throws ErrorBD, org.apache.thrift.TException
    {
      getImagenes_result result = new getImagenes_result();
      receiveBase(result, "getImagenes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ebd != null) {
        throw result.ebd;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getImagenes failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void verificarFuncionario(java.lang.String usuario, java.lang.String contrasena, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verificarFuncionario_call method_call = new verificarFuncionario_call(usuario, contrasena, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verificarFuncionario_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String usuario;
      private java.lang.String contrasena;
      public verificarFuncionario_call(java.lang.String usuario, java.lang.String contrasena, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.usuario = usuario;
        this.contrasena = contrasena;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verificarFuncionario", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verificarFuncionario_args args = new verificarFuncionario_args();
        args.setUsuario(usuario);
        args.setContrasena(contrasena);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verificarFuncionario();
      }
    }

    public void getFuncionario(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<Funcionario> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFuncionario_call method_call = new getFuncionario_call(usuario, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFuncionario_call extends org.apache.thrift.async.TAsyncMethodCall<Funcionario> {
      private java.lang.String usuario;
      public getFuncionario_call(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<Funcionario> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.usuario = usuario;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFuncionario", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFuncionario_args args = new getFuncionario_args();
        args.setUsuario(usuario);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Funcionario getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFuncionario();
      }
    }

    public void getFuncionarios(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Funcionario>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFuncionarios_call method_call = new getFuncionarios_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFuncionarios_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Funcionario>> {
      public getFuncionarios_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Funcionario>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFuncionarios", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFuncionarios_args args = new getFuncionarios_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Funcionario> getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFuncionarios();
      }
    }

    public void cambiarEstatusFuncionario(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cambiarEstatusFuncionario_call method_call = new cambiarEstatusFuncionario_call(usuario, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cambiarEstatusFuncionario_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String usuario;
      public cambiarEstatusFuncionario_call(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.usuario = usuario;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cambiarEstatusFuncionario", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cambiarEstatusFuncionario_args args = new cambiarEstatusFuncionario_args();
        args.setUsuario(usuario);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cambiarEstatusFuncionario();
      }
    }

    public void modificarPerito(Funcionario peritoAnterior, Funcionario peritoNuevo, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modificarPerito_call method_call = new modificarPerito_call(peritoAnterior, peritoNuevo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modificarPerito_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private Funcionario peritoAnterior;
      private Funcionario peritoNuevo;
      public modificarPerito_call(Funcionario peritoAnterior, Funcionario peritoNuevo, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.peritoAnterior = peritoAnterior;
        this.peritoNuevo = peritoNuevo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modificarPerito", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modificarPerito_args args = new modificarPerito_args();
        args.setPeritoAnterior(peritoAnterior);
        args.setPeritoNuevo(peritoNuevo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modificarPerito();
      }
    }

    public void cambiarContrasenaPerito(java.lang.String usuario, java.lang.String contrasena, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cambiarContrasenaPerito_call method_call = new cambiarContrasenaPerito_call(usuario, contrasena, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cambiarContrasenaPerito_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String usuario;
      private java.lang.String contrasena;
      public cambiarContrasenaPerito_call(java.lang.String usuario, java.lang.String contrasena, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.usuario = usuario;
        this.contrasena = contrasena;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cambiarContrasenaPerito", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cambiarContrasenaPerito_args args = new cambiarContrasenaPerito_args();
        args.setUsuario(usuario);
        args.setContrasena(contrasena);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cambiarContrasenaPerito();
      }
    }

    public void registrarPerito(Funcionario perito, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registrarPerito_call method_call = new registrarPerito_call(perito, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registrarPerito_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private Funcionario perito;
      public registrarPerito_call(Funcionario perito, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.perito = perito;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registrarPerito", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registrarPerito_args args = new registrarPerito_args();
        args.setPerito(perito);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registrarPerito();
      }
    }

    public void getPerito(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<Funcionario> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPerito_call method_call = new getPerito_call(usuario, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPerito_call extends org.apache.thrift.async.TAsyncMethodCall<Funcionario> {
      private java.lang.String usuario;
      public getPerito_call(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<Funcionario> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.usuario = usuario;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPerito", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPerito_args args = new getPerito_args();
        args.setUsuario(usuario);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Funcionario getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPerito();
      }
    }

    public void getPeritos(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Funcionario>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPeritos_call method_call = new getPeritos_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPeritos_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Funcionario>> {
      public getPeritos_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Funcionario>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPeritos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPeritos_args args = new getPeritos_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Funcionario> getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPeritos();
      }
    }

    public void getIdPerito(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getIdPerito_call method_call = new getIdPerito_call(usuario, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getIdPerito_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.lang.String usuario;
      public getIdPerito_call(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.usuario = usuario;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getIdPerito", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getIdPerito_args args = new getIdPerito_args();
        args.setUsuario(usuario);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getIdPerito();
      }
    }

    public void getReportesPendientes(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReportesPendientes_call method_call = new getReportesPendientes_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReportesPendientes_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Reporte>> {
      public getReportesPendientes_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReportesPendientes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReportesPendientes_args args = new getReportesPendientes_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Reporte> getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReportesPendientes();
      }
    }

    public void getReportesAsignados(int idPerito, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReportesAsignados_call method_call = new getReportesAsignados_call(idPerito, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReportesAsignados_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Reporte>> {
      private int idPerito;
      public getReportesAsignados_call(int idPerito, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idPerito = idPerito;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReportesAsignados", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReportesAsignados_args args = new getReportesAsignados_args();
        args.setIdPerito(idPerito);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Reporte> getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReportesAsignados();
      }
    }

    public void asignarReportePerito(int idPerito, int idReporte, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      asignarReportePerito_call method_call = new asignarReportePerito_call(idPerito, idReporte, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class asignarReportePerito_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int idPerito;
      private int idReporte;
      public asignarReportePerito_call(int idPerito, int idReporte, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idPerito = idPerito;
        this.idReporte = idReporte;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("asignarReportePerito", org.apache.thrift.protocol.TMessageType.CALL, 0));
        asignarReportePerito_args args = new asignarReportePerito_args();
        args.setIdPerito(idPerito);
        args.setIdReporte(idReporte);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_asignarReportePerito();
      }
    }

    public void getReporte(int idReporte, org.apache.thrift.async.AsyncMethodCallback<Reporte> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReporte_call method_call = new getReporte_call(idReporte, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReporte_call extends org.apache.thrift.async.TAsyncMethodCall<Reporte> {
      private int idReporte;
      public getReporte_call(int idReporte, org.apache.thrift.async.AsyncMethodCallback<Reporte> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idReporte = idReporte;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReporte", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReporte_args args = new getReporte_args();
        args.setIdReporte(idReporte);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Reporte getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReporte();
      }
    }

    public void levantarDictamen(Dictamen dictamen, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      levantarDictamen_call method_call = new levantarDictamen_call(dictamen, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class levantarDictamen_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private Dictamen dictamen;
      public levantarDictamen_call(Dictamen dictamen, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dictamen = dictamen;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("levantarDictamen", org.apache.thrift.protocol.TMessageType.CALL, 0));
        levantarDictamen_args args = new levantarDictamen_args();
        args.setDictamen(dictamen);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_levantarDictamen();
      }
    }

    public void getDictamen(int idReporte, org.apache.thrift.async.AsyncMethodCallback<Dictamen> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDictamen_call method_call = new getDictamen_call(idReporte, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDictamen_call extends org.apache.thrift.async.TAsyncMethodCall<Dictamen> {
      private int idReporte;
      public getDictamen_call(int idReporte, org.apache.thrift.async.AsyncMethodCallback<Dictamen> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idReporte = idReporte;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDictamen", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDictamen_args args = new getDictamen_args();
        args.setIdReporte(idReporte);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dictamen getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDictamen();
      }
    }

    public void getPlacasVehiculosReporte(org.apache.thrift.async.AsyncMethodCallback<java.util.List<VehiculosReporte>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPlacasVehiculosReporte_call method_call = new getPlacasVehiculosReporte_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPlacasVehiculosReporte_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<VehiculosReporte>> {
      public getPlacasVehiculosReporte_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<VehiculosReporte>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPlacasVehiculosReporte", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPlacasVehiculosReporte_args args = new getPlacasVehiculosReporte_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<VehiculosReporte> getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPlacasVehiculosReporte();
      }
    }

    public void cargarImagenes(java.util.List<java.nio.ByteBuffer> listaImagenes, int idreporte, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cargarImagenes_call method_call = new cargarImagenes_call(listaImagenes, idreporte, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cargarImagenes_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.util.List<java.nio.ByteBuffer> listaImagenes;
      private int idreporte;
      public cargarImagenes_call(java.util.List<java.nio.ByteBuffer> listaImagenes, int idreporte, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listaImagenes = listaImagenes;
        this.idreporte = idreporte;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cargarImagenes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cargarImagenes_args args = new cargarImagenes_args();
        args.setListaImagenes(listaImagenes);
        args.setIdreporte(idreporte);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cargarImagenes();
      }
    }

    public void getImagenes(int idreporte, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.nio.ByteBuffer>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getImagenes_call method_call = new getImagenes_call(idreporte, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getImagenes_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.nio.ByteBuffer>> {
      private int idreporte;
      public getImagenes_call(int idreporte, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.nio.ByteBuffer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idreporte = idreporte;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getImagenes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getImagenes_args args = new getImagenes_args();
        args.setIdreporte(idreporte);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.nio.ByteBuffer> getResult() throws ErrorBD, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getImagenes();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("verificarFuncionario", new verificarFuncionario());
      processMap.put("getFuncionario", new getFuncionario());
      processMap.put("getFuncionarios", new getFuncionarios());
      processMap.put("cambiarEstatusFuncionario", new cambiarEstatusFuncionario());
      processMap.put("modificarPerito", new modificarPerito());
      processMap.put("cambiarContrasenaPerito", new cambiarContrasenaPerito());
      processMap.put("registrarPerito", new registrarPerito());
      processMap.put("getPerito", new getPerito());
      processMap.put("getPeritos", new getPeritos());
      processMap.put("getIdPerito", new getIdPerito());
      processMap.put("getReportesPendientes", new getReportesPendientes());
      processMap.put("getReportesAsignados", new getReportesAsignados());
      processMap.put("asignarReportePerito", new asignarReportePerito());
      processMap.put("getReporte", new getReporte());
      processMap.put("levantarDictamen", new levantarDictamen());
      processMap.put("getDictamen", new getDictamen());
      processMap.put("getPlacasVehiculosReporte", new getPlacasVehiculosReporte());
      processMap.put("cargarImagenes", new cargarImagenes());
      processMap.put("getImagenes", new getImagenes());
      return processMap;
    }

    public static class verificarFuncionario<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verificarFuncionario_args> {
      public verificarFuncionario() {
        super("verificarFuncionario");
      }

      public verificarFuncionario_args getEmptyArgsInstance() {
        return new verificarFuncionario_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public verificarFuncionario_result getResult(I iface, verificarFuncionario_args args) throws org.apache.thrift.TException {
        verificarFuncionario_result result = new verificarFuncionario_result();
        try {
          result.success = iface.verificarFuncionario(args.usuario, args.contrasena);
          result.setSuccessIsSet(true);
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class getFuncionario<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFuncionario_args> {
      public getFuncionario() {
        super("getFuncionario");
      }

      public getFuncionario_args getEmptyArgsInstance() {
        return new getFuncionario_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getFuncionario_result getResult(I iface, getFuncionario_args args) throws org.apache.thrift.TException {
        getFuncionario_result result = new getFuncionario_result();
        try {
          result.success = iface.getFuncionario(args.usuario);
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class getFuncionarios<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFuncionarios_args> {
      public getFuncionarios() {
        super("getFuncionarios");
      }

      public getFuncionarios_args getEmptyArgsInstance() {
        return new getFuncionarios_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getFuncionarios_result getResult(I iface, getFuncionarios_args args) throws org.apache.thrift.TException {
        getFuncionarios_result result = new getFuncionarios_result();
        try {
          result.success = iface.getFuncionarios();
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class cambiarEstatusFuncionario<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cambiarEstatusFuncionario_args> {
      public cambiarEstatusFuncionario() {
        super("cambiarEstatusFuncionario");
      }

      public cambiarEstatusFuncionario_args getEmptyArgsInstance() {
        return new cambiarEstatusFuncionario_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public cambiarEstatusFuncionario_result getResult(I iface, cambiarEstatusFuncionario_args args) throws org.apache.thrift.TException {
        cambiarEstatusFuncionario_result result = new cambiarEstatusFuncionario_result();
        try {
          result.success = iface.cambiarEstatusFuncionario(args.usuario);
          result.setSuccessIsSet(true);
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class modificarPerito<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modificarPerito_args> {
      public modificarPerito() {
        super("modificarPerito");
      }

      public modificarPerito_args getEmptyArgsInstance() {
        return new modificarPerito_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public modificarPerito_result getResult(I iface, modificarPerito_args args) throws org.apache.thrift.TException {
        modificarPerito_result result = new modificarPerito_result();
        try {
          result.success = iface.modificarPerito(args.peritoAnterior, args.peritoNuevo);
          result.setSuccessIsSet(true);
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class cambiarContrasenaPerito<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cambiarContrasenaPerito_args> {
      public cambiarContrasenaPerito() {
        super("cambiarContrasenaPerito");
      }

      public cambiarContrasenaPerito_args getEmptyArgsInstance() {
        return new cambiarContrasenaPerito_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public cambiarContrasenaPerito_result getResult(I iface, cambiarContrasenaPerito_args args) throws org.apache.thrift.TException {
        cambiarContrasenaPerito_result result = new cambiarContrasenaPerito_result();
        try {
          result.success = iface.cambiarContrasenaPerito(args.usuario, args.contrasena);
          result.setSuccessIsSet(true);
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class registrarPerito<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registrarPerito_args> {
      public registrarPerito() {
        super("registrarPerito");
      }

      public registrarPerito_args getEmptyArgsInstance() {
        return new registrarPerito_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public registrarPerito_result getResult(I iface, registrarPerito_args args) throws org.apache.thrift.TException {
        registrarPerito_result result = new registrarPerito_result();
        try {
          result.success = iface.registrarPerito(args.perito);
          result.setSuccessIsSet(true);
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class getPerito<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPerito_args> {
      public getPerito() {
        super("getPerito");
      }

      public getPerito_args getEmptyArgsInstance() {
        return new getPerito_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getPerito_result getResult(I iface, getPerito_args args) throws org.apache.thrift.TException {
        getPerito_result result = new getPerito_result();
        try {
          result.success = iface.getPerito(args.usuario);
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class getPeritos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPeritos_args> {
      public getPeritos() {
        super("getPeritos");
      }

      public getPeritos_args getEmptyArgsInstance() {
        return new getPeritos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getPeritos_result getResult(I iface, getPeritos_args args) throws org.apache.thrift.TException {
        getPeritos_result result = new getPeritos_result();
        try {
          result.success = iface.getPeritos();
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class getIdPerito<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getIdPerito_args> {
      public getIdPerito() {
        super("getIdPerito");
      }

      public getIdPerito_args getEmptyArgsInstance() {
        return new getIdPerito_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getIdPerito_result getResult(I iface, getIdPerito_args args) throws org.apache.thrift.TException {
        getIdPerito_result result = new getIdPerito_result();
        try {
          result.success = iface.getIdPerito(args.usuario);
          result.setSuccessIsSet(true);
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class getReportesPendientes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReportesPendientes_args> {
      public getReportesPendientes() {
        super("getReportesPendientes");
      }

      public getReportesPendientes_args getEmptyArgsInstance() {
        return new getReportesPendientes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getReportesPendientes_result getResult(I iface, getReportesPendientes_args args) throws org.apache.thrift.TException {
        getReportesPendientes_result result = new getReportesPendientes_result();
        try {
          result.success = iface.getReportesPendientes();
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class getReportesAsignados<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReportesAsignados_args> {
      public getReportesAsignados() {
        super("getReportesAsignados");
      }

      public getReportesAsignados_args getEmptyArgsInstance() {
        return new getReportesAsignados_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getReportesAsignados_result getResult(I iface, getReportesAsignados_args args) throws org.apache.thrift.TException {
        getReportesAsignados_result result = new getReportesAsignados_result();
        try {
          result.success = iface.getReportesAsignados(args.idPerito);
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class asignarReportePerito<I extends Iface> extends org.apache.thrift.ProcessFunction<I, asignarReportePerito_args> {
      public asignarReportePerito() {
        super("asignarReportePerito");
      }

      public asignarReportePerito_args getEmptyArgsInstance() {
        return new asignarReportePerito_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public asignarReportePerito_result getResult(I iface, asignarReportePerito_args args) throws org.apache.thrift.TException {
        asignarReportePerito_result result = new asignarReportePerito_result();
        try {
          result.success = iface.asignarReportePerito(args.idPerito, args.idReporte);
          result.setSuccessIsSet(true);
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class getReporte<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReporte_args> {
      public getReporte() {
        super("getReporte");
      }

      public getReporte_args getEmptyArgsInstance() {
        return new getReporte_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getReporte_result getResult(I iface, getReporte_args args) throws org.apache.thrift.TException {
        getReporte_result result = new getReporte_result();
        try {
          result.success = iface.getReporte(args.idReporte);
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class levantarDictamen<I extends Iface> extends org.apache.thrift.ProcessFunction<I, levantarDictamen_args> {
      public levantarDictamen() {
        super("levantarDictamen");
      }

      public levantarDictamen_args getEmptyArgsInstance() {
        return new levantarDictamen_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public levantarDictamen_result getResult(I iface, levantarDictamen_args args) throws org.apache.thrift.TException {
        levantarDictamen_result result = new levantarDictamen_result();
        try {
          result.success = iface.levantarDictamen(args.dictamen);
          result.setSuccessIsSet(true);
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class getDictamen<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDictamen_args> {
      public getDictamen() {
        super("getDictamen");
      }

      public getDictamen_args getEmptyArgsInstance() {
        return new getDictamen_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getDictamen_result getResult(I iface, getDictamen_args args) throws org.apache.thrift.TException {
        getDictamen_result result = new getDictamen_result();
        try {
          result.success = iface.getDictamen(args.idReporte);
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class getPlacasVehiculosReporte<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPlacasVehiculosReporte_args> {
      public getPlacasVehiculosReporte() {
        super("getPlacasVehiculosReporte");
      }

      public getPlacasVehiculosReporte_args getEmptyArgsInstance() {
        return new getPlacasVehiculosReporte_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getPlacasVehiculosReporte_result getResult(I iface, getPlacasVehiculosReporte_args args) throws org.apache.thrift.TException {
        getPlacasVehiculosReporte_result result = new getPlacasVehiculosReporte_result();
        try {
          result.success = iface.getPlacasVehiculosReporte();
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class cargarImagenes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cargarImagenes_args> {
      public cargarImagenes() {
        super("cargarImagenes");
      }

      public cargarImagenes_args getEmptyArgsInstance() {
        return new cargarImagenes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public cargarImagenes_result getResult(I iface, cargarImagenes_args args) throws org.apache.thrift.TException {
        cargarImagenes_result result = new cargarImagenes_result();
        try {
          result.success = iface.cargarImagenes(args.listaImagenes, args.idreporte);
          result.setSuccessIsSet(true);
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

    public static class getImagenes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getImagenes_args> {
      public getImagenes() {
        super("getImagenes");
      }

      public getImagenes_args getEmptyArgsInstance() {
        return new getImagenes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getImagenes_result getResult(I iface, getImagenes_args args) throws org.apache.thrift.TException {
        getImagenes_result result = new getImagenes_result();
        try {
          result.success = iface.getImagenes(args.idreporte);
        } catch (ErrorBD ebd) {
          result.ebd = ebd;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("verificarFuncionario", new verificarFuncionario());
      processMap.put("getFuncionario", new getFuncionario());
      processMap.put("getFuncionarios", new getFuncionarios());
      processMap.put("cambiarEstatusFuncionario", new cambiarEstatusFuncionario());
      processMap.put("modificarPerito", new modificarPerito());
      processMap.put("cambiarContrasenaPerito", new cambiarContrasenaPerito());
      processMap.put("registrarPerito", new registrarPerito());
      processMap.put("getPerito", new getPerito());
      processMap.put("getPeritos", new getPeritos());
      processMap.put("getIdPerito", new getIdPerito());
      processMap.put("getReportesPendientes", new getReportesPendientes());
      processMap.put("getReportesAsignados", new getReportesAsignados());
      processMap.put("asignarReportePerito", new asignarReportePerito());
      processMap.put("getReporte", new getReporte());
      processMap.put("levantarDictamen", new levantarDictamen());
      processMap.put("getDictamen", new getDictamen());
      processMap.put("getPlacasVehiculosReporte", new getPlacasVehiculosReporte());
      processMap.put("cargarImagenes", new cargarImagenes());
      processMap.put("getImagenes", new getImagenes());
      return processMap;
    }

    public static class verificarFuncionario<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verificarFuncionario_args, java.lang.Boolean> {
      public verificarFuncionario() {
        super("verificarFuncionario");
      }

      public verificarFuncionario_args getEmptyArgsInstance() {
        return new verificarFuncionario_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            verificarFuncionario_result result = new verificarFuncionario_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            verificarFuncionario_result result = new verificarFuncionario_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verificarFuncionario_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.verificarFuncionario(args.usuario, args.contrasena,resultHandler);
      }
    }

    public static class getFuncionario<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFuncionario_args, Funcionario> {
      public getFuncionario() {
        super("getFuncionario");
      }

      public getFuncionario_args getEmptyArgsInstance() {
        return new getFuncionario_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Funcionario> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Funcionario>() { 
          public void onComplete(Funcionario o) {
            getFuncionario_result result = new getFuncionario_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getFuncionario_result result = new getFuncionario_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFuncionario_args args, org.apache.thrift.async.AsyncMethodCallback<Funcionario> resultHandler) throws org.apache.thrift.TException {
        iface.getFuncionario(args.usuario,resultHandler);
      }
    }

    public static class getFuncionarios<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFuncionarios_args, java.util.List<Funcionario>> {
      public getFuncionarios() {
        super("getFuncionarios");
      }

      public getFuncionarios_args getEmptyArgsInstance() {
        return new getFuncionarios_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Funcionario>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Funcionario>>() { 
          public void onComplete(java.util.List<Funcionario> o) {
            getFuncionarios_result result = new getFuncionarios_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getFuncionarios_result result = new getFuncionarios_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFuncionarios_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Funcionario>> resultHandler) throws org.apache.thrift.TException {
        iface.getFuncionarios(resultHandler);
      }
    }

    public static class cambiarEstatusFuncionario<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cambiarEstatusFuncionario_args, java.lang.Boolean> {
      public cambiarEstatusFuncionario() {
        super("cambiarEstatusFuncionario");
      }

      public cambiarEstatusFuncionario_args getEmptyArgsInstance() {
        return new cambiarEstatusFuncionario_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            cambiarEstatusFuncionario_result result = new cambiarEstatusFuncionario_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            cambiarEstatusFuncionario_result result = new cambiarEstatusFuncionario_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cambiarEstatusFuncionario_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.cambiarEstatusFuncionario(args.usuario,resultHandler);
      }
    }

    public static class modificarPerito<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modificarPerito_args, java.lang.Boolean> {
      public modificarPerito() {
        super("modificarPerito");
      }

      public modificarPerito_args getEmptyArgsInstance() {
        return new modificarPerito_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            modificarPerito_result result = new modificarPerito_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            modificarPerito_result result = new modificarPerito_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modificarPerito_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.modificarPerito(args.peritoAnterior, args.peritoNuevo,resultHandler);
      }
    }

    public static class cambiarContrasenaPerito<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cambiarContrasenaPerito_args, java.lang.Boolean> {
      public cambiarContrasenaPerito() {
        super("cambiarContrasenaPerito");
      }

      public cambiarContrasenaPerito_args getEmptyArgsInstance() {
        return new cambiarContrasenaPerito_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            cambiarContrasenaPerito_result result = new cambiarContrasenaPerito_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            cambiarContrasenaPerito_result result = new cambiarContrasenaPerito_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cambiarContrasenaPerito_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.cambiarContrasenaPerito(args.usuario, args.contrasena,resultHandler);
      }
    }

    public static class registrarPerito<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registrarPerito_args, java.lang.Boolean> {
      public registrarPerito() {
        super("registrarPerito");
      }

      public registrarPerito_args getEmptyArgsInstance() {
        return new registrarPerito_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            registrarPerito_result result = new registrarPerito_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            registrarPerito_result result = new registrarPerito_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registrarPerito_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.registrarPerito(args.perito,resultHandler);
      }
    }

    public static class getPerito<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPerito_args, Funcionario> {
      public getPerito() {
        super("getPerito");
      }

      public getPerito_args getEmptyArgsInstance() {
        return new getPerito_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Funcionario> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Funcionario>() { 
          public void onComplete(Funcionario o) {
            getPerito_result result = new getPerito_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPerito_result result = new getPerito_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPerito_args args, org.apache.thrift.async.AsyncMethodCallback<Funcionario> resultHandler) throws org.apache.thrift.TException {
        iface.getPerito(args.usuario,resultHandler);
      }
    }

    public static class getPeritos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPeritos_args, java.util.List<Funcionario>> {
      public getPeritos() {
        super("getPeritos");
      }

      public getPeritos_args getEmptyArgsInstance() {
        return new getPeritos_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Funcionario>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Funcionario>>() { 
          public void onComplete(java.util.List<Funcionario> o) {
            getPeritos_result result = new getPeritos_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPeritos_result result = new getPeritos_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPeritos_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Funcionario>> resultHandler) throws org.apache.thrift.TException {
        iface.getPeritos(resultHandler);
      }
    }

    public static class getIdPerito<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getIdPerito_args, java.lang.Integer> {
      public getIdPerito() {
        super("getIdPerito");
      }

      public getIdPerito_args getEmptyArgsInstance() {
        return new getIdPerito_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            getIdPerito_result result = new getIdPerito_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getIdPerito_result result = new getIdPerito_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getIdPerito_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.getIdPerito(args.usuario,resultHandler);
      }
    }

    public static class getReportesPendientes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReportesPendientes_args, java.util.List<Reporte>> {
      public getReportesPendientes() {
        super("getReportesPendientes");
      }

      public getReportesPendientes_args getEmptyArgsInstance() {
        return new getReportesPendientes_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>>() { 
          public void onComplete(java.util.List<Reporte> o) {
            getReportesPendientes_result result = new getReportesPendientes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getReportesPendientes_result result = new getReportesPendientes_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getReportesPendientes_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>> resultHandler) throws org.apache.thrift.TException {
        iface.getReportesPendientes(resultHandler);
      }
    }

    public static class getReportesAsignados<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReportesAsignados_args, java.util.List<Reporte>> {
      public getReportesAsignados() {
        super("getReportesAsignados");
      }

      public getReportesAsignados_args getEmptyArgsInstance() {
        return new getReportesAsignados_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>>() { 
          public void onComplete(java.util.List<Reporte> o) {
            getReportesAsignados_result result = new getReportesAsignados_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getReportesAsignados_result result = new getReportesAsignados_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getReportesAsignados_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>> resultHandler) throws org.apache.thrift.TException {
        iface.getReportesAsignados(args.idPerito,resultHandler);
      }
    }

    public static class asignarReportePerito<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, asignarReportePerito_args, java.lang.Boolean> {
      public asignarReportePerito() {
        super("asignarReportePerito");
      }

      public asignarReportePerito_args getEmptyArgsInstance() {
        return new asignarReportePerito_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            asignarReportePerito_result result = new asignarReportePerito_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            asignarReportePerito_result result = new asignarReportePerito_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, asignarReportePerito_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.asignarReportePerito(args.idPerito, args.idReporte,resultHandler);
      }
    }

    public static class getReporte<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReporte_args, Reporte> {
      public getReporte() {
        super("getReporte");
      }

      public getReporte_args getEmptyArgsInstance() {
        return new getReporte_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Reporte> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Reporte>() { 
          public void onComplete(Reporte o) {
            getReporte_result result = new getReporte_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getReporte_result result = new getReporte_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getReporte_args args, org.apache.thrift.async.AsyncMethodCallback<Reporte> resultHandler) throws org.apache.thrift.TException {
        iface.getReporte(args.idReporte,resultHandler);
      }
    }

    public static class levantarDictamen<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, levantarDictamen_args, java.lang.Boolean> {
      public levantarDictamen() {
        super("levantarDictamen");
      }

      public levantarDictamen_args getEmptyArgsInstance() {
        return new levantarDictamen_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            levantarDictamen_result result = new levantarDictamen_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            levantarDictamen_result result = new levantarDictamen_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, levantarDictamen_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.levantarDictamen(args.dictamen,resultHandler);
      }
    }

    public static class getDictamen<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDictamen_args, Dictamen> {
      public getDictamen() {
        super("getDictamen");
      }

      public getDictamen_args getEmptyArgsInstance() {
        return new getDictamen_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Dictamen> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Dictamen>() { 
          public void onComplete(Dictamen o) {
            getDictamen_result result = new getDictamen_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDictamen_result result = new getDictamen_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDictamen_args args, org.apache.thrift.async.AsyncMethodCallback<Dictamen> resultHandler) throws org.apache.thrift.TException {
        iface.getDictamen(args.idReporte,resultHandler);
      }
    }

    public static class getPlacasVehiculosReporte<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPlacasVehiculosReporte_args, java.util.List<VehiculosReporte>> {
      public getPlacasVehiculosReporte() {
        super("getPlacasVehiculosReporte");
      }

      public getPlacasVehiculosReporte_args getEmptyArgsInstance() {
        return new getPlacasVehiculosReporte_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<VehiculosReporte>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<VehiculosReporte>>() { 
          public void onComplete(java.util.List<VehiculosReporte> o) {
            getPlacasVehiculosReporte_result result = new getPlacasVehiculosReporte_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPlacasVehiculosReporte_result result = new getPlacasVehiculosReporte_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPlacasVehiculosReporte_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<VehiculosReporte>> resultHandler) throws org.apache.thrift.TException {
        iface.getPlacasVehiculosReporte(resultHandler);
      }
    }

    public static class cargarImagenes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cargarImagenes_args, java.lang.Boolean> {
      public cargarImagenes() {
        super("cargarImagenes");
      }

      public cargarImagenes_args getEmptyArgsInstance() {
        return new cargarImagenes_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            cargarImagenes_result result = new cargarImagenes_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            cargarImagenes_result result = new cargarImagenes_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cargarImagenes_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.cargarImagenes(args.listaImagenes, args.idreporte,resultHandler);
      }
    }

    public static class getImagenes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getImagenes_args, java.util.List<java.nio.ByteBuffer>> {
      public getImagenes() {
        super("getImagenes");
      }

      public getImagenes_args getEmptyArgsInstance() {
        return new getImagenes_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.nio.ByteBuffer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.nio.ByteBuffer>>() { 
          public void onComplete(java.util.List<java.nio.ByteBuffer> o) {
            getImagenes_result result = new getImagenes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getImagenes_result result = new getImagenes_result();
            if (e instanceof ErrorBD) {
              result.ebd = (ErrorBD) e;
              result.setEbdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getImagenes_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.nio.ByteBuffer>> resultHandler) throws org.apache.thrift.TException {
        iface.getImagenes(args.idreporte,resultHandler);
      }
    }

  }

  public static class verificarFuncionario_args implements org.apache.thrift.TBase<verificarFuncionario_args, verificarFuncionario_args._Fields>, java.io.Serializable, Cloneable, Comparable<verificarFuncionario_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verificarFuncionario_args");

    private static final org.apache.thrift.protocol.TField USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usuario", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONTRASENA_FIELD_DESC = new org.apache.thrift.protocol.TField("contrasena", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new verificarFuncionario_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new verificarFuncionario_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String usuario; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String contrasena; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USUARIO((short)1, "usuario"),
      CONTRASENA((short)2, "contrasena");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USUARIO
            return USUARIO;
          case 2: // CONTRASENA
            return CONTRASENA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USUARIO, new org.apache.thrift.meta_data.FieldMetaData("usuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTRASENA, new org.apache.thrift.meta_data.FieldMetaData("contrasena", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verificarFuncionario_args.class, metaDataMap);
    }

    public verificarFuncionario_args() {
    }

    public verificarFuncionario_args(
      java.lang.String usuario,
      java.lang.String contrasena)
    {
      this();
      this.usuario = usuario;
      this.contrasena = contrasena;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verificarFuncionario_args(verificarFuncionario_args other) {
      if (other.isSetUsuario()) {
        this.usuario = other.usuario;
      }
      if (other.isSetContrasena()) {
        this.contrasena = other.contrasena;
      }
    }

    public verificarFuncionario_args deepCopy() {
      return new verificarFuncionario_args(this);
    }

    @Override
    public void clear() {
      this.usuario = null;
      this.contrasena = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsuario() {
      return this.usuario;
    }

    public verificarFuncionario_args setUsuario(@org.apache.thrift.annotation.Nullable java.lang.String usuario) {
      this.usuario = usuario;
      return this;
    }

    public void unsetUsuario() {
      this.usuario = null;
    }

    /** Returns true if field usuario is set (has been assigned a value) and false otherwise */
    public boolean isSetUsuario() {
      return this.usuario != null;
    }

    public void setUsuarioIsSet(boolean value) {
      if (!value) {
        this.usuario = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getContrasena() {
      return this.contrasena;
    }

    public verificarFuncionario_args setContrasena(@org.apache.thrift.annotation.Nullable java.lang.String contrasena) {
      this.contrasena = contrasena;
      return this;
    }

    public void unsetContrasena() {
      this.contrasena = null;
    }

    /** Returns true if field contrasena is set (has been assigned a value) and false otherwise */
    public boolean isSetContrasena() {
      return this.contrasena != null;
    }

    public void setContrasenaIsSet(boolean value) {
      if (!value) {
        this.contrasena = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USUARIO:
        if (value == null) {
          unsetUsuario();
        } else {
          setUsuario((java.lang.String)value);
        }
        break;

      case CONTRASENA:
        if (value == null) {
          unsetContrasena();
        } else {
          setContrasena((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USUARIO:
        return getUsuario();

      case CONTRASENA:
        return getContrasena();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USUARIO:
        return isSetUsuario();
      case CONTRASENA:
        return isSetContrasena();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof verificarFuncionario_args)
        return this.equals((verificarFuncionario_args)that);
      return false;
    }

    public boolean equals(verificarFuncionario_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_usuario = true && this.isSetUsuario();
      boolean that_present_usuario = true && that.isSetUsuario();
      if (this_present_usuario || that_present_usuario) {
        if (!(this_present_usuario && that_present_usuario))
          return false;
        if (!this.usuario.equals(that.usuario))
          return false;
      }

      boolean this_present_contrasena = true && this.isSetContrasena();
      boolean that_present_contrasena = true && that.isSetContrasena();
      if (this_present_contrasena || that_present_contrasena) {
        if (!(this_present_contrasena && that_present_contrasena))
          return false;
        if (!this.contrasena.equals(that.contrasena))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsuario()) ? 131071 : 524287);
      if (isSetUsuario())
        hashCode = hashCode * 8191 + usuario.hashCode();

      hashCode = hashCode * 8191 + ((isSetContrasena()) ? 131071 : 524287);
      if (isSetContrasena())
        hashCode = hashCode * 8191 + contrasena.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(verificarFuncionario_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsuario()).compareTo(other.isSetUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usuario, other.usuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetContrasena()).compareTo(other.isSetContrasena());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContrasena()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contrasena, other.contrasena);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("verificarFuncionario_args(");
      boolean first = true;

      sb.append("usuario:");
      if (this.usuario == null) {
        sb.append("null");
      } else {
        sb.append(this.usuario);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contrasena:");
      if (this.contrasena == null) {
        sb.append("null");
      } else {
        sb.append(this.contrasena);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verificarFuncionario_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verificarFuncionario_argsStandardScheme getScheme() {
        return new verificarFuncionario_argsStandardScheme();
      }
    }

    private static class verificarFuncionario_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<verificarFuncionario_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verificarFuncionario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.usuario = iprot.readString();
                struct.setUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTRASENA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.contrasena = iprot.readString();
                struct.setContrasenaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verificarFuncionario_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.usuario != null) {
          oprot.writeFieldBegin(USUARIO_FIELD_DESC);
          oprot.writeString(struct.usuario);
          oprot.writeFieldEnd();
        }
        if (struct.contrasena != null) {
          oprot.writeFieldBegin(CONTRASENA_FIELD_DESC);
          oprot.writeString(struct.contrasena);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verificarFuncionario_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verificarFuncionario_argsTupleScheme getScheme() {
        return new verificarFuncionario_argsTupleScheme();
      }
    }

    private static class verificarFuncionario_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<verificarFuncionario_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verificarFuncionario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsuario()) {
          optionals.set(0);
        }
        if (struct.isSetContrasena()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUsuario()) {
          oprot.writeString(struct.usuario);
        }
        if (struct.isSetContrasena()) {
          oprot.writeString(struct.contrasena);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verificarFuncionario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.usuario = iprot.readString();
          struct.setUsuarioIsSet(true);
        }
        if (incoming.get(1)) {
          struct.contrasena = iprot.readString();
          struct.setContrasenaIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class verificarFuncionario_result implements org.apache.thrift.TBase<verificarFuncionario_result, verificarFuncionario_result._Fields>, java.io.Serializable, Cloneable, Comparable<verificarFuncionario_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verificarFuncionario_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new verificarFuncionario_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new verificarFuncionario_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verificarFuncionario_result.class, metaDataMap);
    }

    public verificarFuncionario_result() {
    }

    public verificarFuncionario_result(
      boolean success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verificarFuncionario_result(verificarFuncionario_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public verificarFuncionario_result deepCopy() {
      return new verificarFuncionario_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ebd = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public verificarFuncionario_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public verificarFuncionario_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof verificarFuncionario_result)
        return this.equals((verificarFuncionario_result)that);
      return false;
    }

    public boolean equals(verificarFuncionario_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(verificarFuncionario_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("verificarFuncionario_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verificarFuncionario_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verificarFuncionario_resultStandardScheme getScheme() {
        return new verificarFuncionario_resultStandardScheme();
      }
    }

    private static class verificarFuncionario_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<verificarFuncionario_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verificarFuncionario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verificarFuncionario_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verificarFuncionario_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verificarFuncionario_resultTupleScheme getScheme() {
        return new verificarFuncionario_resultTupleScheme();
      }
    }

    private static class verificarFuncionario_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<verificarFuncionario_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verificarFuncionario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verificarFuncionario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getFuncionario_args implements org.apache.thrift.TBase<getFuncionario_args, getFuncionario_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFuncionario_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFuncionario_args");

    private static final org.apache.thrift.protocol.TField USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usuario", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFuncionario_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFuncionario_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String usuario; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USUARIO((short)1, "usuario");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USUARIO
            return USUARIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USUARIO, new org.apache.thrift.meta_data.FieldMetaData("usuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFuncionario_args.class, metaDataMap);
    }

    public getFuncionario_args() {
    }

    public getFuncionario_args(
      java.lang.String usuario)
    {
      this();
      this.usuario = usuario;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFuncionario_args(getFuncionario_args other) {
      if (other.isSetUsuario()) {
        this.usuario = other.usuario;
      }
    }

    public getFuncionario_args deepCopy() {
      return new getFuncionario_args(this);
    }

    @Override
    public void clear() {
      this.usuario = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsuario() {
      return this.usuario;
    }

    public getFuncionario_args setUsuario(@org.apache.thrift.annotation.Nullable java.lang.String usuario) {
      this.usuario = usuario;
      return this;
    }

    public void unsetUsuario() {
      this.usuario = null;
    }

    /** Returns true if field usuario is set (has been assigned a value) and false otherwise */
    public boolean isSetUsuario() {
      return this.usuario != null;
    }

    public void setUsuarioIsSet(boolean value) {
      if (!value) {
        this.usuario = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USUARIO:
        if (value == null) {
          unsetUsuario();
        } else {
          setUsuario((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USUARIO:
        return getUsuario();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USUARIO:
        return isSetUsuario();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getFuncionario_args)
        return this.equals((getFuncionario_args)that);
      return false;
    }

    public boolean equals(getFuncionario_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_usuario = true && this.isSetUsuario();
      boolean that_present_usuario = true && that.isSetUsuario();
      if (this_present_usuario || that_present_usuario) {
        if (!(this_present_usuario && that_present_usuario))
          return false;
        if (!this.usuario.equals(that.usuario))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsuario()) ? 131071 : 524287);
      if (isSetUsuario())
        hashCode = hashCode * 8191 + usuario.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getFuncionario_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsuario()).compareTo(other.isSetUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usuario, other.usuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getFuncionario_args(");
      boolean first = true;

      sb.append("usuario:");
      if (this.usuario == null) {
        sb.append("null");
      } else {
        sb.append(this.usuario);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFuncionario_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFuncionario_argsStandardScheme getScheme() {
        return new getFuncionario_argsStandardScheme();
      }
    }

    private static class getFuncionario_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getFuncionario_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFuncionario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.usuario = iprot.readString();
                struct.setUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFuncionario_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.usuario != null) {
          oprot.writeFieldBegin(USUARIO_FIELD_DESC);
          oprot.writeString(struct.usuario);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFuncionario_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFuncionario_argsTupleScheme getScheme() {
        return new getFuncionario_argsTupleScheme();
      }
    }

    private static class getFuncionario_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getFuncionario_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFuncionario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsuario()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUsuario()) {
          oprot.writeString(struct.usuario);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFuncionario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.usuario = iprot.readString();
          struct.setUsuarioIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getFuncionario_result implements org.apache.thrift.TBase<getFuncionario_result, getFuncionario_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFuncionario_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFuncionario_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFuncionario_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFuncionario_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Funcionario success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Funcionario.class)));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFuncionario_result.class, metaDataMap);
    }

    public getFuncionario_result() {
    }

    public getFuncionario_result(
      Funcionario success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFuncionario_result(getFuncionario_result other) {
      if (other.isSetSuccess()) {
        this.success = new Funcionario(other.success);
      }
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public getFuncionario_result deepCopy() {
      return new getFuncionario_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ebd = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Funcionario getSuccess() {
      return this.success;
    }

    public getFuncionario_result setSuccess(@org.apache.thrift.annotation.Nullable Funcionario success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public getFuncionario_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Funcionario)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getFuncionario_result)
        return this.equals((getFuncionario_result)that);
      return false;
    }

    public boolean equals(getFuncionario_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getFuncionario_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getFuncionario_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFuncionario_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFuncionario_resultStandardScheme getScheme() {
        return new getFuncionario_resultStandardScheme();
      }
    }

    private static class getFuncionario_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getFuncionario_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFuncionario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Funcionario();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFuncionario_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFuncionario_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFuncionario_resultTupleScheme getScheme() {
        return new getFuncionario_resultTupleScheme();
      }
    }

    private static class getFuncionario_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getFuncionario_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFuncionario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFuncionario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Funcionario();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getFuncionarios_args implements org.apache.thrift.TBase<getFuncionarios_args, getFuncionarios_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFuncionarios_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFuncionarios_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFuncionarios_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFuncionarios_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFuncionarios_args.class, metaDataMap);
    }

    public getFuncionarios_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFuncionarios_args(getFuncionarios_args other) {
    }

    public getFuncionarios_args deepCopy() {
      return new getFuncionarios_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getFuncionarios_args)
        return this.equals((getFuncionarios_args)that);
      return false;
    }

    public boolean equals(getFuncionarios_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getFuncionarios_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getFuncionarios_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFuncionarios_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFuncionarios_argsStandardScheme getScheme() {
        return new getFuncionarios_argsStandardScheme();
      }
    }

    private static class getFuncionarios_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getFuncionarios_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFuncionarios_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFuncionarios_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFuncionarios_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFuncionarios_argsTupleScheme getScheme() {
        return new getFuncionarios_argsTupleScheme();
      }
    }

    private static class getFuncionarios_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getFuncionarios_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFuncionarios_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFuncionarios_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getFuncionarios_result implements org.apache.thrift.TBase<getFuncionarios_result, getFuncionarios_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFuncionarios_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFuncionarios_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFuncionarios_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFuncionarios_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Funcionario> success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Funcionario.class))));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFuncionarios_result.class, metaDataMap);
    }

    public getFuncionarios_result() {
    }

    public getFuncionarios_result(
      java.util.List<Funcionario> success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFuncionarios_result(getFuncionarios_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Funcionario> __this__success = new java.util.ArrayList<Funcionario>(other.success.size());
        for (Funcionario other_element : other.success) {
          __this__success.add(new Funcionario(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public getFuncionarios_result deepCopy() {
      return new getFuncionarios_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ebd = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Funcionario> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Funcionario elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Funcionario>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Funcionario> getSuccess() {
      return this.success;
    }

    public getFuncionarios_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Funcionario> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public getFuncionarios_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Funcionario>)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getFuncionarios_result)
        return this.equals((getFuncionarios_result)that);
      return false;
    }

    public boolean equals(getFuncionarios_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getFuncionarios_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getFuncionarios_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFuncionarios_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFuncionarios_resultStandardScheme getScheme() {
        return new getFuncionarios_resultStandardScheme();
      }
    }

    private static class getFuncionarios_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getFuncionarios_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFuncionarios_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Funcionario>(_list0.size);
                  @org.apache.thrift.annotation.Nullable Funcionario _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new Funcionario();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFuncionarios_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Funcionario _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFuncionarios_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFuncionarios_resultTupleScheme getScheme() {
        return new getFuncionarios_resultTupleScheme();
      }
    }

    private static class getFuncionarios_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getFuncionarios_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFuncionarios_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Funcionario _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFuncionarios_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Funcionario>(_list5.size);
            @org.apache.thrift.annotation.Nullable Funcionario _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new Funcionario();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cambiarEstatusFuncionario_args implements org.apache.thrift.TBase<cambiarEstatusFuncionario_args, cambiarEstatusFuncionario_args._Fields>, java.io.Serializable, Cloneable, Comparable<cambiarEstatusFuncionario_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cambiarEstatusFuncionario_args");

    private static final org.apache.thrift.protocol.TField USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usuario", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cambiarEstatusFuncionario_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cambiarEstatusFuncionario_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String usuario; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USUARIO((short)1, "usuario");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USUARIO
            return USUARIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USUARIO, new org.apache.thrift.meta_data.FieldMetaData("usuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cambiarEstatusFuncionario_args.class, metaDataMap);
    }

    public cambiarEstatusFuncionario_args() {
    }

    public cambiarEstatusFuncionario_args(
      java.lang.String usuario)
    {
      this();
      this.usuario = usuario;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cambiarEstatusFuncionario_args(cambiarEstatusFuncionario_args other) {
      if (other.isSetUsuario()) {
        this.usuario = other.usuario;
      }
    }

    public cambiarEstatusFuncionario_args deepCopy() {
      return new cambiarEstatusFuncionario_args(this);
    }

    @Override
    public void clear() {
      this.usuario = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsuario() {
      return this.usuario;
    }

    public cambiarEstatusFuncionario_args setUsuario(@org.apache.thrift.annotation.Nullable java.lang.String usuario) {
      this.usuario = usuario;
      return this;
    }

    public void unsetUsuario() {
      this.usuario = null;
    }

    /** Returns true if field usuario is set (has been assigned a value) and false otherwise */
    public boolean isSetUsuario() {
      return this.usuario != null;
    }

    public void setUsuarioIsSet(boolean value) {
      if (!value) {
        this.usuario = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USUARIO:
        if (value == null) {
          unsetUsuario();
        } else {
          setUsuario((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USUARIO:
        return getUsuario();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USUARIO:
        return isSetUsuario();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cambiarEstatusFuncionario_args)
        return this.equals((cambiarEstatusFuncionario_args)that);
      return false;
    }

    public boolean equals(cambiarEstatusFuncionario_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_usuario = true && this.isSetUsuario();
      boolean that_present_usuario = true && that.isSetUsuario();
      if (this_present_usuario || that_present_usuario) {
        if (!(this_present_usuario && that_present_usuario))
          return false;
        if (!this.usuario.equals(that.usuario))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsuario()) ? 131071 : 524287);
      if (isSetUsuario())
        hashCode = hashCode * 8191 + usuario.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(cambiarEstatusFuncionario_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsuario()).compareTo(other.isSetUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usuario, other.usuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cambiarEstatusFuncionario_args(");
      boolean first = true;

      sb.append("usuario:");
      if (this.usuario == null) {
        sb.append("null");
      } else {
        sb.append(this.usuario);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cambiarEstatusFuncionario_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cambiarEstatusFuncionario_argsStandardScheme getScheme() {
        return new cambiarEstatusFuncionario_argsStandardScheme();
      }
    }

    private static class cambiarEstatusFuncionario_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<cambiarEstatusFuncionario_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cambiarEstatusFuncionario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.usuario = iprot.readString();
                struct.setUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cambiarEstatusFuncionario_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.usuario != null) {
          oprot.writeFieldBegin(USUARIO_FIELD_DESC);
          oprot.writeString(struct.usuario);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cambiarEstatusFuncionario_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cambiarEstatusFuncionario_argsTupleScheme getScheme() {
        return new cambiarEstatusFuncionario_argsTupleScheme();
      }
    }

    private static class cambiarEstatusFuncionario_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<cambiarEstatusFuncionario_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cambiarEstatusFuncionario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsuario()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUsuario()) {
          oprot.writeString(struct.usuario);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cambiarEstatusFuncionario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.usuario = iprot.readString();
          struct.setUsuarioIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cambiarEstatusFuncionario_result implements org.apache.thrift.TBase<cambiarEstatusFuncionario_result, cambiarEstatusFuncionario_result._Fields>, java.io.Serializable, Cloneable, Comparable<cambiarEstatusFuncionario_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cambiarEstatusFuncionario_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cambiarEstatusFuncionario_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cambiarEstatusFuncionario_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cambiarEstatusFuncionario_result.class, metaDataMap);
    }

    public cambiarEstatusFuncionario_result() {
    }

    public cambiarEstatusFuncionario_result(
      boolean success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cambiarEstatusFuncionario_result(cambiarEstatusFuncionario_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public cambiarEstatusFuncionario_result deepCopy() {
      return new cambiarEstatusFuncionario_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ebd = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public cambiarEstatusFuncionario_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public cambiarEstatusFuncionario_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cambiarEstatusFuncionario_result)
        return this.equals((cambiarEstatusFuncionario_result)that);
      return false;
    }

    public boolean equals(cambiarEstatusFuncionario_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(cambiarEstatusFuncionario_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cambiarEstatusFuncionario_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cambiarEstatusFuncionario_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cambiarEstatusFuncionario_resultStandardScheme getScheme() {
        return new cambiarEstatusFuncionario_resultStandardScheme();
      }
    }

    private static class cambiarEstatusFuncionario_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<cambiarEstatusFuncionario_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cambiarEstatusFuncionario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cambiarEstatusFuncionario_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cambiarEstatusFuncionario_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cambiarEstatusFuncionario_resultTupleScheme getScheme() {
        return new cambiarEstatusFuncionario_resultTupleScheme();
      }
    }

    private static class cambiarEstatusFuncionario_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<cambiarEstatusFuncionario_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cambiarEstatusFuncionario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cambiarEstatusFuncionario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class modificarPerito_args implements org.apache.thrift.TBase<modificarPerito_args, modificarPerito_args._Fields>, java.io.Serializable, Cloneable, Comparable<modificarPerito_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modificarPerito_args");

    private static final org.apache.thrift.protocol.TField PERITO_ANTERIOR_FIELD_DESC = new org.apache.thrift.protocol.TField("peritoAnterior", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PERITO_NUEVO_FIELD_DESC = new org.apache.thrift.protocol.TField("peritoNuevo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modificarPerito_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modificarPerito_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Funcionario peritoAnterior; // required
    public @org.apache.thrift.annotation.Nullable Funcionario peritoNuevo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PERITO_ANTERIOR((short)1, "peritoAnterior"),
      PERITO_NUEVO((short)2, "peritoNuevo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PERITO_ANTERIOR
            return PERITO_ANTERIOR;
          case 2: // PERITO_NUEVO
            return PERITO_NUEVO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PERITO_ANTERIOR, new org.apache.thrift.meta_data.FieldMetaData("peritoAnterior", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Funcionario.class)));
      tmpMap.put(_Fields.PERITO_NUEVO, new org.apache.thrift.meta_data.FieldMetaData("peritoNuevo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Funcionario.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modificarPerito_args.class, metaDataMap);
    }

    public modificarPerito_args() {
    }

    public modificarPerito_args(
      Funcionario peritoAnterior,
      Funcionario peritoNuevo)
    {
      this();
      this.peritoAnterior = peritoAnterior;
      this.peritoNuevo = peritoNuevo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modificarPerito_args(modificarPerito_args other) {
      if (other.isSetPeritoAnterior()) {
        this.peritoAnterior = new Funcionario(other.peritoAnterior);
      }
      if (other.isSetPeritoNuevo()) {
        this.peritoNuevo = new Funcionario(other.peritoNuevo);
      }
    }

    public modificarPerito_args deepCopy() {
      return new modificarPerito_args(this);
    }

    @Override
    public void clear() {
      this.peritoAnterior = null;
      this.peritoNuevo = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Funcionario getPeritoAnterior() {
      return this.peritoAnterior;
    }

    public modificarPerito_args setPeritoAnterior(@org.apache.thrift.annotation.Nullable Funcionario peritoAnterior) {
      this.peritoAnterior = peritoAnterior;
      return this;
    }

    public void unsetPeritoAnterior() {
      this.peritoAnterior = null;
    }

    /** Returns true if field peritoAnterior is set (has been assigned a value) and false otherwise */
    public boolean isSetPeritoAnterior() {
      return this.peritoAnterior != null;
    }

    public void setPeritoAnteriorIsSet(boolean value) {
      if (!value) {
        this.peritoAnterior = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Funcionario getPeritoNuevo() {
      return this.peritoNuevo;
    }

    public modificarPerito_args setPeritoNuevo(@org.apache.thrift.annotation.Nullable Funcionario peritoNuevo) {
      this.peritoNuevo = peritoNuevo;
      return this;
    }

    public void unsetPeritoNuevo() {
      this.peritoNuevo = null;
    }

    /** Returns true if field peritoNuevo is set (has been assigned a value) and false otherwise */
    public boolean isSetPeritoNuevo() {
      return this.peritoNuevo != null;
    }

    public void setPeritoNuevoIsSet(boolean value) {
      if (!value) {
        this.peritoNuevo = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case PERITO_ANTERIOR:
        if (value == null) {
          unsetPeritoAnterior();
        } else {
          setPeritoAnterior((Funcionario)value);
        }
        break;

      case PERITO_NUEVO:
        if (value == null) {
          unsetPeritoNuevo();
        } else {
          setPeritoNuevo((Funcionario)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PERITO_ANTERIOR:
        return getPeritoAnterior();

      case PERITO_NUEVO:
        return getPeritoNuevo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PERITO_ANTERIOR:
        return isSetPeritoAnterior();
      case PERITO_NUEVO:
        return isSetPeritoNuevo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof modificarPerito_args)
        return this.equals((modificarPerito_args)that);
      return false;
    }

    public boolean equals(modificarPerito_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_peritoAnterior = true && this.isSetPeritoAnterior();
      boolean that_present_peritoAnterior = true && that.isSetPeritoAnterior();
      if (this_present_peritoAnterior || that_present_peritoAnterior) {
        if (!(this_present_peritoAnterior && that_present_peritoAnterior))
          return false;
        if (!this.peritoAnterior.equals(that.peritoAnterior))
          return false;
      }

      boolean this_present_peritoNuevo = true && this.isSetPeritoNuevo();
      boolean that_present_peritoNuevo = true && that.isSetPeritoNuevo();
      if (this_present_peritoNuevo || that_present_peritoNuevo) {
        if (!(this_present_peritoNuevo && that_present_peritoNuevo))
          return false;
        if (!this.peritoNuevo.equals(that.peritoNuevo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPeritoAnterior()) ? 131071 : 524287);
      if (isSetPeritoAnterior())
        hashCode = hashCode * 8191 + peritoAnterior.hashCode();

      hashCode = hashCode * 8191 + ((isSetPeritoNuevo()) ? 131071 : 524287);
      if (isSetPeritoNuevo())
        hashCode = hashCode * 8191 + peritoNuevo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(modificarPerito_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPeritoAnterior()).compareTo(other.isSetPeritoAnterior());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeritoAnterior()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peritoAnterior, other.peritoAnterior);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPeritoNuevo()).compareTo(other.isSetPeritoNuevo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeritoNuevo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peritoNuevo, other.peritoNuevo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("modificarPerito_args(");
      boolean first = true;

      sb.append("peritoAnterior:");
      if (this.peritoAnterior == null) {
        sb.append("null");
      } else {
        sb.append(this.peritoAnterior);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("peritoNuevo:");
      if (this.peritoNuevo == null) {
        sb.append("null");
      } else {
        sb.append(this.peritoNuevo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (peritoAnterior != null) {
        peritoAnterior.validate();
      }
      if (peritoNuevo != null) {
        peritoNuevo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modificarPerito_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modificarPerito_argsStandardScheme getScheme() {
        return new modificarPerito_argsStandardScheme();
      }
    }

    private static class modificarPerito_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<modificarPerito_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modificarPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PERITO_ANTERIOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.peritoAnterior = new Funcionario();
                struct.peritoAnterior.read(iprot);
                struct.setPeritoAnteriorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PERITO_NUEVO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.peritoNuevo = new Funcionario();
                struct.peritoNuevo.read(iprot);
                struct.setPeritoNuevoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modificarPerito_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.peritoAnterior != null) {
          oprot.writeFieldBegin(PERITO_ANTERIOR_FIELD_DESC);
          struct.peritoAnterior.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.peritoNuevo != null) {
          oprot.writeFieldBegin(PERITO_NUEVO_FIELD_DESC);
          struct.peritoNuevo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modificarPerito_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modificarPerito_argsTupleScheme getScheme() {
        return new modificarPerito_argsTupleScheme();
      }
    }

    private static class modificarPerito_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<modificarPerito_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modificarPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPeritoAnterior()) {
          optionals.set(0);
        }
        if (struct.isSetPeritoNuevo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPeritoAnterior()) {
          struct.peritoAnterior.write(oprot);
        }
        if (struct.isSetPeritoNuevo()) {
          struct.peritoNuevo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modificarPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.peritoAnterior = new Funcionario();
          struct.peritoAnterior.read(iprot);
          struct.setPeritoAnteriorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.peritoNuevo = new Funcionario();
          struct.peritoNuevo.read(iprot);
          struct.setPeritoNuevoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class modificarPerito_result implements org.apache.thrift.TBase<modificarPerito_result, modificarPerito_result._Fields>, java.io.Serializable, Cloneable, Comparable<modificarPerito_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modificarPerito_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modificarPerito_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modificarPerito_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modificarPerito_result.class, metaDataMap);
    }

    public modificarPerito_result() {
    }

    public modificarPerito_result(
      boolean success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modificarPerito_result(modificarPerito_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public modificarPerito_result deepCopy() {
      return new modificarPerito_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ebd = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public modificarPerito_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public modificarPerito_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof modificarPerito_result)
        return this.equals((modificarPerito_result)that);
      return false;
    }

    public boolean equals(modificarPerito_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(modificarPerito_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("modificarPerito_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modificarPerito_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modificarPerito_resultStandardScheme getScheme() {
        return new modificarPerito_resultStandardScheme();
      }
    }

    private static class modificarPerito_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<modificarPerito_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modificarPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modificarPerito_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modificarPerito_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modificarPerito_resultTupleScheme getScheme() {
        return new modificarPerito_resultTupleScheme();
      }
    }

    private static class modificarPerito_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<modificarPerito_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modificarPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modificarPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cambiarContrasenaPerito_args implements org.apache.thrift.TBase<cambiarContrasenaPerito_args, cambiarContrasenaPerito_args._Fields>, java.io.Serializable, Cloneable, Comparable<cambiarContrasenaPerito_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cambiarContrasenaPerito_args");

    private static final org.apache.thrift.protocol.TField USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usuario", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONTRASENA_FIELD_DESC = new org.apache.thrift.protocol.TField("contrasena", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cambiarContrasenaPerito_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cambiarContrasenaPerito_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String usuario; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String contrasena; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USUARIO((short)1, "usuario"),
      CONTRASENA((short)2, "contrasena");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USUARIO
            return USUARIO;
          case 2: // CONTRASENA
            return CONTRASENA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USUARIO, new org.apache.thrift.meta_data.FieldMetaData("usuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTRASENA, new org.apache.thrift.meta_data.FieldMetaData("contrasena", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cambiarContrasenaPerito_args.class, metaDataMap);
    }

    public cambiarContrasenaPerito_args() {
    }

    public cambiarContrasenaPerito_args(
      java.lang.String usuario,
      java.lang.String contrasena)
    {
      this();
      this.usuario = usuario;
      this.contrasena = contrasena;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cambiarContrasenaPerito_args(cambiarContrasenaPerito_args other) {
      if (other.isSetUsuario()) {
        this.usuario = other.usuario;
      }
      if (other.isSetContrasena()) {
        this.contrasena = other.contrasena;
      }
    }

    public cambiarContrasenaPerito_args deepCopy() {
      return new cambiarContrasenaPerito_args(this);
    }

    @Override
    public void clear() {
      this.usuario = null;
      this.contrasena = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsuario() {
      return this.usuario;
    }

    public cambiarContrasenaPerito_args setUsuario(@org.apache.thrift.annotation.Nullable java.lang.String usuario) {
      this.usuario = usuario;
      return this;
    }

    public void unsetUsuario() {
      this.usuario = null;
    }

    /** Returns true if field usuario is set (has been assigned a value) and false otherwise */
    public boolean isSetUsuario() {
      return this.usuario != null;
    }

    public void setUsuarioIsSet(boolean value) {
      if (!value) {
        this.usuario = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getContrasena() {
      return this.contrasena;
    }

    public cambiarContrasenaPerito_args setContrasena(@org.apache.thrift.annotation.Nullable java.lang.String contrasena) {
      this.contrasena = contrasena;
      return this;
    }

    public void unsetContrasena() {
      this.contrasena = null;
    }

    /** Returns true if field contrasena is set (has been assigned a value) and false otherwise */
    public boolean isSetContrasena() {
      return this.contrasena != null;
    }

    public void setContrasenaIsSet(boolean value) {
      if (!value) {
        this.contrasena = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USUARIO:
        if (value == null) {
          unsetUsuario();
        } else {
          setUsuario((java.lang.String)value);
        }
        break;

      case CONTRASENA:
        if (value == null) {
          unsetContrasena();
        } else {
          setContrasena((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USUARIO:
        return getUsuario();

      case CONTRASENA:
        return getContrasena();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USUARIO:
        return isSetUsuario();
      case CONTRASENA:
        return isSetContrasena();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cambiarContrasenaPerito_args)
        return this.equals((cambiarContrasenaPerito_args)that);
      return false;
    }

    public boolean equals(cambiarContrasenaPerito_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_usuario = true && this.isSetUsuario();
      boolean that_present_usuario = true && that.isSetUsuario();
      if (this_present_usuario || that_present_usuario) {
        if (!(this_present_usuario && that_present_usuario))
          return false;
        if (!this.usuario.equals(that.usuario))
          return false;
      }

      boolean this_present_contrasena = true && this.isSetContrasena();
      boolean that_present_contrasena = true && that.isSetContrasena();
      if (this_present_contrasena || that_present_contrasena) {
        if (!(this_present_contrasena && that_present_contrasena))
          return false;
        if (!this.contrasena.equals(that.contrasena))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsuario()) ? 131071 : 524287);
      if (isSetUsuario())
        hashCode = hashCode * 8191 + usuario.hashCode();

      hashCode = hashCode * 8191 + ((isSetContrasena()) ? 131071 : 524287);
      if (isSetContrasena())
        hashCode = hashCode * 8191 + contrasena.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(cambiarContrasenaPerito_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsuario()).compareTo(other.isSetUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usuario, other.usuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetContrasena()).compareTo(other.isSetContrasena());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContrasena()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contrasena, other.contrasena);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cambiarContrasenaPerito_args(");
      boolean first = true;

      sb.append("usuario:");
      if (this.usuario == null) {
        sb.append("null");
      } else {
        sb.append(this.usuario);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contrasena:");
      if (this.contrasena == null) {
        sb.append("null");
      } else {
        sb.append(this.contrasena);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cambiarContrasenaPerito_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cambiarContrasenaPerito_argsStandardScheme getScheme() {
        return new cambiarContrasenaPerito_argsStandardScheme();
      }
    }

    private static class cambiarContrasenaPerito_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<cambiarContrasenaPerito_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cambiarContrasenaPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.usuario = iprot.readString();
                struct.setUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTRASENA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.contrasena = iprot.readString();
                struct.setContrasenaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cambiarContrasenaPerito_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.usuario != null) {
          oprot.writeFieldBegin(USUARIO_FIELD_DESC);
          oprot.writeString(struct.usuario);
          oprot.writeFieldEnd();
        }
        if (struct.contrasena != null) {
          oprot.writeFieldBegin(CONTRASENA_FIELD_DESC);
          oprot.writeString(struct.contrasena);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cambiarContrasenaPerito_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cambiarContrasenaPerito_argsTupleScheme getScheme() {
        return new cambiarContrasenaPerito_argsTupleScheme();
      }
    }

    private static class cambiarContrasenaPerito_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<cambiarContrasenaPerito_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cambiarContrasenaPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsuario()) {
          optionals.set(0);
        }
        if (struct.isSetContrasena()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUsuario()) {
          oprot.writeString(struct.usuario);
        }
        if (struct.isSetContrasena()) {
          oprot.writeString(struct.contrasena);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cambiarContrasenaPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.usuario = iprot.readString();
          struct.setUsuarioIsSet(true);
        }
        if (incoming.get(1)) {
          struct.contrasena = iprot.readString();
          struct.setContrasenaIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cambiarContrasenaPerito_result implements org.apache.thrift.TBase<cambiarContrasenaPerito_result, cambiarContrasenaPerito_result._Fields>, java.io.Serializable, Cloneable, Comparable<cambiarContrasenaPerito_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cambiarContrasenaPerito_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cambiarContrasenaPerito_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cambiarContrasenaPerito_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cambiarContrasenaPerito_result.class, metaDataMap);
    }

    public cambiarContrasenaPerito_result() {
    }

    public cambiarContrasenaPerito_result(
      boolean success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cambiarContrasenaPerito_result(cambiarContrasenaPerito_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public cambiarContrasenaPerito_result deepCopy() {
      return new cambiarContrasenaPerito_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ebd = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public cambiarContrasenaPerito_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public cambiarContrasenaPerito_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cambiarContrasenaPerito_result)
        return this.equals((cambiarContrasenaPerito_result)that);
      return false;
    }

    public boolean equals(cambiarContrasenaPerito_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(cambiarContrasenaPerito_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cambiarContrasenaPerito_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cambiarContrasenaPerito_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cambiarContrasenaPerito_resultStandardScheme getScheme() {
        return new cambiarContrasenaPerito_resultStandardScheme();
      }
    }

    private static class cambiarContrasenaPerito_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<cambiarContrasenaPerito_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cambiarContrasenaPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cambiarContrasenaPerito_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cambiarContrasenaPerito_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cambiarContrasenaPerito_resultTupleScheme getScheme() {
        return new cambiarContrasenaPerito_resultTupleScheme();
      }
    }

    private static class cambiarContrasenaPerito_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<cambiarContrasenaPerito_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cambiarContrasenaPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cambiarContrasenaPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registrarPerito_args implements org.apache.thrift.TBase<registrarPerito_args, registrarPerito_args._Fields>, java.io.Serializable, Cloneable, Comparable<registrarPerito_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registrarPerito_args");

    private static final org.apache.thrift.protocol.TField PERITO_FIELD_DESC = new org.apache.thrift.protocol.TField("perito", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registrarPerito_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registrarPerito_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Funcionario perito; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PERITO((short)1, "perito");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PERITO
            return PERITO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PERITO, new org.apache.thrift.meta_data.FieldMetaData("perito", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Funcionario.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registrarPerito_args.class, metaDataMap);
    }

    public registrarPerito_args() {
    }

    public registrarPerito_args(
      Funcionario perito)
    {
      this();
      this.perito = perito;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registrarPerito_args(registrarPerito_args other) {
      if (other.isSetPerito()) {
        this.perito = new Funcionario(other.perito);
      }
    }

    public registrarPerito_args deepCopy() {
      return new registrarPerito_args(this);
    }

    @Override
    public void clear() {
      this.perito = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Funcionario getPerito() {
      return this.perito;
    }

    public registrarPerito_args setPerito(@org.apache.thrift.annotation.Nullable Funcionario perito) {
      this.perito = perito;
      return this;
    }

    public void unsetPerito() {
      this.perito = null;
    }

    /** Returns true if field perito is set (has been assigned a value) and false otherwise */
    public boolean isSetPerito() {
      return this.perito != null;
    }

    public void setPeritoIsSet(boolean value) {
      if (!value) {
        this.perito = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case PERITO:
        if (value == null) {
          unsetPerito();
        } else {
          setPerito((Funcionario)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PERITO:
        return getPerito();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PERITO:
        return isSetPerito();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registrarPerito_args)
        return this.equals((registrarPerito_args)that);
      return false;
    }

    public boolean equals(registrarPerito_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_perito = true && this.isSetPerito();
      boolean that_present_perito = true && that.isSetPerito();
      if (this_present_perito || that_present_perito) {
        if (!(this_present_perito && that_present_perito))
          return false;
        if (!this.perito.equals(that.perito))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPerito()) ? 131071 : 524287);
      if (isSetPerito())
        hashCode = hashCode * 8191 + perito.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registrarPerito_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPerito()).compareTo(other.isSetPerito());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerito()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perito, other.perito);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registrarPerito_args(");
      boolean first = true;

      sb.append("perito:");
      if (this.perito == null) {
        sb.append("null");
      } else {
        sb.append(this.perito);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (perito != null) {
        perito.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registrarPerito_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarPerito_argsStandardScheme getScheme() {
        return new registrarPerito_argsStandardScheme();
      }
    }

    private static class registrarPerito_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registrarPerito_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registrarPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PERITO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.perito = new Funcionario();
                struct.perito.read(iprot);
                struct.setPeritoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registrarPerito_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.perito != null) {
          oprot.writeFieldBegin(PERITO_FIELD_DESC);
          struct.perito.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registrarPerito_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarPerito_argsTupleScheme getScheme() {
        return new registrarPerito_argsTupleScheme();
      }
    }

    private static class registrarPerito_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registrarPerito_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registrarPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPerito()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPerito()) {
          struct.perito.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registrarPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.perito = new Funcionario();
          struct.perito.read(iprot);
          struct.setPeritoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registrarPerito_result implements org.apache.thrift.TBase<registrarPerito_result, registrarPerito_result._Fields>, java.io.Serializable, Cloneable, Comparable<registrarPerito_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registrarPerito_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registrarPerito_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registrarPerito_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registrarPerito_result.class, metaDataMap);
    }

    public registrarPerito_result() {
    }

    public registrarPerito_result(
      boolean success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registrarPerito_result(registrarPerito_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public registrarPerito_result deepCopy() {
      return new registrarPerito_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ebd = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public registrarPerito_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public registrarPerito_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registrarPerito_result)
        return this.equals((registrarPerito_result)that);
      return false;
    }

    public boolean equals(registrarPerito_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registrarPerito_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registrarPerito_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registrarPerito_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarPerito_resultStandardScheme getScheme() {
        return new registrarPerito_resultStandardScheme();
      }
    }

    private static class registrarPerito_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<registrarPerito_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registrarPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registrarPerito_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registrarPerito_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarPerito_resultTupleScheme getScheme() {
        return new registrarPerito_resultTupleScheme();
      }
    }

    private static class registrarPerito_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<registrarPerito_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registrarPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registrarPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPerito_args implements org.apache.thrift.TBase<getPerito_args, getPerito_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPerito_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPerito_args");

    private static final org.apache.thrift.protocol.TField USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usuario", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPerito_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPerito_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String usuario; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USUARIO((short)1, "usuario");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USUARIO
            return USUARIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USUARIO, new org.apache.thrift.meta_data.FieldMetaData("usuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPerito_args.class, metaDataMap);
    }

    public getPerito_args() {
    }

    public getPerito_args(
      java.lang.String usuario)
    {
      this();
      this.usuario = usuario;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPerito_args(getPerito_args other) {
      if (other.isSetUsuario()) {
        this.usuario = other.usuario;
      }
    }

    public getPerito_args deepCopy() {
      return new getPerito_args(this);
    }

    @Override
    public void clear() {
      this.usuario = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsuario() {
      return this.usuario;
    }

    public getPerito_args setUsuario(@org.apache.thrift.annotation.Nullable java.lang.String usuario) {
      this.usuario = usuario;
      return this;
    }

    public void unsetUsuario() {
      this.usuario = null;
    }

    /** Returns true if field usuario is set (has been assigned a value) and false otherwise */
    public boolean isSetUsuario() {
      return this.usuario != null;
    }

    public void setUsuarioIsSet(boolean value) {
      if (!value) {
        this.usuario = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USUARIO:
        if (value == null) {
          unsetUsuario();
        } else {
          setUsuario((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USUARIO:
        return getUsuario();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USUARIO:
        return isSetUsuario();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPerito_args)
        return this.equals((getPerito_args)that);
      return false;
    }

    public boolean equals(getPerito_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_usuario = true && this.isSetUsuario();
      boolean that_present_usuario = true && that.isSetUsuario();
      if (this_present_usuario || that_present_usuario) {
        if (!(this_present_usuario && that_present_usuario))
          return false;
        if (!this.usuario.equals(that.usuario))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsuario()) ? 131071 : 524287);
      if (isSetUsuario())
        hashCode = hashCode * 8191 + usuario.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPerito_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsuario()).compareTo(other.isSetUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usuario, other.usuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPerito_args(");
      boolean first = true;

      sb.append("usuario:");
      if (this.usuario == null) {
        sb.append("null");
      } else {
        sb.append(this.usuario);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPerito_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPerito_argsStandardScheme getScheme() {
        return new getPerito_argsStandardScheme();
      }
    }

    private static class getPerito_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPerito_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.usuario = iprot.readString();
                struct.setUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPerito_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.usuario != null) {
          oprot.writeFieldBegin(USUARIO_FIELD_DESC);
          oprot.writeString(struct.usuario);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPerito_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPerito_argsTupleScheme getScheme() {
        return new getPerito_argsTupleScheme();
      }
    }

    private static class getPerito_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPerito_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsuario()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUsuario()) {
          oprot.writeString(struct.usuario);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.usuario = iprot.readString();
          struct.setUsuarioIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPerito_result implements org.apache.thrift.TBase<getPerito_result, getPerito_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPerito_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPerito_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPerito_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPerito_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Funcionario success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Funcionario.class)));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPerito_result.class, metaDataMap);
    }

    public getPerito_result() {
    }

    public getPerito_result(
      Funcionario success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPerito_result(getPerito_result other) {
      if (other.isSetSuccess()) {
        this.success = new Funcionario(other.success);
      }
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public getPerito_result deepCopy() {
      return new getPerito_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ebd = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Funcionario getSuccess() {
      return this.success;
    }

    public getPerito_result setSuccess(@org.apache.thrift.annotation.Nullable Funcionario success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public getPerito_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Funcionario)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPerito_result)
        return this.equals((getPerito_result)that);
      return false;
    }

    public boolean equals(getPerito_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPerito_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPerito_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPerito_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPerito_resultStandardScheme getScheme() {
        return new getPerito_resultStandardScheme();
      }
    }

    private static class getPerito_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPerito_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Funcionario();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPerito_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPerito_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPerito_resultTupleScheme getScheme() {
        return new getPerito_resultTupleScheme();
      }
    }

    private static class getPerito_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPerito_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Funcionario();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPeritos_args implements org.apache.thrift.TBase<getPeritos_args, getPeritos_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPeritos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPeritos_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPeritos_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPeritos_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPeritos_args.class, metaDataMap);
    }

    public getPeritos_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPeritos_args(getPeritos_args other) {
    }

    public getPeritos_args deepCopy() {
      return new getPeritos_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPeritos_args)
        return this.equals((getPeritos_args)that);
      return false;
    }

    public boolean equals(getPeritos_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getPeritos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPeritos_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPeritos_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPeritos_argsStandardScheme getScheme() {
        return new getPeritos_argsStandardScheme();
      }
    }

    private static class getPeritos_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPeritos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPeritos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPeritos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPeritos_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPeritos_argsTupleScheme getScheme() {
        return new getPeritos_argsTupleScheme();
      }
    }

    private static class getPeritos_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPeritos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPeritos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPeritos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPeritos_result implements org.apache.thrift.TBase<getPeritos_result, getPeritos_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPeritos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPeritos_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPeritos_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPeritos_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Funcionario> success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Funcionario.class))));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPeritos_result.class, metaDataMap);
    }

    public getPeritos_result() {
    }

    public getPeritos_result(
      java.util.List<Funcionario> success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPeritos_result(getPeritos_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Funcionario> __this__success = new java.util.ArrayList<Funcionario>(other.success.size());
        for (Funcionario other_element : other.success) {
          __this__success.add(new Funcionario(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public getPeritos_result deepCopy() {
      return new getPeritos_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ebd = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Funcionario> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Funcionario elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Funcionario>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Funcionario> getSuccess() {
      return this.success;
    }

    public getPeritos_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Funcionario> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public getPeritos_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Funcionario>)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPeritos_result)
        return this.equals((getPeritos_result)that);
      return false;
    }

    public boolean equals(getPeritos_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPeritos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPeritos_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPeritos_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPeritos_resultStandardScheme getScheme() {
        return new getPeritos_resultStandardScheme();
      }
    }

    private static class getPeritos_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPeritos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPeritos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Funcionario>(_list8.size);
                  @org.apache.thrift.annotation.Nullable Funcionario _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new Funcionario();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPeritos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Funcionario _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPeritos_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPeritos_resultTupleScheme getScheme() {
        return new getPeritos_resultTupleScheme();
      }
    }

    private static class getPeritos_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPeritos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPeritos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Funcionario _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPeritos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Funcionario>(_list13.size);
            @org.apache.thrift.annotation.Nullable Funcionario _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new Funcionario();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getIdPerito_args implements org.apache.thrift.TBase<getIdPerito_args, getIdPerito_args._Fields>, java.io.Serializable, Cloneable, Comparable<getIdPerito_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIdPerito_args");

    private static final org.apache.thrift.protocol.TField USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usuario", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getIdPerito_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getIdPerito_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String usuario; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USUARIO((short)1, "usuario");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USUARIO
            return USUARIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USUARIO, new org.apache.thrift.meta_data.FieldMetaData("usuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIdPerito_args.class, metaDataMap);
    }

    public getIdPerito_args() {
    }

    public getIdPerito_args(
      java.lang.String usuario)
    {
      this();
      this.usuario = usuario;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIdPerito_args(getIdPerito_args other) {
      if (other.isSetUsuario()) {
        this.usuario = other.usuario;
      }
    }

    public getIdPerito_args deepCopy() {
      return new getIdPerito_args(this);
    }

    @Override
    public void clear() {
      this.usuario = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsuario() {
      return this.usuario;
    }

    public getIdPerito_args setUsuario(@org.apache.thrift.annotation.Nullable java.lang.String usuario) {
      this.usuario = usuario;
      return this;
    }

    public void unsetUsuario() {
      this.usuario = null;
    }

    /** Returns true if field usuario is set (has been assigned a value) and false otherwise */
    public boolean isSetUsuario() {
      return this.usuario != null;
    }

    public void setUsuarioIsSet(boolean value) {
      if (!value) {
        this.usuario = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USUARIO:
        if (value == null) {
          unsetUsuario();
        } else {
          setUsuario((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USUARIO:
        return getUsuario();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USUARIO:
        return isSetUsuario();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getIdPerito_args)
        return this.equals((getIdPerito_args)that);
      return false;
    }

    public boolean equals(getIdPerito_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_usuario = true && this.isSetUsuario();
      boolean that_present_usuario = true && that.isSetUsuario();
      if (this_present_usuario || that_present_usuario) {
        if (!(this_present_usuario && that_present_usuario))
          return false;
        if (!this.usuario.equals(that.usuario))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsuario()) ? 131071 : 524287);
      if (isSetUsuario())
        hashCode = hashCode * 8191 + usuario.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getIdPerito_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsuario()).compareTo(other.isSetUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usuario, other.usuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getIdPerito_args(");
      boolean first = true;

      sb.append("usuario:");
      if (this.usuario == null) {
        sb.append("null");
      } else {
        sb.append(this.usuario);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIdPerito_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getIdPerito_argsStandardScheme getScheme() {
        return new getIdPerito_argsStandardScheme();
      }
    }

    private static class getIdPerito_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getIdPerito_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIdPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.usuario = iprot.readString();
                struct.setUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIdPerito_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.usuario != null) {
          oprot.writeFieldBegin(USUARIO_FIELD_DESC);
          oprot.writeString(struct.usuario);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIdPerito_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getIdPerito_argsTupleScheme getScheme() {
        return new getIdPerito_argsTupleScheme();
      }
    }

    private static class getIdPerito_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getIdPerito_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIdPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsuario()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUsuario()) {
          oprot.writeString(struct.usuario);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIdPerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.usuario = iprot.readString();
          struct.setUsuarioIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getIdPerito_result implements org.apache.thrift.TBase<getIdPerito_result, getIdPerito_result._Fields>, java.io.Serializable, Cloneable, Comparable<getIdPerito_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIdPerito_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getIdPerito_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getIdPerito_resultTupleSchemeFactory();

    public int success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIdPerito_result.class, metaDataMap);
    }

    public getIdPerito_result() {
    }

    public getIdPerito_result(
      int success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIdPerito_result(getIdPerito_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public getIdPerito_result deepCopy() {
      return new getIdPerito_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ebd = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getIdPerito_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public getIdPerito_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getIdPerito_result)
        return this.equals((getIdPerito_result)that);
      return false;
    }

    public boolean equals(getIdPerito_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getIdPerito_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getIdPerito_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIdPerito_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getIdPerito_resultStandardScheme getScheme() {
        return new getIdPerito_resultStandardScheme();
      }
    }

    private static class getIdPerito_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getIdPerito_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIdPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIdPerito_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIdPerito_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getIdPerito_resultTupleScheme getScheme() {
        return new getIdPerito_resultTupleScheme();
      }
    }

    private static class getIdPerito_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getIdPerito_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIdPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIdPerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getReportesPendientes_args implements org.apache.thrift.TBase<getReportesPendientes_args, getReportesPendientes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReportesPendientes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReportesPendientes_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReportesPendientes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReportesPendientes_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReportesPendientes_args.class, metaDataMap);
    }

    public getReportesPendientes_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReportesPendientes_args(getReportesPendientes_args other) {
    }

    public getReportesPendientes_args deepCopy() {
      return new getReportesPendientes_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getReportesPendientes_args)
        return this.equals((getReportesPendientes_args)that);
      return false;
    }

    public boolean equals(getReportesPendientes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getReportesPendientes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getReportesPendientes_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReportesPendientes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReportesPendientes_argsStandardScheme getScheme() {
        return new getReportesPendientes_argsStandardScheme();
      }
    }

    private static class getReportesPendientes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReportesPendientes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReportesPendientes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReportesPendientes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReportesPendientes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReportesPendientes_argsTupleScheme getScheme() {
        return new getReportesPendientes_argsTupleScheme();
      }
    }

    private static class getReportesPendientes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReportesPendientes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReportesPendientes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReportesPendientes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getReportesPendientes_result implements org.apache.thrift.TBase<getReportesPendientes_result, getReportesPendientes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReportesPendientes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReportesPendientes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReportesPendientes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReportesPendientes_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Reporte> success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reporte.class))));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReportesPendientes_result.class, metaDataMap);
    }

    public getReportesPendientes_result() {
    }

    public getReportesPendientes_result(
      java.util.List<Reporte> success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReportesPendientes_result(getReportesPendientes_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Reporte> __this__success = new java.util.ArrayList<Reporte>(other.success.size());
        for (Reporte other_element : other.success) {
          __this__success.add(new Reporte(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public getReportesPendientes_result deepCopy() {
      return new getReportesPendientes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ebd = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Reporte> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Reporte elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Reporte>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Reporte> getSuccess() {
      return this.success;
    }

    public getReportesPendientes_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Reporte> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public getReportesPendientes_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Reporte>)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getReportesPendientes_result)
        return this.equals((getReportesPendientes_result)that);
      return false;
    }

    public boolean equals(getReportesPendientes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getReportesPendientes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getReportesPendientes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReportesPendientes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReportesPendientes_resultStandardScheme getScheme() {
        return new getReportesPendientes_resultStandardScheme();
      }
    }

    private static class getReportesPendientes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReportesPendientes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReportesPendientes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Reporte>(_list16.size);
                  @org.apache.thrift.annotation.Nullable Reporte _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new Reporte();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReportesPendientes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Reporte _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReportesPendientes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReportesPendientes_resultTupleScheme getScheme() {
        return new getReportesPendientes_resultTupleScheme();
      }
    }

    private static class getReportesPendientes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReportesPendientes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReportesPendientes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Reporte _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReportesPendientes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Reporte>(_list21.size);
            @org.apache.thrift.annotation.Nullable Reporte _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new Reporte();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getReportesAsignados_args implements org.apache.thrift.TBase<getReportesAsignados_args, getReportesAsignados_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReportesAsignados_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReportesAsignados_args");

    private static final org.apache.thrift.protocol.TField ID_PERITO_FIELD_DESC = new org.apache.thrift.protocol.TField("idPerito", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReportesAsignados_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReportesAsignados_argsTupleSchemeFactory();

    public int idPerito; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_PERITO((short)1, "idPerito");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_PERITO
            return ID_PERITO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDPERITO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_PERITO, new org.apache.thrift.meta_data.FieldMetaData("idPerito", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReportesAsignados_args.class, metaDataMap);
    }

    public getReportesAsignados_args() {
    }

    public getReportesAsignados_args(
      int idPerito)
    {
      this();
      this.idPerito = idPerito;
      setIdPeritoIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReportesAsignados_args(getReportesAsignados_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idPerito = other.idPerito;
    }

    public getReportesAsignados_args deepCopy() {
      return new getReportesAsignados_args(this);
    }

    @Override
    public void clear() {
      setIdPeritoIsSet(false);
      this.idPerito = 0;
    }

    public int getIdPerito() {
      return this.idPerito;
    }

    public getReportesAsignados_args setIdPerito(int idPerito) {
      this.idPerito = idPerito;
      setIdPeritoIsSet(true);
      return this;
    }

    public void unsetIdPerito() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDPERITO_ISSET_ID);
    }

    /** Returns true if field idPerito is set (has been assigned a value) and false otherwise */
    public boolean isSetIdPerito() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDPERITO_ISSET_ID);
    }

    public void setIdPeritoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDPERITO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ID_PERITO:
        if (value == null) {
          unsetIdPerito();
        } else {
          setIdPerito((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_PERITO:
        return getIdPerito();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID_PERITO:
        return isSetIdPerito();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getReportesAsignados_args)
        return this.equals((getReportesAsignados_args)that);
      return false;
    }

    public boolean equals(getReportesAsignados_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_idPerito = true;
      boolean that_present_idPerito = true;
      if (this_present_idPerito || that_present_idPerito) {
        if (!(this_present_idPerito && that_present_idPerito))
          return false;
        if (this.idPerito != that.idPerito)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + idPerito;

      return hashCode;
    }

    @Override
    public int compareTo(getReportesAsignados_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIdPerito()).compareTo(other.isSetIdPerito());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdPerito()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idPerito, other.idPerito);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getReportesAsignados_args(");
      boolean first = true;

      sb.append("idPerito:");
      sb.append(this.idPerito);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReportesAsignados_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReportesAsignados_argsStandardScheme getScheme() {
        return new getReportesAsignados_argsStandardScheme();
      }
    }

    private static class getReportesAsignados_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReportesAsignados_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReportesAsignados_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_PERITO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idPerito = iprot.readI32();
                struct.setIdPeritoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReportesAsignados_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_PERITO_FIELD_DESC);
        oprot.writeI32(struct.idPerito);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReportesAsignados_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReportesAsignados_argsTupleScheme getScheme() {
        return new getReportesAsignados_argsTupleScheme();
      }
    }

    private static class getReportesAsignados_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReportesAsignados_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReportesAsignados_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIdPerito()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdPerito()) {
          oprot.writeI32(struct.idPerito);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReportesAsignados_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idPerito = iprot.readI32();
          struct.setIdPeritoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getReportesAsignados_result implements org.apache.thrift.TBase<getReportesAsignados_result, getReportesAsignados_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReportesAsignados_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReportesAsignados_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReportesAsignados_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReportesAsignados_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Reporte> success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reporte.class))));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReportesAsignados_result.class, metaDataMap);
    }

    public getReportesAsignados_result() {
    }

    public getReportesAsignados_result(
      java.util.List<Reporte> success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReportesAsignados_result(getReportesAsignados_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Reporte> __this__success = new java.util.ArrayList<Reporte>(other.success.size());
        for (Reporte other_element : other.success) {
          __this__success.add(new Reporte(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public getReportesAsignados_result deepCopy() {
      return new getReportesAsignados_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ebd = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Reporte> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Reporte elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Reporte>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Reporte> getSuccess() {
      return this.success;
    }

    public getReportesAsignados_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Reporte> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public getReportesAsignados_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Reporte>)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getReportesAsignados_result)
        return this.equals((getReportesAsignados_result)that);
      return false;
    }

    public boolean equals(getReportesAsignados_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getReportesAsignados_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getReportesAsignados_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReportesAsignados_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReportesAsignados_resultStandardScheme getScheme() {
        return new getReportesAsignados_resultStandardScheme();
      }
    }

    private static class getReportesAsignados_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReportesAsignados_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReportesAsignados_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Reporte>(_list24.size);
                  @org.apache.thrift.annotation.Nullable Reporte _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new Reporte();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReportesAsignados_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Reporte _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReportesAsignados_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReportesAsignados_resultTupleScheme getScheme() {
        return new getReportesAsignados_resultTupleScheme();
      }
    }

    private static class getReportesAsignados_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReportesAsignados_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReportesAsignados_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Reporte _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReportesAsignados_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Reporte>(_list29.size);
            @org.apache.thrift.annotation.Nullable Reporte _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new Reporte();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class asignarReportePerito_args implements org.apache.thrift.TBase<asignarReportePerito_args, asignarReportePerito_args._Fields>, java.io.Serializable, Cloneable, Comparable<asignarReportePerito_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("asignarReportePerito_args");

    private static final org.apache.thrift.protocol.TField ID_PERITO_FIELD_DESC = new org.apache.thrift.protocol.TField("idPerito", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ID_REPORTE_FIELD_DESC = new org.apache.thrift.protocol.TField("idReporte", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new asignarReportePerito_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new asignarReportePerito_argsTupleSchemeFactory();

    public int idPerito; // required
    public int idReporte; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_PERITO((short)1, "idPerito"),
      ID_REPORTE((short)2, "idReporte");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_PERITO
            return ID_PERITO;
          case 2: // ID_REPORTE
            return ID_REPORTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDPERITO_ISSET_ID = 0;
    private static final int __IDREPORTE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_PERITO, new org.apache.thrift.meta_data.FieldMetaData("idPerito", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ID_REPORTE, new org.apache.thrift.meta_data.FieldMetaData("idReporte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(asignarReportePerito_args.class, metaDataMap);
    }

    public asignarReportePerito_args() {
    }

    public asignarReportePerito_args(
      int idPerito,
      int idReporte)
    {
      this();
      this.idPerito = idPerito;
      setIdPeritoIsSet(true);
      this.idReporte = idReporte;
      setIdReporteIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public asignarReportePerito_args(asignarReportePerito_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idPerito = other.idPerito;
      this.idReporte = other.idReporte;
    }

    public asignarReportePerito_args deepCopy() {
      return new asignarReportePerito_args(this);
    }

    @Override
    public void clear() {
      setIdPeritoIsSet(false);
      this.idPerito = 0;
      setIdReporteIsSet(false);
      this.idReporte = 0;
    }

    public int getIdPerito() {
      return this.idPerito;
    }

    public asignarReportePerito_args setIdPerito(int idPerito) {
      this.idPerito = idPerito;
      setIdPeritoIsSet(true);
      return this;
    }

    public void unsetIdPerito() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDPERITO_ISSET_ID);
    }

    /** Returns true if field idPerito is set (has been assigned a value) and false otherwise */
    public boolean isSetIdPerito() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDPERITO_ISSET_ID);
    }

    public void setIdPeritoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDPERITO_ISSET_ID, value);
    }

    public int getIdReporte() {
      return this.idReporte;
    }

    public asignarReportePerito_args setIdReporte(int idReporte) {
      this.idReporte = idReporte;
      setIdReporteIsSet(true);
      return this;
    }

    public void unsetIdReporte() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDREPORTE_ISSET_ID);
    }

    /** Returns true if field idReporte is set (has been assigned a value) and false otherwise */
    public boolean isSetIdReporte() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDREPORTE_ISSET_ID);
    }

    public void setIdReporteIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDREPORTE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ID_PERITO:
        if (value == null) {
          unsetIdPerito();
        } else {
          setIdPerito((java.lang.Integer)value);
        }
        break;

      case ID_REPORTE:
        if (value == null) {
          unsetIdReporte();
        } else {
          setIdReporte((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_PERITO:
        return getIdPerito();

      case ID_REPORTE:
        return getIdReporte();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID_PERITO:
        return isSetIdPerito();
      case ID_REPORTE:
        return isSetIdReporte();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof asignarReportePerito_args)
        return this.equals((asignarReportePerito_args)that);
      return false;
    }

    public boolean equals(asignarReportePerito_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_idPerito = true;
      boolean that_present_idPerito = true;
      if (this_present_idPerito || that_present_idPerito) {
        if (!(this_present_idPerito && that_present_idPerito))
          return false;
        if (this.idPerito != that.idPerito)
          return false;
      }

      boolean this_present_idReporte = true;
      boolean that_present_idReporte = true;
      if (this_present_idReporte || that_present_idReporte) {
        if (!(this_present_idReporte && that_present_idReporte))
          return false;
        if (this.idReporte != that.idReporte)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + idPerito;

      hashCode = hashCode * 8191 + idReporte;

      return hashCode;
    }

    @Override
    public int compareTo(asignarReportePerito_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIdPerito()).compareTo(other.isSetIdPerito());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdPerito()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idPerito, other.idPerito);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIdReporte()).compareTo(other.isSetIdReporte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdReporte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idReporte, other.idReporte);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("asignarReportePerito_args(");
      boolean first = true;

      sb.append("idPerito:");
      sb.append(this.idPerito);
      first = false;
      if (!first) sb.append(", ");
      sb.append("idReporte:");
      sb.append(this.idReporte);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class asignarReportePerito_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public asignarReportePerito_argsStandardScheme getScheme() {
        return new asignarReportePerito_argsStandardScheme();
      }
    }

    private static class asignarReportePerito_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<asignarReportePerito_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, asignarReportePerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_PERITO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idPerito = iprot.readI32();
                struct.setIdPeritoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID_REPORTE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idReporte = iprot.readI32();
                struct.setIdReporteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, asignarReportePerito_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_PERITO_FIELD_DESC);
        oprot.writeI32(struct.idPerito);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID_REPORTE_FIELD_DESC);
        oprot.writeI32(struct.idReporte);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class asignarReportePerito_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public asignarReportePerito_argsTupleScheme getScheme() {
        return new asignarReportePerito_argsTupleScheme();
      }
    }

    private static class asignarReportePerito_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<asignarReportePerito_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, asignarReportePerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIdPerito()) {
          optionals.set(0);
        }
        if (struct.isSetIdReporte()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIdPerito()) {
          oprot.writeI32(struct.idPerito);
        }
        if (struct.isSetIdReporte()) {
          oprot.writeI32(struct.idReporte);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, asignarReportePerito_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.idPerito = iprot.readI32();
          struct.setIdPeritoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.idReporte = iprot.readI32();
          struct.setIdReporteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class asignarReportePerito_result implements org.apache.thrift.TBase<asignarReportePerito_result, asignarReportePerito_result._Fields>, java.io.Serializable, Cloneable, Comparable<asignarReportePerito_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("asignarReportePerito_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new asignarReportePerito_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new asignarReportePerito_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(asignarReportePerito_result.class, metaDataMap);
    }

    public asignarReportePerito_result() {
    }

    public asignarReportePerito_result(
      boolean success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public asignarReportePerito_result(asignarReportePerito_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public asignarReportePerito_result deepCopy() {
      return new asignarReportePerito_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ebd = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public asignarReportePerito_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public asignarReportePerito_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof asignarReportePerito_result)
        return this.equals((asignarReportePerito_result)that);
      return false;
    }

    public boolean equals(asignarReportePerito_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(asignarReportePerito_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("asignarReportePerito_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class asignarReportePerito_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public asignarReportePerito_resultStandardScheme getScheme() {
        return new asignarReportePerito_resultStandardScheme();
      }
    }

    private static class asignarReportePerito_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<asignarReportePerito_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, asignarReportePerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, asignarReportePerito_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class asignarReportePerito_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public asignarReportePerito_resultTupleScheme getScheme() {
        return new asignarReportePerito_resultTupleScheme();
      }
    }

    private static class asignarReportePerito_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<asignarReportePerito_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, asignarReportePerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, asignarReportePerito_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getReporte_args implements org.apache.thrift.TBase<getReporte_args, getReporte_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReporte_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReporte_args");

    private static final org.apache.thrift.protocol.TField ID_REPORTE_FIELD_DESC = new org.apache.thrift.protocol.TField("idReporte", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReporte_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReporte_argsTupleSchemeFactory();

    public int idReporte; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_REPORTE((short)1, "idReporte");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_REPORTE
            return ID_REPORTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDREPORTE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_REPORTE, new org.apache.thrift.meta_data.FieldMetaData("idReporte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReporte_args.class, metaDataMap);
    }

    public getReporte_args() {
    }

    public getReporte_args(
      int idReporte)
    {
      this();
      this.idReporte = idReporte;
      setIdReporteIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReporte_args(getReporte_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idReporte = other.idReporte;
    }

    public getReporte_args deepCopy() {
      return new getReporte_args(this);
    }

    @Override
    public void clear() {
      setIdReporteIsSet(false);
      this.idReporte = 0;
    }

    public int getIdReporte() {
      return this.idReporte;
    }

    public getReporte_args setIdReporte(int idReporte) {
      this.idReporte = idReporte;
      setIdReporteIsSet(true);
      return this;
    }

    public void unsetIdReporte() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDREPORTE_ISSET_ID);
    }

    /** Returns true if field idReporte is set (has been assigned a value) and false otherwise */
    public boolean isSetIdReporte() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDREPORTE_ISSET_ID);
    }

    public void setIdReporteIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDREPORTE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ID_REPORTE:
        if (value == null) {
          unsetIdReporte();
        } else {
          setIdReporte((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_REPORTE:
        return getIdReporte();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID_REPORTE:
        return isSetIdReporte();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getReporte_args)
        return this.equals((getReporte_args)that);
      return false;
    }

    public boolean equals(getReporte_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_idReporte = true;
      boolean that_present_idReporte = true;
      if (this_present_idReporte || that_present_idReporte) {
        if (!(this_present_idReporte && that_present_idReporte))
          return false;
        if (this.idReporte != that.idReporte)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + idReporte;

      return hashCode;
    }

    @Override
    public int compareTo(getReporte_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIdReporte()).compareTo(other.isSetIdReporte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdReporte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idReporte, other.idReporte);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getReporte_args(");
      boolean first = true;

      sb.append("idReporte:");
      sb.append(this.idReporte);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReporte_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReporte_argsStandardScheme getScheme() {
        return new getReporte_argsStandardScheme();
      }
    }

    private static class getReporte_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReporte_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReporte_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_REPORTE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idReporte = iprot.readI32();
                struct.setIdReporteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReporte_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_REPORTE_FIELD_DESC);
        oprot.writeI32(struct.idReporte);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReporte_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReporte_argsTupleScheme getScheme() {
        return new getReporte_argsTupleScheme();
      }
    }

    private static class getReporte_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReporte_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReporte_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIdReporte()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdReporte()) {
          oprot.writeI32(struct.idReporte);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReporte_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idReporte = iprot.readI32();
          struct.setIdReporteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getReporte_result implements org.apache.thrift.TBase<getReporte_result, getReporte_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReporte_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReporte_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReporte_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReporte_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Reporte success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reporte.class)));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReporte_result.class, metaDataMap);
    }

    public getReporte_result() {
    }

    public getReporte_result(
      Reporte success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReporte_result(getReporte_result other) {
      if (other.isSetSuccess()) {
        this.success = new Reporte(other.success);
      }
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public getReporte_result deepCopy() {
      return new getReporte_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ebd = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Reporte getSuccess() {
      return this.success;
    }

    public getReporte_result setSuccess(@org.apache.thrift.annotation.Nullable Reporte success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public getReporte_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Reporte)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getReporte_result)
        return this.equals((getReporte_result)that);
      return false;
    }

    public boolean equals(getReporte_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getReporte_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getReporte_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReporte_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReporte_resultStandardScheme getScheme() {
        return new getReporte_resultStandardScheme();
      }
    }

    private static class getReporte_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReporte_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReporte_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Reporte();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReporte_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReporte_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReporte_resultTupleScheme getScheme() {
        return new getReporte_resultTupleScheme();
      }
    }

    private static class getReporte_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReporte_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReporte_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReporte_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Reporte();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class levantarDictamen_args implements org.apache.thrift.TBase<levantarDictamen_args, levantarDictamen_args._Fields>, java.io.Serializable, Cloneable, Comparable<levantarDictamen_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("levantarDictamen_args");

    private static final org.apache.thrift.protocol.TField DICTAMEN_FIELD_DESC = new org.apache.thrift.protocol.TField("dictamen", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new levantarDictamen_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new levantarDictamen_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Dictamen dictamen; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DICTAMEN((short)1, "dictamen");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DICTAMEN
            return DICTAMEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DICTAMEN, new org.apache.thrift.meta_data.FieldMetaData("dictamen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dictamen.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(levantarDictamen_args.class, metaDataMap);
    }

    public levantarDictamen_args() {
    }

    public levantarDictamen_args(
      Dictamen dictamen)
    {
      this();
      this.dictamen = dictamen;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public levantarDictamen_args(levantarDictamen_args other) {
      if (other.isSetDictamen()) {
        this.dictamen = new Dictamen(other.dictamen);
      }
    }

    public levantarDictamen_args deepCopy() {
      return new levantarDictamen_args(this);
    }

    @Override
    public void clear() {
      this.dictamen = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Dictamen getDictamen() {
      return this.dictamen;
    }

    public levantarDictamen_args setDictamen(@org.apache.thrift.annotation.Nullable Dictamen dictamen) {
      this.dictamen = dictamen;
      return this;
    }

    public void unsetDictamen() {
      this.dictamen = null;
    }

    /** Returns true if field dictamen is set (has been assigned a value) and false otherwise */
    public boolean isSetDictamen() {
      return this.dictamen != null;
    }

    public void setDictamenIsSet(boolean value) {
      if (!value) {
        this.dictamen = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DICTAMEN:
        if (value == null) {
          unsetDictamen();
        } else {
          setDictamen((Dictamen)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DICTAMEN:
        return getDictamen();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DICTAMEN:
        return isSetDictamen();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof levantarDictamen_args)
        return this.equals((levantarDictamen_args)that);
      return false;
    }

    public boolean equals(levantarDictamen_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dictamen = true && this.isSetDictamen();
      boolean that_present_dictamen = true && that.isSetDictamen();
      if (this_present_dictamen || that_present_dictamen) {
        if (!(this_present_dictamen && that_present_dictamen))
          return false;
        if (!this.dictamen.equals(that.dictamen))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDictamen()) ? 131071 : 524287);
      if (isSetDictamen())
        hashCode = hashCode * 8191 + dictamen.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(levantarDictamen_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDictamen()).compareTo(other.isSetDictamen());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDictamen()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictamen, other.dictamen);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("levantarDictamen_args(");
      boolean first = true;

      sb.append("dictamen:");
      if (this.dictamen == null) {
        sb.append("null");
      } else {
        sb.append(this.dictamen);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dictamen != null) {
        dictamen.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class levantarDictamen_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public levantarDictamen_argsStandardScheme getScheme() {
        return new levantarDictamen_argsStandardScheme();
      }
    }

    private static class levantarDictamen_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<levantarDictamen_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, levantarDictamen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DICTAMEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dictamen = new Dictamen();
                struct.dictamen.read(iprot);
                struct.setDictamenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, levantarDictamen_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dictamen != null) {
          oprot.writeFieldBegin(DICTAMEN_FIELD_DESC);
          struct.dictamen.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class levantarDictamen_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public levantarDictamen_argsTupleScheme getScheme() {
        return new levantarDictamen_argsTupleScheme();
      }
    }

    private static class levantarDictamen_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<levantarDictamen_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, levantarDictamen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDictamen()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDictamen()) {
          struct.dictamen.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, levantarDictamen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dictamen = new Dictamen();
          struct.dictamen.read(iprot);
          struct.setDictamenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class levantarDictamen_result implements org.apache.thrift.TBase<levantarDictamen_result, levantarDictamen_result._Fields>, java.io.Serializable, Cloneable, Comparable<levantarDictamen_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("levantarDictamen_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new levantarDictamen_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new levantarDictamen_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(levantarDictamen_result.class, metaDataMap);
    }

    public levantarDictamen_result() {
    }

    public levantarDictamen_result(
      boolean success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public levantarDictamen_result(levantarDictamen_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public levantarDictamen_result deepCopy() {
      return new levantarDictamen_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ebd = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public levantarDictamen_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public levantarDictamen_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof levantarDictamen_result)
        return this.equals((levantarDictamen_result)that);
      return false;
    }

    public boolean equals(levantarDictamen_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(levantarDictamen_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("levantarDictamen_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class levantarDictamen_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public levantarDictamen_resultStandardScheme getScheme() {
        return new levantarDictamen_resultStandardScheme();
      }
    }

    private static class levantarDictamen_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<levantarDictamen_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, levantarDictamen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, levantarDictamen_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class levantarDictamen_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public levantarDictamen_resultTupleScheme getScheme() {
        return new levantarDictamen_resultTupleScheme();
      }
    }

    private static class levantarDictamen_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<levantarDictamen_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, levantarDictamen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, levantarDictamen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDictamen_args implements org.apache.thrift.TBase<getDictamen_args, getDictamen_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDictamen_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDictamen_args");

    private static final org.apache.thrift.protocol.TField ID_REPORTE_FIELD_DESC = new org.apache.thrift.protocol.TField("idReporte", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDictamen_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDictamen_argsTupleSchemeFactory();

    public int idReporte; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_REPORTE((short)1, "idReporte");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_REPORTE
            return ID_REPORTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDREPORTE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_REPORTE, new org.apache.thrift.meta_data.FieldMetaData("idReporte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDictamen_args.class, metaDataMap);
    }

    public getDictamen_args() {
    }

    public getDictamen_args(
      int idReporte)
    {
      this();
      this.idReporte = idReporte;
      setIdReporteIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDictamen_args(getDictamen_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idReporte = other.idReporte;
    }

    public getDictamen_args deepCopy() {
      return new getDictamen_args(this);
    }

    @Override
    public void clear() {
      setIdReporteIsSet(false);
      this.idReporte = 0;
    }

    public int getIdReporte() {
      return this.idReporte;
    }

    public getDictamen_args setIdReporte(int idReporte) {
      this.idReporte = idReporte;
      setIdReporteIsSet(true);
      return this;
    }

    public void unsetIdReporte() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDREPORTE_ISSET_ID);
    }

    /** Returns true if field idReporte is set (has been assigned a value) and false otherwise */
    public boolean isSetIdReporte() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDREPORTE_ISSET_ID);
    }

    public void setIdReporteIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDREPORTE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ID_REPORTE:
        if (value == null) {
          unsetIdReporte();
        } else {
          setIdReporte((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_REPORTE:
        return getIdReporte();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID_REPORTE:
        return isSetIdReporte();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDictamen_args)
        return this.equals((getDictamen_args)that);
      return false;
    }

    public boolean equals(getDictamen_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_idReporte = true;
      boolean that_present_idReporte = true;
      if (this_present_idReporte || that_present_idReporte) {
        if (!(this_present_idReporte && that_present_idReporte))
          return false;
        if (this.idReporte != that.idReporte)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + idReporte;

      return hashCode;
    }

    @Override
    public int compareTo(getDictamen_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIdReporte()).compareTo(other.isSetIdReporte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdReporte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idReporte, other.idReporte);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDictamen_args(");
      boolean first = true;

      sb.append("idReporte:");
      sb.append(this.idReporte);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDictamen_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDictamen_argsStandardScheme getScheme() {
        return new getDictamen_argsStandardScheme();
      }
    }

    private static class getDictamen_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDictamen_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDictamen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_REPORTE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idReporte = iprot.readI32();
                struct.setIdReporteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDictamen_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_REPORTE_FIELD_DESC);
        oprot.writeI32(struct.idReporte);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDictamen_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDictamen_argsTupleScheme getScheme() {
        return new getDictamen_argsTupleScheme();
      }
    }

    private static class getDictamen_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDictamen_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDictamen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIdReporte()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdReporte()) {
          oprot.writeI32(struct.idReporte);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDictamen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idReporte = iprot.readI32();
          struct.setIdReporteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDictamen_result implements org.apache.thrift.TBase<getDictamen_result, getDictamen_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDictamen_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDictamen_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDictamen_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDictamen_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Dictamen success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dictamen.class)));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDictamen_result.class, metaDataMap);
    }

    public getDictamen_result() {
    }

    public getDictamen_result(
      Dictamen success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDictamen_result(getDictamen_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dictamen(other.success);
      }
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public getDictamen_result deepCopy() {
      return new getDictamen_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ebd = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Dictamen getSuccess() {
      return this.success;
    }

    public getDictamen_result setSuccess(@org.apache.thrift.annotation.Nullable Dictamen success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public getDictamen_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dictamen)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDictamen_result)
        return this.equals((getDictamen_result)that);
      return false;
    }

    public boolean equals(getDictamen_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDictamen_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDictamen_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDictamen_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDictamen_resultStandardScheme getScheme() {
        return new getDictamen_resultStandardScheme();
      }
    }

    private static class getDictamen_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDictamen_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDictamen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dictamen();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDictamen_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDictamen_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDictamen_resultTupleScheme getScheme() {
        return new getDictamen_resultTupleScheme();
      }
    }

    private static class getDictamen_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDictamen_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDictamen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDictamen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Dictamen();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPlacasVehiculosReporte_args implements org.apache.thrift.TBase<getPlacasVehiculosReporte_args, getPlacasVehiculosReporte_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPlacasVehiculosReporte_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlacasVehiculosReporte_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPlacasVehiculosReporte_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPlacasVehiculosReporte_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlacasVehiculosReporte_args.class, metaDataMap);
    }

    public getPlacasVehiculosReporte_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlacasVehiculosReporte_args(getPlacasVehiculosReporte_args other) {
    }

    public getPlacasVehiculosReporte_args deepCopy() {
      return new getPlacasVehiculosReporte_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlacasVehiculosReporte_args)
        return this.equals((getPlacasVehiculosReporte_args)that);
      return false;
    }

    public boolean equals(getPlacasVehiculosReporte_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getPlacasVehiculosReporte_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPlacasVehiculosReporte_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlacasVehiculosReporte_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPlacasVehiculosReporte_argsStandardScheme getScheme() {
        return new getPlacasVehiculosReporte_argsStandardScheme();
      }
    }

    private static class getPlacasVehiculosReporte_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPlacasVehiculosReporte_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlacasVehiculosReporte_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlacasVehiculosReporte_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlacasVehiculosReporte_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPlacasVehiculosReporte_argsTupleScheme getScheme() {
        return new getPlacasVehiculosReporte_argsTupleScheme();
      }
    }

    private static class getPlacasVehiculosReporte_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPlacasVehiculosReporte_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlacasVehiculosReporte_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlacasVehiculosReporte_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPlacasVehiculosReporte_result implements org.apache.thrift.TBase<getPlacasVehiculosReporte_result, getPlacasVehiculosReporte_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPlacasVehiculosReporte_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlacasVehiculosReporte_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPlacasVehiculosReporte_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPlacasVehiculosReporte_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<VehiculosReporte> success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VehiculosReporte.class))));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlacasVehiculosReporte_result.class, metaDataMap);
    }

    public getPlacasVehiculosReporte_result() {
    }

    public getPlacasVehiculosReporte_result(
      java.util.List<VehiculosReporte> success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlacasVehiculosReporte_result(getPlacasVehiculosReporte_result other) {
      if (other.isSetSuccess()) {
        java.util.List<VehiculosReporte> __this__success = new java.util.ArrayList<VehiculosReporte>(other.success.size());
        for (VehiculosReporte other_element : other.success) {
          __this__success.add(new VehiculosReporte(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public getPlacasVehiculosReporte_result deepCopy() {
      return new getPlacasVehiculosReporte_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ebd = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<VehiculosReporte> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(VehiculosReporte elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<VehiculosReporte>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<VehiculosReporte> getSuccess() {
      return this.success;
    }

    public getPlacasVehiculosReporte_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<VehiculosReporte> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public getPlacasVehiculosReporte_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<VehiculosReporte>)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlacasVehiculosReporte_result)
        return this.equals((getPlacasVehiculosReporte_result)that);
      return false;
    }

    public boolean equals(getPlacasVehiculosReporte_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPlacasVehiculosReporte_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPlacasVehiculosReporte_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlacasVehiculosReporte_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPlacasVehiculosReporte_resultStandardScheme getScheme() {
        return new getPlacasVehiculosReporte_resultStandardScheme();
      }
    }

    private static class getPlacasVehiculosReporte_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPlacasVehiculosReporte_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlacasVehiculosReporte_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<VehiculosReporte>(_list32.size);
                  @org.apache.thrift.annotation.Nullable VehiculosReporte _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new VehiculosReporte();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlacasVehiculosReporte_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (VehiculosReporte _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlacasVehiculosReporte_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPlacasVehiculosReporte_resultTupleScheme getScheme() {
        return new getPlacasVehiculosReporte_resultTupleScheme();
      }
    }

    private static class getPlacasVehiculosReporte_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPlacasVehiculosReporte_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlacasVehiculosReporte_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (VehiculosReporte _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlacasVehiculosReporte_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<VehiculosReporte>(_list37.size);
            @org.apache.thrift.annotation.Nullable VehiculosReporte _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new VehiculosReporte();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cargarImagenes_args implements org.apache.thrift.TBase<cargarImagenes_args, cargarImagenes_args._Fields>, java.io.Serializable, Cloneable, Comparable<cargarImagenes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cargarImagenes_args");

    private static final org.apache.thrift.protocol.TField LISTA_IMAGENES_FIELD_DESC = new org.apache.thrift.protocol.TField("listaImagenes", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField IDREPORTE_FIELD_DESC = new org.apache.thrift.protocol.TField("idreporte", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cargarImagenes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cargarImagenes_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> listaImagenes; // required
    public int idreporte; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LISTA_IMAGENES((short)1, "listaImagenes"),
      IDREPORTE((short)2, "idreporte");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LISTA_IMAGENES
            return LISTA_IMAGENES;
          case 2: // IDREPORTE
            return IDREPORTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDREPORTE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LISTA_IMAGENES, new org.apache.thrift.meta_data.FieldMetaData("listaImagenes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      tmpMap.put(_Fields.IDREPORTE, new org.apache.thrift.meta_data.FieldMetaData("idreporte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cargarImagenes_args.class, metaDataMap);
    }

    public cargarImagenes_args() {
    }

    public cargarImagenes_args(
      java.util.List<java.nio.ByteBuffer> listaImagenes,
      int idreporte)
    {
      this();
      this.listaImagenes = listaImagenes;
      this.idreporte = idreporte;
      setIdreporteIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cargarImagenes_args(cargarImagenes_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetListaImagenes()) {
        java.util.List<java.nio.ByteBuffer> __this__listaImagenes = new java.util.ArrayList<java.nio.ByteBuffer>(other.listaImagenes);
        this.listaImagenes = __this__listaImagenes;
      }
      this.idreporte = other.idreporte;
    }

    public cargarImagenes_args deepCopy() {
      return new cargarImagenes_args(this);
    }

    @Override
    public void clear() {
      this.listaImagenes = null;
      setIdreporteIsSet(false);
      this.idreporte = 0;
    }

    public int getListaImagenesSize() {
      return (this.listaImagenes == null) ? 0 : this.listaImagenes.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.nio.ByteBuffer> getListaImagenesIterator() {
      return (this.listaImagenes == null) ? null : this.listaImagenes.iterator();
    }

    public void addToListaImagenes(java.nio.ByteBuffer elem) {
      if (this.listaImagenes == null) {
        this.listaImagenes = new java.util.ArrayList<java.nio.ByteBuffer>();
      }
      this.listaImagenes.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.nio.ByteBuffer> getListaImagenes() {
      return this.listaImagenes;
    }

    public cargarImagenes_args setListaImagenes(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> listaImagenes) {
      this.listaImagenes = listaImagenes;
      return this;
    }

    public void unsetListaImagenes() {
      this.listaImagenes = null;
    }

    /** Returns true if field listaImagenes is set (has been assigned a value) and false otherwise */
    public boolean isSetListaImagenes() {
      return this.listaImagenes != null;
    }

    public void setListaImagenesIsSet(boolean value) {
      if (!value) {
        this.listaImagenes = null;
      }
    }

    public int getIdreporte() {
      return this.idreporte;
    }

    public cargarImagenes_args setIdreporte(int idreporte) {
      this.idreporte = idreporte;
      setIdreporteIsSet(true);
      return this;
    }

    public void unsetIdreporte() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDREPORTE_ISSET_ID);
    }

    /** Returns true if field idreporte is set (has been assigned a value) and false otherwise */
    public boolean isSetIdreporte() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDREPORTE_ISSET_ID);
    }

    public void setIdreporteIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDREPORTE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case LISTA_IMAGENES:
        if (value == null) {
          unsetListaImagenes();
        } else {
          setListaImagenes((java.util.List<java.nio.ByteBuffer>)value);
        }
        break;

      case IDREPORTE:
        if (value == null) {
          unsetIdreporte();
        } else {
          setIdreporte((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LISTA_IMAGENES:
        return getListaImagenes();

      case IDREPORTE:
        return getIdreporte();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LISTA_IMAGENES:
        return isSetListaImagenes();
      case IDREPORTE:
        return isSetIdreporte();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cargarImagenes_args)
        return this.equals((cargarImagenes_args)that);
      return false;
    }

    public boolean equals(cargarImagenes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_listaImagenes = true && this.isSetListaImagenes();
      boolean that_present_listaImagenes = true && that.isSetListaImagenes();
      if (this_present_listaImagenes || that_present_listaImagenes) {
        if (!(this_present_listaImagenes && that_present_listaImagenes))
          return false;
        if (!this.listaImagenes.equals(that.listaImagenes))
          return false;
      }

      boolean this_present_idreporte = true;
      boolean that_present_idreporte = true;
      if (this_present_idreporte || that_present_idreporte) {
        if (!(this_present_idreporte && that_present_idreporte))
          return false;
        if (this.idreporte != that.idreporte)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetListaImagenes()) ? 131071 : 524287);
      if (isSetListaImagenes())
        hashCode = hashCode * 8191 + listaImagenes.hashCode();

      hashCode = hashCode * 8191 + idreporte;

      return hashCode;
    }

    @Override
    public int compareTo(cargarImagenes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetListaImagenes()).compareTo(other.isSetListaImagenes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListaImagenes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listaImagenes, other.listaImagenes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIdreporte()).compareTo(other.isSetIdreporte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdreporte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idreporte, other.idreporte);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cargarImagenes_args(");
      boolean first = true;

      sb.append("listaImagenes:");
      if (this.listaImagenes == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.listaImagenes, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("idreporte:");
      sb.append(this.idreporte);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cargarImagenes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cargarImagenes_argsStandardScheme getScheme() {
        return new cargarImagenes_argsStandardScheme();
      }
    }

    private static class cargarImagenes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<cargarImagenes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cargarImagenes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LISTA_IMAGENES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.listaImagenes = new java.util.ArrayList<java.nio.ByteBuffer>(_list40.size);
                  @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = iprot.readBinary();
                    struct.listaImagenes.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setListaImagenesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IDREPORTE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idreporte = iprot.readI32();
                struct.setIdreporteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cargarImagenes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listaImagenes != null) {
          oprot.writeFieldBegin(LISTA_IMAGENES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listaImagenes.size()));
            for (java.nio.ByteBuffer _iter43 : struct.listaImagenes)
            {
              oprot.writeBinary(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IDREPORTE_FIELD_DESC);
        oprot.writeI32(struct.idreporte);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cargarImagenes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cargarImagenes_argsTupleScheme getScheme() {
        return new cargarImagenes_argsTupleScheme();
      }
    }

    private static class cargarImagenes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<cargarImagenes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cargarImagenes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetListaImagenes()) {
          optionals.set(0);
        }
        if (struct.isSetIdreporte()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetListaImagenes()) {
          {
            oprot.writeI32(struct.listaImagenes.size());
            for (java.nio.ByteBuffer _iter44 : struct.listaImagenes)
            {
              oprot.writeBinary(_iter44);
            }
          }
        }
        if (struct.isSetIdreporte()) {
          oprot.writeI32(struct.idreporte);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cargarImagenes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.listaImagenes = new java.util.ArrayList<java.nio.ByteBuffer>(_list45.size);
            @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readBinary();
              struct.listaImagenes.add(_elem46);
            }
          }
          struct.setListaImagenesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.idreporte = iprot.readI32();
          struct.setIdreporteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cargarImagenes_result implements org.apache.thrift.TBase<cargarImagenes_result, cargarImagenes_result._Fields>, java.io.Serializable, Cloneable, Comparable<cargarImagenes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cargarImagenes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cargarImagenes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cargarImagenes_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cargarImagenes_result.class, metaDataMap);
    }

    public cargarImagenes_result() {
    }

    public cargarImagenes_result(
      boolean success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cargarImagenes_result(cargarImagenes_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public cargarImagenes_result deepCopy() {
      return new cargarImagenes_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ebd = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public cargarImagenes_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public cargarImagenes_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cargarImagenes_result)
        return this.equals((cargarImagenes_result)that);
      return false;
    }

    public boolean equals(cargarImagenes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(cargarImagenes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cargarImagenes_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cargarImagenes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cargarImagenes_resultStandardScheme getScheme() {
        return new cargarImagenes_resultStandardScheme();
      }
    }

    private static class cargarImagenes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<cargarImagenes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cargarImagenes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cargarImagenes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cargarImagenes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cargarImagenes_resultTupleScheme getScheme() {
        return new cargarImagenes_resultTupleScheme();
      }
    }

    private static class cargarImagenes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<cargarImagenes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cargarImagenes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cargarImagenes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getImagenes_args implements org.apache.thrift.TBase<getImagenes_args, getImagenes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getImagenes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getImagenes_args");

    private static final org.apache.thrift.protocol.TField IDREPORTE_FIELD_DESC = new org.apache.thrift.protocol.TField("idreporte", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getImagenes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getImagenes_argsTupleSchemeFactory();

    public int idreporte; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDREPORTE((short)1, "idreporte");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDREPORTE
            return IDREPORTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDREPORTE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDREPORTE, new org.apache.thrift.meta_data.FieldMetaData("idreporte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getImagenes_args.class, metaDataMap);
    }

    public getImagenes_args() {
    }

    public getImagenes_args(
      int idreporte)
    {
      this();
      this.idreporte = idreporte;
      setIdreporteIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getImagenes_args(getImagenes_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idreporte = other.idreporte;
    }

    public getImagenes_args deepCopy() {
      return new getImagenes_args(this);
    }

    @Override
    public void clear() {
      setIdreporteIsSet(false);
      this.idreporte = 0;
    }

    public int getIdreporte() {
      return this.idreporte;
    }

    public getImagenes_args setIdreporte(int idreporte) {
      this.idreporte = idreporte;
      setIdreporteIsSet(true);
      return this;
    }

    public void unsetIdreporte() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDREPORTE_ISSET_ID);
    }

    /** Returns true if field idreporte is set (has been assigned a value) and false otherwise */
    public boolean isSetIdreporte() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDREPORTE_ISSET_ID);
    }

    public void setIdreporteIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDREPORTE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case IDREPORTE:
        if (value == null) {
          unsetIdreporte();
        } else {
          setIdreporte((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IDREPORTE:
        return getIdreporte();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IDREPORTE:
        return isSetIdreporte();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getImagenes_args)
        return this.equals((getImagenes_args)that);
      return false;
    }

    public boolean equals(getImagenes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_idreporte = true;
      boolean that_present_idreporte = true;
      if (this_present_idreporte || that_present_idreporte) {
        if (!(this_present_idreporte && that_present_idreporte))
          return false;
        if (this.idreporte != that.idreporte)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + idreporte;

      return hashCode;
    }

    @Override
    public int compareTo(getImagenes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIdreporte()).compareTo(other.isSetIdreporte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdreporte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idreporte, other.idreporte);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getImagenes_args(");
      boolean first = true;

      sb.append("idreporte:");
      sb.append(this.idreporte);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getImagenes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImagenes_argsStandardScheme getScheme() {
        return new getImagenes_argsStandardScheme();
      }
    }

    private static class getImagenes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getImagenes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getImagenes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDREPORTE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idreporte = iprot.readI32();
                struct.setIdreporteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getImagenes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(IDREPORTE_FIELD_DESC);
        oprot.writeI32(struct.idreporte);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getImagenes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImagenes_argsTupleScheme getScheme() {
        return new getImagenes_argsTupleScheme();
      }
    }

    private static class getImagenes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getImagenes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getImagenes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIdreporte()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdreporte()) {
          oprot.writeI32(struct.idreporte);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getImagenes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idreporte = iprot.readI32();
          struct.setIdreporteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getImagenes_result implements org.apache.thrift.TBase<getImagenes_result, getImagenes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getImagenes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getImagenes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EBD_FIELD_DESC = new org.apache.thrift.protocol.TField("ebd", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getImagenes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getImagenes_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> success; // required
    public @org.apache.thrift.annotation.Nullable ErrorBD ebd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EBD((short)1, "ebd");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EBD
            return EBD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      tmpMap.put(_Fields.EBD, new org.apache.thrift.meta_data.FieldMetaData("ebd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorBD.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getImagenes_result.class, metaDataMap);
    }

    public getImagenes_result() {
    }

    public getImagenes_result(
      java.util.List<java.nio.ByteBuffer> success,
      ErrorBD ebd)
    {
      this();
      this.success = success;
      this.ebd = ebd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getImagenes_result(getImagenes_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.nio.ByteBuffer> __this__success = new java.util.ArrayList<java.nio.ByteBuffer>(other.success);
        this.success = __this__success;
      }
      if (other.isSetEbd()) {
        this.ebd = new ErrorBD(other.ebd);
      }
    }

    public getImagenes_result deepCopy() {
      return new getImagenes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ebd = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.nio.ByteBuffer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.nio.ByteBuffer elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.nio.ByteBuffer>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.nio.ByteBuffer> getSuccess() {
      return this.success;
    }

    public getImagenes_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ErrorBD getEbd() {
      return this.ebd;
    }

    public getImagenes_result setEbd(@org.apache.thrift.annotation.Nullable ErrorBD ebd) {
      this.ebd = ebd;
      return this;
    }

    public void unsetEbd() {
      this.ebd = null;
    }

    /** Returns true if field ebd is set (has been assigned a value) and false otherwise */
    public boolean isSetEbd() {
      return this.ebd != null;
    }

    public void setEbdIsSet(boolean value) {
      if (!value) {
        this.ebd = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.nio.ByteBuffer>)value);
        }
        break;

      case EBD:
        if (value == null) {
          unsetEbd();
        } else {
          setEbd((ErrorBD)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EBD:
        return getEbd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EBD:
        return isSetEbd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getImagenes_result)
        return this.equals((getImagenes_result)that);
      return false;
    }

    public boolean equals(getImagenes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ebd = true && this.isSetEbd();
      boolean that_present_ebd = true && that.isSetEbd();
      if (this_present_ebd || that_present_ebd) {
        if (!(this_present_ebd && that_present_ebd))
          return false;
        if (!this.ebd.equals(that.ebd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEbd()) ? 131071 : 524287);
      if (isSetEbd())
        hashCode = hashCode * 8191 + ebd.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getImagenes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEbd()).compareTo(other.isSetEbd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEbd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ebd, other.ebd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getImagenes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ebd:");
      if (this.ebd == null) {
        sb.append("null");
      } else {
        sb.append(this.ebd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getImagenes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImagenes_resultStandardScheme getScheme() {
        return new getImagenes_resultStandardScheme();
      }
    }

    private static class getImagenes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getImagenes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getImagenes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.nio.ByteBuffer>(_list48.size);
                  @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = iprot.readBinary();
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EBD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ebd = new ErrorBD();
                struct.ebd.read(iprot);
                struct.setEbdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getImagenes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.nio.ByteBuffer _iter51 : struct.success)
            {
              oprot.writeBinary(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ebd != null) {
          oprot.writeFieldBegin(EBD_FIELD_DESC);
          struct.ebd.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getImagenes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImagenes_resultTupleScheme getScheme() {
        return new getImagenes_resultTupleScheme();
      }
    }

    private static class getImagenes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getImagenes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getImagenes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEbd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.nio.ByteBuffer _iter52 : struct.success)
            {
              oprot.writeBinary(_iter52);
            }
          }
        }
        if (struct.isSetEbd()) {
          struct.ebd.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getImagenes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.nio.ByteBuffer>(_list53.size);
            @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = iprot.readBinary();
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ebd = new ErrorBD();
          struct.ebd.read(iprot);
          struct.setEbdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
