#include <iostream>
#include <stdlib.h>
#include "ApiFuncionario.h"
#include "ConexionesDB.cpp"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <cstring>
#include <QDebug>
#include <QString>


using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace std;

using boost::shared_ptr;

using namespace  ::Thrift;

class ApiFuncionarioHandler : virtual public ApiFuncionarioIf {
    ConexionesDB conexiones;
public:
    ApiFuncionarioHandler() {
        qDebug() << "Servidor iniciado";
}

  bool verificarFuncionario(const std::string& usuario, const std::string& contrasena) {
      list<FuncionarioDB> resultado = conexiones.getFuncionario(QString::fromStdString(usuario));
      if(resultado.size() > 0){
         if(contrasena == resultado.front().contrasena.toStdString()){
             return true;
         }else{
           return false;
         }
      }else{
          return false;
      }
  }

  void getFuncionario(Funcionario& _return, const std::string& usuario) {
      list<FuncionarioDB> resultado = conexiones.getFuncionario(QString::fromStdString(usuario));
      Funcionario funcionario;
      funcionario.__set_cargo(resultado.front().cargo.toStdString());
      funcionario.__set_nombre(resultado.front().nombre.toStdString());
      funcionario.__set_estatus(resultado.front().estatus);
      funcionario.__set_usuario(resultado.front().usuario.toStdString());

      _return = funcionario;
  }

  void getFuncionarios(std::vector<Funcionario> & _return) {
    // Your implementation goes here
    printf("getFuncionarios\n");
  }

  bool cambiarEstatusFuncionario(const std::string& usuario) {
    return conexiones.cambiarEstatusFuncionario(QString::fromStdString(usuario));
  }

  bool modificarPerito(const Funcionario& peritoAnterior, const Funcionario& peritoNuevo) {
      FuncionarioDB peritoDbNuevo;
      FuncionarioDB peritoDbAnterior;
      peritoDbAnterior.nombre = QString::fromStdString(peritoAnterior.nombre);
      peritoDbAnterior.usuario = QString::fromStdString(peritoAnterior.usuario);

      peritoDbNuevo.nombre = QString::fromStdString(peritoNuevo.nombre);
      peritoDbNuevo.usuario = QString::fromStdString(peritoNuevo.usuario);
      return conexiones.modificarPerito(peritoDbAnterior, peritoDbNuevo);
  }

  bool cambiarContrasenaPerito(const std::string& usuario, const std::string& contrasena) {
    return conexiones.cambiarContrasena(QString::fromStdString(usuario), QString::fromStdString(contrasena));
  }

  bool registrarPerito(const Funcionario& perito) {
      FuncionarioDB peritodb;
      peritodb.cargo = QString::fromStdString(perito.cargo);
      peritodb.contrasena = QString::fromStdString(perito.contrasena);
      peritodb.nombre = QString::fromStdString(perito.nombre);
      peritodb.estatus = perito.estatus;
      peritodb.usuario = QString::fromStdString(perito.usuario);
      return conexiones.registrarPerito(peritodb);
  }

  void getPerito(Funcionario& _return, const std::string& usuario) {
    // Your implementation goes here
    printf("getPerito\n");
  }

  void getPeritos(std::vector<Funcionario> & _return) {
      vector<FuncionarioDB> resultado = conexiones.getPeritos();
      vector<Funcionario> respuesta;
      Funcionario funcionario;

      for (int i=0; i < resultado.size() ;i++) {
          funcionario.__set_nombre(resultado[i].nombre.toStdString());
          funcionario.__set_cargo(resultado[i].cargo.toStdString());
          funcionario.__set_nombre(resultado[i].nombre.toStdString());
          funcionario.__set_estatus(resultado[i].estatus);
          funcionario.__set_usuario(resultado[i].usuario.toStdString());
          respuesta.push_back(funcionario);
      }

      _return = respuesta;
  }

  int32_t getIdPerito(const std::string& usuario) {
    return conexiones.getIdFuncionario(QString::fromStdString(usuario));
  }

  void getReportesPendientes(std::vector<Reporte> & _return) {
      vector<ReporteDB> resultado = conexiones.getReportesPendientes();
      vector<Reporte> respuesta;


      for (int i=0; i < resultado.size() ;i++) {
          Reporte reporte;
          reporte.__set_latitud(resultado[i].latitud.toStdString());
          reporte.__set_longitud(resultado[i].longitud.toStdString());
          reporte.__set_nombreOtroConduc(resultado[i].nombreOtroConduc.toStdString());
          reporte.__set_nombreConductor(resultado[i].nombreConductor.toStdString());
          reporte.__set_idreporte(resultado[i].idreporte);


          respuesta.push_back(reporte);
      }

      _return = respuesta;
  }

  void getReportesAsignados(std::vector<Reporte> & _return, const int32_t idPerito) {
      vector<ReporteDB> resultado = conexiones.getReportesAsignados(idPerito);
      vector<Reporte> respuesta;


      for (int i=0; i < resultado.size() ;i++) {
          Reporte reporte;
          reporte.__set_latitud(resultado[i].latitud.toStdString());
          reporte.__set_longitud(resultado[i].longitud.toStdString());
          reporte.__set_nombreOtroConduc(resultado[i].nombreOtroConduc.toStdString());
          reporte.__set_nombreConductor(resultado[i].nombreConductor.toStdString());
          reporte.__set_idreporte(resultado[i].idreporte);
          reporte.__set_dictamen(resultado[i].dictamen);
          respuesta.push_back(reporte);
      }

      _return = respuesta;
  }

  bool asignarReportePerito(const int32_t idPerito, const int32_t idReporte) {
      qDebug() << idPerito << " " << idReporte;
      return conexiones.asignarReportePerito(idPerito, idReporte);
  }

  void getReporte(Reporte& _return, const int32_t idReporte) {
      ReporteDB resultado = conexiones.getReporte(idReporte);
      Reporte reporte;
      reporte.__set_latitud(resultado.latitud.toStdString());
      reporte.__set_longitud(resultado.longitud.toStdString());
      reporte.__set_nombreOtroConduc(resultado.nombreOtroConduc.toStdString());
      reporte.__set_nombreConductor(resultado.nombreConductor.toStdString());
      reporte.__set_idreporte(resultado.idreporte);
      reporte.__set_dictamen(resultado.dictamen);
      _return = reporte;
  }

  bool levantarDictamen(const Dictamen& dictamen) {
      DictamenDB dictamenDB;

      dictamenDB.fecha = QString::fromStdString(dictamen.fecha);
      dictamenDB.dictamen = QString::fromStdString(dictamen.dictamen);
      dictamenDB.idfuncionario = dictamen.idfuncionario;
      dictamenDB.idreporte = dictamen.idreporte;
      return conexiones.registrarDictamen(dictamenDB);
  }

  void getDictamen(Dictamen& _return, const int32_t idReporte) {
    DictamenDB dictamen = conexiones.getDictamen(idReporte);
    Dictamen respuesta;

    respuesta.__set_fecha(dictamen.fecha.toStdString());
    respuesta.__set_dictamen(dictamen.dictamen.toStdString());
    respuesta.__set_idfuncionario(dictamen.idfuncionario);
    respuesta.__set_idreporte((dictamen.idreporte));

    _return = respuesta;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<ApiFuncionarioHandler> handler(new ApiFuncionarioHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new ApiFuncionarioProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

