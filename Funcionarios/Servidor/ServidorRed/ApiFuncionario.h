/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ApiFuncionario_H
#define ApiFuncionario_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ApiFuncionario_types.h"

namespace Thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ApiFuncionarioIf {
 public:
  virtual ~ApiFuncionarioIf() {}
  virtual bool verificarFuncionario(const std::string& usuario, const std::string& contrasena) = 0;
  virtual void getFuncionario(Funcionario& _return, const std::string& usuario) = 0;
  virtual void getFuncionarios(std::vector<Funcionario> & _return) = 0;
  virtual bool cambiarEstatusFuncionario(const std::string& usuario) = 0;
  virtual bool modificarPerito(const Funcionario& peritoAnterior, const Funcionario& peritoNuevo) = 0;
  virtual bool cambiarContrasenaPerito(const std::string& usuario, const std::string& contrasena) = 0;
  virtual bool registrarPerito(const Funcionario& perito) = 0;
  virtual void getPerito(Funcionario& _return, const std::string& usuario) = 0;
  virtual void getPeritos(std::vector<Funcionario> & _return) = 0;
  virtual int32_t getIdPerito(const std::string& usuario) = 0;
  virtual void getReportesPendientes(std::vector<Reporte> & _return) = 0;
  virtual void getReportesAsignados(std::vector<Reporte> & _return, const int32_t idPerito) = 0;
  virtual bool asignarReportePerito(const int32_t idPerito, const int32_t idReporte) = 0;
  virtual void getReporte(Reporte& _return, const int32_t idReporte) = 0;
  virtual bool levantarDictamen(const Dictamen& dictamen) = 0;
  virtual void getDictamen(Dictamen& _return, const int32_t idReporte) = 0;
  virtual void getPlacasVehiculosReporte(std::vector<VehiculosReporte> & _return) = 0;
  virtual bool cargarImagenes(const std::vector<std::string> & listaImagenes, const int32_t idreporte) = 0;
  virtual void getImagenes(std::vector<std::string> & _return, const int32_t idreporte) = 0;
};

class ApiFuncionarioIfFactory {
 public:
  typedef ApiFuncionarioIf Handler;

  virtual ~ApiFuncionarioIfFactory() {}

  virtual ApiFuncionarioIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ApiFuncionarioIf* /* handler */) = 0;
};

class ApiFuncionarioIfSingletonFactory : virtual public ApiFuncionarioIfFactory {
 public:
  ApiFuncionarioIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ApiFuncionarioIf>& iface) : iface_(iface) {}
  virtual ~ApiFuncionarioIfSingletonFactory() {}

  virtual ApiFuncionarioIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ApiFuncionarioIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ApiFuncionarioIf> iface_;
};

class ApiFuncionarioNull : virtual public ApiFuncionarioIf {
 public:
  virtual ~ApiFuncionarioNull() {}
  bool verificarFuncionario(const std::string& /* usuario */, const std::string& /* contrasena */) {
    bool _return = false;
    return _return;
  }
  void getFuncionario(Funcionario& /* _return */, const std::string& /* usuario */) {
    return;
  }
  void getFuncionarios(std::vector<Funcionario> & /* _return */) {
    return;
  }
  bool cambiarEstatusFuncionario(const std::string& /* usuario */) {
    bool _return = false;
    return _return;
  }
  bool modificarPerito(const Funcionario& /* peritoAnterior */, const Funcionario& /* peritoNuevo */) {
    bool _return = false;
    return _return;
  }
  bool cambiarContrasenaPerito(const std::string& /* usuario */, const std::string& /* contrasena */) {
    bool _return = false;
    return _return;
  }
  bool registrarPerito(const Funcionario& /* perito */) {
    bool _return = false;
    return _return;
  }
  void getPerito(Funcionario& /* _return */, const std::string& /* usuario */) {
    return;
  }
  void getPeritos(std::vector<Funcionario> & /* _return */) {
    return;
  }
  int32_t getIdPerito(const std::string& /* usuario */) {
    int32_t _return = 0;
    return _return;
  }
  void getReportesPendientes(std::vector<Reporte> & /* _return */) {
    return;
  }
  void getReportesAsignados(std::vector<Reporte> & /* _return */, const int32_t /* idPerito */) {
    return;
  }
  bool asignarReportePerito(const int32_t /* idPerito */, const int32_t /* idReporte */) {
    bool _return = false;
    return _return;
  }
  void getReporte(Reporte& /* _return */, const int32_t /* idReporte */) {
    return;
  }
  bool levantarDictamen(const Dictamen& /* dictamen */) {
    bool _return = false;
    return _return;
  }
  void getDictamen(Dictamen& /* _return */, const int32_t /* idReporte */) {
    return;
  }
  void getPlacasVehiculosReporte(std::vector<VehiculosReporte> & /* _return */) {
    return;
  }
  bool cargarImagenes(const std::vector<std::string> & /* listaImagenes */, const int32_t /* idreporte */) {
    bool _return = false;
    return _return;
  }
  void getImagenes(std::vector<std::string> & /* _return */, const int32_t /* idreporte */) {
    return;
  }
};

typedef struct _ApiFuncionario_verificarFuncionario_args__isset {
  _ApiFuncionario_verificarFuncionario_args__isset() : usuario(false), contrasena(false) {}
  bool usuario :1;
  bool contrasena :1;
} _ApiFuncionario_verificarFuncionario_args__isset;

class ApiFuncionario_verificarFuncionario_args {
 public:

  ApiFuncionario_verificarFuncionario_args(const ApiFuncionario_verificarFuncionario_args&);
  ApiFuncionario_verificarFuncionario_args& operator=(const ApiFuncionario_verificarFuncionario_args&);
  ApiFuncionario_verificarFuncionario_args() : usuario(), contrasena() {
  }

  virtual ~ApiFuncionario_verificarFuncionario_args() throw();
  std::string usuario;
  std::string contrasena;

  _ApiFuncionario_verificarFuncionario_args__isset __isset;

  void __set_usuario(const std::string& val);

  void __set_contrasena(const std::string& val);

  bool operator == (const ApiFuncionario_verificarFuncionario_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    if (!(contrasena == rhs.contrasena))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_verificarFuncionario_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_verificarFuncionario_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_verificarFuncionario_pargs {
 public:


  virtual ~ApiFuncionario_verificarFuncionario_pargs() throw();
  const std::string* usuario;
  const std::string* contrasena;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_verificarFuncionario_result__isset {
  _ApiFuncionario_verificarFuncionario_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_verificarFuncionario_result__isset;

class ApiFuncionario_verificarFuncionario_result {
 public:

  ApiFuncionario_verificarFuncionario_result(const ApiFuncionario_verificarFuncionario_result&);
  ApiFuncionario_verificarFuncionario_result& operator=(const ApiFuncionario_verificarFuncionario_result&);
  ApiFuncionario_verificarFuncionario_result() : success(0) {
  }

  virtual ~ApiFuncionario_verificarFuncionario_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiFuncionario_verificarFuncionario_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_verificarFuncionario_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_verificarFuncionario_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_verificarFuncionario_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_verificarFuncionario_presult__isset {
  _ApiFuncionario_verificarFuncionario_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_verificarFuncionario_presult__isset;

class ApiFuncionario_verificarFuncionario_presult {
 public:


  virtual ~ApiFuncionario_verificarFuncionario_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiFuncionario_verificarFuncionario_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiFuncionario_getFuncionario_args__isset {
  _ApiFuncionario_getFuncionario_args__isset() : usuario(false) {}
  bool usuario :1;
} _ApiFuncionario_getFuncionario_args__isset;

class ApiFuncionario_getFuncionario_args {
 public:

  ApiFuncionario_getFuncionario_args(const ApiFuncionario_getFuncionario_args&);
  ApiFuncionario_getFuncionario_args& operator=(const ApiFuncionario_getFuncionario_args&);
  ApiFuncionario_getFuncionario_args() : usuario() {
  }

  virtual ~ApiFuncionario_getFuncionario_args() throw();
  std::string usuario;

  _ApiFuncionario_getFuncionario_args__isset __isset;

  void __set_usuario(const std::string& val);

  bool operator == (const ApiFuncionario_getFuncionario_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getFuncionario_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getFuncionario_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_getFuncionario_pargs {
 public:


  virtual ~ApiFuncionario_getFuncionario_pargs() throw();
  const std::string* usuario;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getFuncionario_result__isset {
  _ApiFuncionario_getFuncionario_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getFuncionario_result__isset;

class ApiFuncionario_getFuncionario_result {
 public:

  ApiFuncionario_getFuncionario_result(const ApiFuncionario_getFuncionario_result&);
  ApiFuncionario_getFuncionario_result& operator=(const ApiFuncionario_getFuncionario_result&);
  ApiFuncionario_getFuncionario_result() {
  }

  virtual ~ApiFuncionario_getFuncionario_result() throw();
  Funcionario success;
  ErrorBD ebd;

  _ApiFuncionario_getFuncionario_result__isset __isset;

  void __set_success(const Funcionario& val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_getFuncionario_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getFuncionario_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getFuncionario_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getFuncionario_presult__isset {
  _ApiFuncionario_getFuncionario_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getFuncionario_presult__isset;

class ApiFuncionario_getFuncionario_presult {
 public:


  virtual ~ApiFuncionario_getFuncionario_presult() throw();
  Funcionario* success;
  ErrorBD ebd;

  _ApiFuncionario_getFuncionario_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApiFuncionario_getFuncionarios_args {
 public:

  ApiFuncionario_getFuncionarios_args(const ApiFuncionario_getFuncionarios_args&);
  ApiFuncionario_getFuncionarios_args& operator=(const ApiFuncionario_getFuncionarios_args&);
  ApiFuncionario_getFuncionarios_args() {
  }

  virtual ~ApiFuncionario_getFuncionarios_args() throw();

  bool operator == (const ApiFuncionario_getFuncionarios_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ApiFuncionario_getFuncionarios_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getFuncionarios_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_getFuncionarios_pargs {
 public:


  virtual ~ApiFuncionario_getFuncionarios_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getFuncionarios_result__isset {
  _ApiFuncionario_getFuncionarios_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getFuncionarios_result__isset;

class ApiFuncionario_getFuncionarios_result {
 public:

  ApiFuncionario_getFuncionarios_result(const ApiFuncionario_getFuncionarios_result&);
  ApiFuncionario_getFuncionarios_result& operator=(const ApiFuncionario_getFuncionarios_result&);
  ApiFuncionario_getFuncionarios_result() {
  }

  virtual ~ApiFuncionario_getFuncionarios_result() throw();
  std::vector<Funcionario>  success;
  ErrorBD ebd;

  _ApiFuncionario_getFuncionarios_result__isset __isset;

  void __set_success(const std::vector<Funcionario> & val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_getFuncionarios_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getFuncionarios_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getFuncionarios_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getFuncionarios_presult__isset {
  _ApiFuncionario_getFuncionarios_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getFuncionarios_presult__isset;

class ApiFuncionario_getFuncionarios_presult {
 public:


  virtual ~ApiFuncionario_getFuncionarios_presult() throw();
  std::vector<Funcionario> * success;
  ErrorBD ebd;

  _ApiFuncionario_getFuncionarios_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiFuncionario_cambiarEstatusFuncionario_args__isset {
  _ApiFuncionario_cambiarEstatusFuncionario_args__isset() : usuario(false) {}
  bool usuario :1;
} _ApiFuncionario_cambiarEstatusFuncionario_args__isset;

class ApiFuncionario_cambiarEstatusFuncionario_args {
 public:

  ApiFuncionario_cambiarEstatusFuncionario_args(const ApiFuncionario_cambiarEstatusFuncionario_args&);
  ApiFuncionario_cambiarEstatusFuncionario_args& operator=(const ApiFuncionario_cambiarEstatusFuncionario_args&);
  ApiFuncionario_cambiarEstatusFuncionario_args() : usuario() {
  }

  virtual ~ApiFuncionario_cambiarEstatusFuncionario_args() throw();
  std::string usuario;

  _ApiFuncionario_cambiarEstatusFuncionario_args__isset __isset;

  void __set_usuario(const std::string& val);

  bool operator == (const ApiFuncionario_cambiarEstatusFuncionario_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_cambiarEstatusFuncionario_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_cambiarEstatusFuncionario_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_cambiarEstatusFuncionario_pargs {
 public:


  virtual ~ApiFuncionario_cambiarEstatusFuncionario_pargs() throw();
  const std::string* usuario;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_cambiarEstatusFuncionario_result__isset {
  _ApiFuncionario_cambiarEstatusFuncionario_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_cambiarEstatusFuncionario_result__isset;

class ApiFuncionario_cambiarEstatusFuncionario_result {
 public:

  ApiFuncionario_cambiarEstatusFuncionario_result(const ApiFuncionario_cambiarEstatusFuncionario_result&);
  ApiFuncionario_cambiarEstatusFuncionario_result& operator=(const ApiFuncionario_cambiarEstatusFuncionario_result&);
  ApiFuncionario_cambiarEstatusFuncionario_result() : success(0) {
  }

  virtual ~ApiFuncionario_cambiarEstatusFuncionario_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiFuncionario_cambiarEstatusFuncionario_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_cambiarEstatusFuncionario_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_cambiarEstatusFuncionario_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_cambiarEstatusFuncionario_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_cambiarEstatusFuncionario_presult__isset {
  _ApiFuncionario_cambiarEstatusFuncionario_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_cambiarEstatusFuncionario_presult__isset;

class ApiFuncionario_cambiarEstatusFuncionario_presult {
 public:


  virtual ~ApiFuncionario_cambiarEstatusFuncionario_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiFuncionario_cambiarEstatusFuncionario_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiFuncionario_modificarPerito_args__isset {
  _ApiFuncionario_modificarPerito_args__isset() : peritoAnterior(false), peritoNuevo(false) {}
  bool peritoAnterior :1;
  bool peritoNuevo :1;
} _ApiFuncionario_modificarPerito_args__isset;

class ApiFuncionario_modificarPerito_args {
 public:

  ApiFuncionario_modificarPerito_args(const ApiFuncionario_modificarPerito_args&);
  ApiFuncionario_modificarPerito_args& operator=(const ApiFuncionario_modificarPerito_args&);
  ApiFuncionario_modificarPerito_args() {
  }

  virtual ~ApiFuncionario_modificarPerito_args() throw();
  Funcionario peritoAnterior;
  Funcionario peritoNuevo;

  _ApiFuncionario_modificarPerito_args__isset __isset;

  void __set_peritoAnterior(const Funcionario& val);

  void __set_peritoNuevo(const Funcionario& val);

  bool operator == (const ApiFuncionario_modificarPerito_args & rhs) const
  {
    if (!(peritoAnterior == rhs.peritoAnterior))
      return false;
    if (!(peritoNuevo == rhs.peritoNuevo))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_modificarPerito_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_modificarPerito_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_modificarPerito_pargs {
 public:


  virtual ~ApiFuncionario_modificarPerito_pargs() throw();
  const Funcionario* peritoAnterior;
  const Funcionario* peritoNuevo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_modificarPerito_result__isset {
  _ApiFuncionario_modificarPerito_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_modificarPerito_result__isset;

class ApiFuncionario_modificarPerito_result {
 public:

  ApiFuncionario_modificarPerito_result(const ApiFuncionario_modificarPerito_result&);
  ApiFuncionario_modificarPerito_result& operator=(const ApiFuncionario_modificarPerito_result&);
  ApiFuncionario_modificarPerito_result() : success(0) {
  }

  virtual ~ApiFuncionario_modificarPerito_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiFuncionario_modificarPerito_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_modificarPerito_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_modificarPerito_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_modificarPerito_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_modificarPerito_presult__isset {
  _ApiFuncionario_modificarPerito_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_modificarPerito_presult__isset;

class ApiFuncionario_modificarPerito_presult {
 public:


  virtual ~ApiFuncionario_modificarPerito_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiFuncionario_modificarPerito_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiFuncionario_cambiarContrasenaPerito_args__isset {
  _ApiFuncionario_cambiarContrasenaPerito_args__isset() : usuario(false), contrasena(false) {}
  bool usuario :1;
  bool contrasena :1;
} _ApiFuncionario_cambiarContrasenaPerito_args__isset;

class ApiFuncionario_cambiarContrasenaPerito_args {
 public:

  ApiFuncionario_cambiarContrasenaPerito_args(const ApiFuncionario_cambiarContrasenaPerito_args&);
  ApiFuncionario_cambiarContrasenaPerito_args& operator=(const ApiFuncionario_cambiarContrasenaPerito_args&);
  ApiFuncionario_cambiarContrasenaPerito_args() : usuario(), contrasena() {
  }

  virtual ~ApiFuncionario_cambiarContrasenaPerito_args() throw();
  std::string usuario;
  std::string contrasena;

  _ApiFuncionario_cambiarContrasenaPerito_args__isset __isset;

  void __set_usuario(const std::string& val);

  void __set_contrasena(const std::string& val);

  bool operator == (const ApiFuncionario_cambiarContrasenaPerito_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    if (!(contrasena == rhs.contrasena))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_cambiarContrasenaPerito_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_cambiarContrasenaPerito_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_cambiarContrasenaPerito_pargs {
 public:


  virtual ~ApiFuncionario_cambiarContrasenaPerito_pargs() throw();
  const std::string* usuario;
  const std::string* contrasena;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_cambiarContrasenaPerito_result__isset {
  _ApiFuncionario_cambiarContrasenaPerito_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_cambiarContrasenaPerito_result__isset;

class ApiFuncionario_cambiarContrasenaPerito_result {
 public:

  ApiFuncionario_cambiarContrasenaPerito_result(const ApiFuncionario_cambiarContrasenaPerito_result&);
  ApiFuncionario_cambiarContrasenaPerito_result& operator=(const ApiFuncionario_cambiarContrasenaPerito_result&);
  ApiFuncionario_cambiarContrasenaPerito_result() : success(0) {
  }

  virtual ~ApiFuncionario_cambiarContrasenaPerito_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiFuncionario_cambiarContrasenaPerito_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_cambiarContrasenaPerito_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_cambiarContrasenaPerito_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_cambiarContrasenaPerito_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_cambiarContrasenaPerito_presult__isset {
  _ApiFuncionario_cambiarContrasenaPerito_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_cambiarContrasenaPerito_presult__isset;

class ApiFuncionario_cambiarContrasenaPerito_presult {
 public:


  virtual ~ApiFuncionario_cambiarContrasenaPerito_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiFuncionario_cambiarContrasenaPerito_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiFuncionario_registrarPerito_args__isset {
  _ApiFuncionario_registrarPerito_args__isset() : perito(false) {}
  bool perito :1;
} _ApiFuncionario_registrarPerito_args__isset;

class ApiFuncionario_registrarPerito_args {
 public:

  ApiFuncionario_registrarPerito_args(const ApiFuncionario_registrarPerito_args&);
  ApiFuncionario_registrarPerito_args& operator=(const ApiFuncionario_registrarPerito_args&);
  ApiFuncionario_registrarPerito_args() {
  }

  virtual ~ApiFuncionario_registrarPerito_args() throw();
  Funcionario perito;

  _ApiFuncionario_registrarPerito_args__isset __isset;

  void __set_perito(const Funcionario& val);

  bool operator == (const ApiFuncionario_registrarPerito_args & rhs) const
  {
    if (!(perito == rhs.perito))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_registrarPerito_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_registrarPerito_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_registrarPerito_pargs {
 public:


  virtual ~ApiFuncionario_registrarPerito_pargs() throw();
  const Funcionario* perito;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_registrarPerito_result__isset {
  _ApiFuncionario_registrarPerito_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_registrarPerito_result__isset;

class ApiFuncionario_registrarPerito_result {
 public:

  ApiFuncionario_registrarPerito_result(const ApiFuncionario_registrarPerito_result&);
  ApiFuncionario_registrarPerito_result& operator=(const ApiFuncionario_registrarPerito_result&);
  ApiFuncionario_registrarPerito_result() : success(0) {
  }

  virtual ~ApiFuncionario_registrarPerito_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiFuncionario_registrarPerito_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_registrarPerito_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_registrarPerito_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_registrarPerito_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_registrarPerito_presult__isset {
  _ApiFuncionario_registrarPerito_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_registrarPerito_presult__isset;

class ApiFuncionario_registrarPerito_presult {
 public:


  virtual ~ApiFuncionario_registrarPerito_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiFuncionario_registrarPerito_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiFuncionario_getPerito_args__isset {
  _ApiFuncionario_getPerito_args__isset() : usuario(false) {}
  bool usuario :1;
} _ApiFuncionario_getPerito_args__isset;

class ApiFuncionario_getPerito_args {
 public:

  ApiFuncionario_getPerito_args(const ApiFuncionario_getPerito_args&);
  ApiFuncionario_getPerito_args& operator=(const ApiFuncionario_getPerito_args&);
  ApiFuncionario_getPerito_args() : usuario() {
  }

  virtual ~ApiFuncionario_getPerito_args() throw();
  std::string usuario;

  _ApiFuncionario_getPerito_args__isset __isset;

  void __set_usuario(const std::string& val);

  bool operator == (const ApiFuncionario_getPerito_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getPerito_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getPerito_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_getPerito_pargs {
 public:


  virtual ~ApiFuncionario_getPerito_pargs() throw();
  const std::string* usuario;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getPerito_result__isset {
  _ApiFuncionario_getPerito_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getPerito_result__isset;

class ApiFuncionario_getPerito_result {
 public:

  ApiFuncionario_getPerito_result(const ApiFuncionario_getPerito_result&);
  ApiFuncionario_getPerito_result& operator=(const ApiFuncionario_getPerito_result&);
  ApiFuncionario_getPerito_result() {
  }

  virtual ~ApiFuncionario_getPerito_result() throw();
  Funcionario success;
  ErrorBD ebd;

  _ApiFuncionario_getPerito_result__isset __isset;

  void __set_success(const Funcionario& val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_getPerito_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getPerito_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getPerito_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getPerito_presult__isset {
  _ApiFuncionario_getPerito_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getPerito_presult__isset;

class ApiFuncionario_getPerito_presult {
 public:


  virtual ~ApiFuncionario_getPerito_presult() throw();
  Funcionario* success;
  ErrorBD ebd;

  _ApiFuncionario_getPerito_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApiFuncionario_getPeritos_args {
 public:

  ApiFuncionario_getPeritos_args(const ApiFuncionario_getPeritos_args&);
  ApiFuncionario_getPeritos_args& operator=(const ApiFuncionario_getPeritos_args&);
  ApiFuncionario_getPeritos_args() {
  }

  virtual ~ApiFuncionario_getPeritos_args() throw();

  bool operator == (const ApiFuncionario_getPeritos_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ApiFuncionario_getPeritos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getPeritos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_getPeritos_pargs {
 public:


  virtual ~ApiFuncionario_getPeritos_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getPeritos_result__isset {
  _ApiFuncionario_getPeritos_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getPeritos_result__isset;

class ApiFuncionario_getPeritos_result {
 public:

  ApiFuncionario_getPeritos_result(const ApiFuncionario_getPeritos_result&);
  ApiFuncionario_getPeritos_result& operator=(const ApiFuncionario_getPeritos_result&);
  ApiFuncionario_getPeritos_result() {
  }

  virtual ~ApiFuncionario_getPeritos_result() throw();
  std::vector<Funcionario>  success;
  ErrorBD ebd;

  _ApiFuncionario_getPeritos_result__isset __isset;

  void __set_success(const std::vector<Funcionario> & val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_getPeritos_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getPeritos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getPeritos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getPeritos_presult__isset {
  _ApiFuncionario_getPeritos_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getPeritos_presult__isset;

class ApiFuncionario_getPeritos_presult {
 public:


  virtual ~ApiFuncionario_getPeritos_presult() throw();
  std::vector<Funcionario> * success;
  ErrorBD ebd;

  _ApiFuncionario_getPeritos_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiFuncionario_getIdPerito_args__isset {
  _ApiFuncionario_getIdPerito_args__isset() : usuario(false) {}
  bool usuario :1;
} _ApiFuncionario_getIdPerito_args__isset;

class ApiFuncionario_getIdPerito_args {
 public:

  ApiFuncionario_getIdPerito_args(const ApiFuncionario_getIdPerito_args&);
  ApiFuncionario_getIdPerito_args& operator=(const ApiFuncionario_getIdPerito_args&);
  ApiFuncionario_getIdPerito_args() : usuario() {
  }

  virtual ~ApiFuncionario_getIdPerito_args() throw();
  std::string usuario;

  _ApiFuncionario_getIdPerito_args__isset __isset;

  void __set_usuario(const std::string& val);

  bool operator == (const ApiFuncionario_getIdPerito_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getIdPerito_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getIdPerito_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_getIdPerito_pargs {
 public:


  virtual ~ApiFuncionario_getIdPerito_pargs() throw();
  const std::string* usuario;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getIdPerito_result__isset {
  _ApiFuncionario_getIdPerito_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getIdPerito_result__isset;

class ApiFuncionario_getIdPerito_result {
 public:

  ApiFuncionario_getIdPerito_result(const ApiFuncionario_getIdPerito_result&);
  ApiFuncionario_getIdPerito_result& operator=(const ApiFuncionario_getIdPerito_result&);
  ApiFuncionario_getIdPerito_result() : success(0) {
  }

  virtual ~ApiFuncionario_getIdPerito_result() throw();
  int32_t success;
  ErrorBD ebd;

  _ApiFuncionario_getIdPerito_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_getIdPerito_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getIdPerito_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getIdPerito_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getIdPerito_presult__isset {
  _ApiFuncionario_getIdPerito_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getIdPerito_presult__isset;

class ApiFuncionario_getIdPerito_presult {
 public:


  virtual ~ApiFuncionario_getIdPerito_presult() throw();
  int32_t* success;
  ErrorBD ebd;

  _ApiFuncionario_getIdPerito_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApiFuncionario_getReportesPendientes_args {
 public:

  ApiFuncionario_getReportesPendientes_args(const ApiFuncionario_getReportesPendientes_args&);
  ApiFuncionario_getReportesPendientes_args& operator=(const ApiFuncionario_getReportesPendientes_args&);
  ApiFuncionario_getReportesPendientes_args() {
  }

  virtual ~ApiFuncionario_getReportesPendientes_args() throw();

  bool operator == (const ApiFuncionario_getReportesPendientes_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ApiFuncionario_getReportesPendientes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getReportesPendientes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_getReportesPendientes_pargs {
 public:


  virtual ~ApiFuncionario_getReportesPendientes_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getReportesPendientes_result__isset {
  _ApiFuncionario_getReportesPendientes_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getReportesPendientes_result__isset;

class ApiFuncionario_getReportesPendientes_result {
 public:

  ApiFuncionario_getReportesPendientes_result(const ApiFuncionario_getReportesPendientes_result&);
  ApiFuncionario_getReportesPendientes_result& operator=(const ApiFuncionario_getReportesPendientes_result&);
  ApiFuncionario_getReportesPendientes_result() {
  }

  virtual ~ApiFuncionario_getReportesPendientes_result() throw();
  std::vector<Reporte>  success;
  ErrorBD ebd;

  _ApiFuncionario_getReportesPendientes_result__isset __isset;

  void __set_success(const std::vector<Reporte> & val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_getReportesPendientes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getReportesPendientes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getReportesPendientes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getReportesPendientes_presult__isset {
  _ApiFuncionario_getReportesPendientes_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getReportesPendientes_presult__isset;

class ApiFuncionario_getReportesPendientes_presult {
 public:


  virtual ~ApiFuncionario_getReportesPendientes_presult() throw();
  std::vector<Reporte> * success;
  ErrorBD ebd;

  _ApiFuncionario_getReportesPendientes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiFuncionario_getReportesAsignados_args__isset {
  _ApiFuncionario_getReportesAsignados_args__isset() : idPerito(false) {}
  bool idPerito :1;
} _ApiFuncionario_getReportesAsignados_args__isset;

class ApiFuncionario_getReportesAsignados_args {
 public:

  ApiFuncionario_getReportesAsignados_args(const ApiFuncionario_getReportesAsignados_args&);
  ApiFuncionario_getReportesAsignados_args& operator=(const ApiFuncionario_getReportesAsignados_args&);
  ApiFuncionario_getReportesAsignados_args() : idPerito(0) {
  }

  virtual ~ApiFuncionario_getReportesAsignados_args() throw();
  int32_t idPerito;

  _ApiFuncionario_getReportesAsignados_args__isset __isset;

  void __set_idPerito(const int32_t val);

  bool operator == (const ApiFuncionario_getReportesAsignados_args & rhs) const
  {
    if (!(idPerito == rhs.idPerito))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getReportesAsignados_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getReportesAsignados_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_getReportesAsignados_pargs {
 public:


  virtual ~ApiFuncionario_getReportesAsignados_pargs() throw();
  const int32_t* idPerito;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getReportesAsignados_result__isset {
  _ApiFuncionario_getReportesAsignados_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getReportesAsignados_result__isset;

class ApiFuncionario_getReportesAsignados_result {
 public:

  ApiFuncionario_getReportesAsignados_result(const ApiFuncionario_getReportesAsignados_result&);
  ApiFuncionario_getReportesAsignados_result& operator=(const ApiFuncionario_getReportesAsignados_result&);
  ApiFuncionario_getReportesAsignados_result() {
  }

  virtual ~ApiFuncionario_getReportesAsignados_result() throw();
  std::vector<Reporte>  success;
  ErrorBD ebd;

  _ApiFuncionario_getReportesAsignados_result__isset __isset;

  void __set_success(const std::vector<Reporte> & val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_getReportesAsignados_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getReportesAsignados_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getReportesAsignados_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getReportesAsignados_presult__isset {
  _ApiFuncionario_getReportesAsignados_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getReportesAsignados_presult__isset;

class ApiFuncionario_getReportesAsignados_presult {
 public:


  virtual ~ApiFuncionario_getReportesAsignados_presult() throw();
  std::vector<Reporte> * success;
  ErrorBD ebd;

  _ApiFuncionario_getReportesAsignados_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiFuncionario_asignarReportePerito_args__isset {
  _ApiFuncionario_asignarReportePerito_args__isset() : idPerito(false), idReporte(false) {}
  bool idPerito :1;
  bool idReporte :1;
} _ApiFuncionario_asignarReportePerito_args__isset;

class ApiFuncionario_asignarReportePerito_args {
 public:

  ApiFuncionario_asignarReportePerito_args(const ApiFuncionario_asignarReportePerito_args&);
  ApiFuncionario_asignarReportePerito_args& operator=(const ApiFuncionario_asignarReportePerito_args&);
  ApiFuncionario_asignarReportePerito_args() : idPerito(0), idReporte(0) {
  }

  virtual ~ApiFuncionario_asignarReportePerito_args() throw();
  int32_t idPerito;
  int32_t idReporte;

  _ApiFuncionario_asignarReportePerito_args__isset __isset;

  void __set_idPerito(const int32_t val);

  void __set_idReporte(const int32_t val);

  bool operator == (const ApiFuncionario_asignarReportePerito_args & rhs) const
  {
    if (!(idPerito == rhs.idPerito))
      return false;
    if (!(idReporte == rhs.idReporte))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_asignarReportePerito_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_asignarReportePerito_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_asignarReportePerito_pargs {
 public:


  virtual ~ApiFuncionario_asignarReportePerito_pargs() throw();
  const int32_t* idPerito;
  const int32_t* idReporte;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_asignarReportePerito_result__isset {
  _ApiFuncionario_asignarReportePerito_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_asignarReportePerito_result__isset;

class ApiFuncionario_asignarReportePerito_result {
 public:

  ApiFuncionario_asignarReportePerito_result(const ApiFuncionario_asignarReportePerito_result&);
  ApiFuncionario_asignarReportePerito_result& operator=(const ApiFuncionario_asignarReportePerito_result&);
  ApiFuncionario_asignarReportePerito_result() : success(0) {
  }

  virtual ~ApiFuncionario_asignarReportePerito_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiFuncionario_asignarReportePerito_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_asignarReportePerito_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_asignarReportePerito_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_asignarReportePerito_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_asignarReportePerito_presult__isset {
  _ApiFuncionario_asignarReportePerito_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_asignarReportePerito_presult__isset;

class ApiFuncionario_asignarReportePerito_presult {
 public:


  virtual ~ApiFuncionario_asignarReportePerito_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiFuncionario_asignarReportePerito_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiFuncionario_getReporte_args__isset {
  _ApiFuncionario_getReporte_args__isset() : idReporte(false) {}
  bool idReporte :1;
} _ApiFuncionario_getReporte_args__isset;

class ApiFuncionario_getReporte_args {
 public:

  ApiFuncionario_getReporte_args(const ApiFuncionario_getReporte_args&);
  ApiFuncionario_getReporte_args& operator=(const ApiFuncionario_getReporte_args&);
  ApiFuncionario_getReporte_args() : idReporte(0) {
  }

  virtual ~ApiFuncionario_getReporte_args() throw();
  int32_t idReporte;

  _ApiFuncionario_getReporte_args__isset __isset;

  void __set_idReporte(const int32_t val);

  bool operator == (const ApiFuncionario_getReporte_args & rhs) const
  {
    if (!(idReporte == rhs.idReporte))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getReporte_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getReporte_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_getReporte_pargs {
 public:


  virtual ~ApiFuncionario_getReporte_pargs() throw();
  const int32_t* idReporte;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getReporte_result__isset {
  _ApiFuncionario_getReporte_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getReporte_result__isset;

class ApiFuncionario_getReporte_result {
 public:

  ApiFuncionario_getReporte_result(const ApiFuncionario_getReporte_result&);
  ApiFuncionario_getReporte_result& operator=(const ApiFuncionario_getReporte_result&);
  ApiFuncionario_getReporte_result() {
  }

  virtual ~ApiFuncionario_getReporte_result() throw();
  Reporte success;
  ErrorBD ebd;

  _ApiFuncionario_getReporte_result__isset __isset;

  void __set_success(const Reporte& val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_getReporte_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getReporte_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getReporte_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getReporte_presult__isset {
  _ApiFuncionario_getReporte_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getReporte_presult__isset;

class ApiFuncionario_getReporte_presult {
 public:


  virtual ~ApiFuncionario_getReporte_presult() throw();
  Reporte* success;
  ErrorBD ebd;

  _ApiFuncionario_getReporte_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiFuncionario_levantarDictamen_args__isset {
  _ApiFuncionario_levantarDictamen_args__isset() : dictamen(false) {}
  bool dictamen :1;
} _ApiFuncionario_levantarDictamen_args__isset;

class ApiFuncionario_levantarDictamen_args {
 public:

  ApiFuncionario_levantarDictamen_args(const ApiFuncionario_levantarDictamen_args&);
  ApiFuncionario_levantarDictamen_args& operator=(const ApiFuncionario_levantarDictamen_args&);
  ApiFuncionario_levantarDictamen_args() {
  }

  virtual ~ApiFuncionario_levantarDictamen_args() throw();
  Dictamen dictamen;

  _ApiFuncionario_levantarDictamen_args__isset __isset;

  void __set_dictamen(const Dictamen& val);

  bool operator == (const ApiFuncionario_levantarDictamen_args & rhs) const
  {
    if (!(dictamen == rhs.dictamen))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_levantarDictamen_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_levantarDictamen_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_levantarDictamen_pargs {
 public:


  virtual ~ApiFuncionario_levantarDictamen_pargs() throw();
  const Dictamen* dictamen;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_levantarDictamen_result__isset {
  _ApiFuncionario_levantarDictamen_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_levantarDictamen_result__isset;

class ApiFuncionario_levantarDictamen_result {
 public:

  ApiFuncionario_levantarDictamen_result(const ApiFuncionario_levantarDictamen_result&);
  ApiFuncionario_levantarDictamen_result& operator=(const ApiFuncionario_levantarDictamen_result&);
  ApiFuncionario_levantarDictamen_result() : success(0) {
  }

  virtual ~ApiFuncionario_levantarDictamen_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiFuncionario_levantarDictamen_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_levantarDictamen_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_levantarDictamen_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_levantarDictamen_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_levantarDictamen_presult__isset {
  _ApiFuncionario_levantarDictamen_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_levantarDictamen_presult__isset;

class ApiFuncionario_levantarDictamen_presult {
 public:


  virtual ~ApiFuncionario_levantarDictamen_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiFuncionario_levantarDictamen_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiFuncionario_getDictamen_args__isset {
  _ApiFuncionario_getDictamen_args__isset() : idReporte(false) {}
  bool idReporte :1;
} _ApiFuncionario_getDictamen_args__isset;

class ApiFuncionario_getDictamen_args {
 public:

  ApiFuncionario_getDictamen_args(const ApiFuncionario_getDictamen_args&);
  ApiFuncionario_getDictamen_args& operator=(const ApiFuncionario_getDictamen_args&);
  ApiFuncionario_getDictamen_args() : idReporte(0) {
  }

  virtual ~ApiFuncionario_getDictamen_args() throw();
  int32_t idReporte;

  _ApiFuncionario_getDictamen_args__isset __isset;

  void __set_idReporte(const int32_t val);

  bool operator == (const ApiFuncionario_getDictamen_args & rhs) const
  {
    if (!(idReporte == rhs.idReporte))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getDictamen_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getDictamen_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_getDictamen_pargs {
 public:


  virtual ~ApiFuncionario_getDictamen_pargs() throw();
  const int32_t* idReporte;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getDictamen_result__isset {
  _ApiFuncionario_getDictamen_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getDictamen_result__isset;

class ApiFuncionario_getDictamen_result {
 public:

  ApiFuncionario_getDictamen_result(const ApiFuncionario_getDictamen_result&);
  ApiFuncionario_getDictamen_result& operator=(const ApiFuncionario_getDictamen_result&);
  ApiFuncionario_getDictamen_result() {
  }

  virtual ~ApiFuncionario_getDictamen_result() throw();
  Dictamen success;
  ErrorBD ebd;

  _ApiFuncionario_getDictamen_result__isset __isset;

  void __set_success(const Dictamen& val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_getDictamen_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getDictamen_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getDictamen_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getDictamen_presult__isset {
  _ApiFuncionario_getDictamen_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getDictamen_presult__isset;

class ApiFuncionario_getDictamen_presult {
 public:


  virtual ~ApiFuncionario_getDictamen_presult() throw();
  Dictamen* success;
  ErrorBD ebd;

  _ApiFuncionario_getDictamen_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApiFuncionario_getPlacasVehiculosReporte_args {
 public:

  ApiFuncionario_getPlacasVehiculosReporte_args(const ApiFuncionario_getPlacasVehiculosReporte_args&);
  ApiFuncionario_getPlacasVehiculosReporte_args& operator=(const ApiFuncionario_getPlacasVehiculosReporte_args&);
  ApiFuncionario_getPlacasVehiculosReporte_args() {
  }

  virtual ~ApiFuncionario_getPlacasVehiculosReporte_args() throw();

  bool operator == (const ApiFuncionario_getPlacasVehiculosReporte_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ApiFuncionario_getPlacasVehiculosReporte_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getPlacasVehiculosReporte_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_getPlacasVehiculosReporte_pargs {
 public:


  virtual ~ApiFuncionario_getPlacasVehiculosReporte_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getPlacasVehiculosReporte_result__isset {
  _ApiFuncionario_getPlacasVehiculosReporte_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getPlacasVehiculosReporte_result__isset;

class ApiFuncionario_getPlacasVehiculosReporte_result {
 public:

  ApiFuncionario_getPlacasVehiculosReporte_result(const ApiFuncionario_getPlacasVehiculosReporte_result&);
  ApiFuncionario_getPlacasVehiculosReporte_result& operator=(const ApiFuncionario_getPlacasVehiculosReporte_result&);
  ApiFuncionario_getPlacasVehiculosReporte_result() {
  }

  virtual ~ApiFuncionario_getPlacasVehiculosReporte_result() throw();
  std::vector<VehiculosReporte>  success;
  ErrorBD ebd;

  _ApiFuncionario_getPlacasVehiculosReporte_result__isset __isset;

  void __set_success(const std::vector<VehiculosReporte> & val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_getPlacasVehiculosReporte_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getPlacasVehiculosReporte_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getPlacasVehiculosReporte_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getPlacasVehiculosReporte_presult__isset {
  _ApiFuncionario_getPlacasVehiculosReporte_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getPlacasVehiculosReporte_presult__isset;

class ApiFuncionario_getPlacasVehiculosReporte_presult {
 public:


  virtual ~ApiFuncionario_getPlacasVehiculosReporte_presult() throw();
  std::vector<VehiculosReporte> * success;
  ErrorBD ebd;

  _ApiFuncionario_getPlacasVehiculosReporte_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiFuncionario_cargarImagenes_args__isset {
  _ApiFuncionario_cargarImagenes_args__isset() : listaImagenes(false), idreporte(false) {}
  bool listaImagenes :1;
  bool idreporte :1;
} _ApiFuncionario_cargarImagenes_args__isset;

class ApiFuncionario_cargarImagenes_args {
 public:

  ApiFuncionario_cargarImagenes_args(const ApiFuncionario_cargarImagenes_args&);
  ApiFuncionario_cargarImagenes_args& operator=(const ApiFuncionario_cargarImagenes_args&);
  ApiFuncionario_cargarImagenes_args() : idreporte(0) {
  }

  virtual ~ApiFuncionario_cargarImagenes_args() throw();
  std::vector<std::string>  listaImagenes;
  int32_t idreporte;

  _ApiFuncionario_cargarImagenes_args__isset __isset;

  void __set_listaImagenes(const std::vector<std::string> & val);

  void __set_idreporte(const int32_t val);

  bool operator == (const ApiFuncionario_cargarImagenes_args & rhs) const
  {
    if (!(listaImagenes == rhs.listaImagenes))
      return false;
    if (!(idreporte == rhs.idreporte))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_cargarImagenes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_cargarImagenes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_cargarImagenes_pargs {
 public:


  virtual ~ApiFuncionario_cargarImagenes_pargs() throw();
  const std::vector<std::string> * listaImagenes;
  const int32_t* idreporte;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_cargarImagenes_result__isset {
  _ApiFuncionario_cargarImagenes_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_cargarImagenes_result__isset;

class ApiFuncionario_cargarImagenes_result {
 public:

  ApiFuncionario_cargarImagenes_result(const ApiFuncionario_cargarImagenes_result&);
  ApiFuncionario_cargarImagenes_result& operator=(const ApiFuncionario_cargarImagenes_result&);
  ApiFuncionario_cargarImagenes_result() : success(0) {
  }

  virtual ~ApiFuncionario_cargarImagenes_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiFuncionario_cargarImagenes_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_cargarImagenes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_cargarImagenes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_cargarImagenes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_cargarImagenes_presult__isset {
  _ApiFuncionario_cargarImagenes_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_cargarImagenes_presult__isset;

class ApiFuncionario_cargarImagenes_presult {
 public:


  virtual ~ApiFuncionario_cargarImagenes_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiFuncionario_cargarImagenes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiFuncionario_getImagenes_args__isset {
  _ApiFuncionario_getImagenes_args__isset() : idreporte(false) {}
  bool idreporte :1;
} _ApiFuncionario_getImagenes_args__isset;

class ApiFuncionario_getImagenes_args {
 public:

  ApiFuncionario_getImagenes_args(const ApiFuncionario_getImagenes_args&);
  ApiFuncionario_getImagenes_args& operator=(const ApiFuncionario_getImagenes_args&);
  ApiFuncionario_getImagenes_args() : idreporte(0) {
  }

  virtual ~ApiFuncionario_getImagenes_args() throw();
  int32_t idreporte;

  _ApiFuncionario_getImagenes_args__isset __isset;

  void __set_idreporte(const int32_t val);

  bool operator == (const ApiFuncionario_getImagenes_args & rhs) const
  {
    if (!(idreporte == rhs.idreporte))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getImagenes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getImagenes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiFuncionario_getImagenes_pargs {
 public:


  virtual ~ApiFuncionario_getImagenes_pargs() throw();
  const int32_t* idreporte;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getImagenes_result__isset {
  _ApiFuncionario_getImagenes_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getImagenes_result__isset;

class ApiFuncionario_getImagenes_result {
 public:

  ApiFuncionario_getImagenes_result(const ApiFuncionario_getImagenes_result&);
  ApiFuncionario_getImagenes_result& operator=(const ApiFuncionario_getImagenes_result&);
  ApiFuncionario_getImagenes_result() {
  }

  virtual ~ApiFuncionario_getImagenes_result() throw();
  std::vector<std::string>  success;
  ErrorBD ebd;

  _ApiFuncionario_getImagenes_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiFuncionario_getImagenes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiFuncionario_getImagenes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiFuncionario_getImagenes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiFuncionario_getImagenes_presult__isset {
  _ApiFuncionario_getImagenes_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiFuncionario_getImagenes_presult__isset;

class ApiFuncionario_getImagenes_presult {
 public:


  virtual ~ApiFuncionario_getImagenes_presult() throw();
  std::vector<std::string> * success;
  ErrorBD ebd;

  _ApiFuncionario_getImagenes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ApiFuncionarioClient : virtual public ApiFuncionarioIf {
 public:
  ApiFuncionarioClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ApiFuncionarioClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool verificarFuncionario(const std::string& usuario, const std::string& contrasena);
  void send_verificarFuncionario(const std::string& usuario, const std::string& contrasena);
  bool recv_verificarFuncionario();
  void getFuncionario(Funcionario& _return, const std::string& usuario);
  void send_getFuncionario(const std::string& usuario);
  void recv_getFuncionario(Funcionario& _return);
  void getFuncionarios(std::vector<Funcionario> & _return);
  void send_getFuncionarios();
  void recv_getFuncionarios(std::vector<Funcionario> & _return);
  bool cambiarEstatusFuncionario(const std::string& usuario);
  void send_cambiarEstatusFuncionario(const std::string& usuario);
  bool recv_cambiarEstatusFuncionario();
  bool modificarPerito(const Funcionario& peritoAnterior, const Funcionario& peritoNuevo);
  void send_modificarPerito(const Funcionario& peritoAnterior, const Funcionario& peritoNuevo);
  bool recv_modificarPerito();
  bool cambiarContrasenaPerito(const std::string& usuario, const std::string& contrasena);
  void send_cambiarContrasenaPerito(const std::string& usuario, const std::string& contrasena);
  bool recv_cambiarContrasenaPerito();
  bool registrarPerito(const Funcionario& perito);
  void send_registrarPerito(const Funcionario& perito);
  bool recv_registrarPerito();
  void getPerito(Funcionario& _return, const std::string& usuario);
  void send_getPerito(const std::string& usuario);
  void recv_getPerito(Funcionario& _return);
  void getPeritos(std::vector<Funcionario> & _return);
  void send_getPeritos();
  void recv_getPeritos(std::vector<Funcionario> & _return);
  int32_t getIdPerito(const std::string& usuario);
  void send_getIdPerito(const std::string& usuario);
  int32_t recv_getIdPerito();
  void getReportesPendientes(std::vector<Reporte> & _return);
  void send_getReportesPendientes();
  void recv_getReportesPendientes(std::vector<Reporte> & _return);
  void getReportesAsignados(std::vector<Reporte> & _return, const int32_t idPerito);
  void send_getReportesAsignados(const int32_t idPerito);
  void recv_getReportesAsignados(std::vector<Reporte> & _return);
  bool asignarReportePerito(const int32_t idPerito, const int32_t idReporte);
  void send_asignarReportePerito(const int32_t idPerito, const int32_t idReporte);
  bool recv_asignarReportePerito();
  void getReporte(Reporte& _return, const int32_t idReporte);
  void send_getReporte(const int32_t idReporte);
  void recv_getReporte(Reporte& _return);
  bool levantarDictamen(const Dictamen& dictamen);
  void send_levantarDictamen(const Dictamen& dictamen);
  bool recv_levantarDictamen();
  void getDictamen(Dictamen& _return, const int32_t idReporte);
  void send_getDictamen(const int32_t idReporte);
  void recv_getDictamen(Dictamen& _return);
  void getPlacasVehiculosReporte(std::vector<VehiculosReporte> & _return);
  void send_getPlacasVehiculosReporte();
  void recv_getPlacasVehiculosReporte(std::vector<VehiculosReporte> & _return);
  bool cargarImagenes(const std::vector<std::string> & listaImagenes, const int32_t idreporte);
  void send_cargarImagenes(const std::vector<std::string> & listaImagenes, const int32_t idreporte);
  bool recv_cargarImagenes();
  void getImagenes(std::vector<std::string> & _return, const int32_t idreporte);
  void send_getImagenes(const int32_t idreporte);
  void recv_getImagenes(std::vector<std::string> & _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ApiFuncionarioProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ApiFuncionarioIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ApiFuncionarioProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_verificarFuncionario(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFuncionario(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFuncionarios(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cambiarEstatusFuncionario(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modificarPerito(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cambiarContrasenaPerito(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registrarPerito(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPerito(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPeritos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getIdPerito(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getReportesPendientes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getReportesAsignados(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_asignarReportePerito(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getReporte(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_levantarDictamen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDictamen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPlacasVehiculosReporte(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cargarImagenes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getImagenes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ApiFuncionarioProcessor(::apache::thrift::stdcxx::shared_ptr<ApiFuncionarioIf> iface) :
    iface_(iface) {
    processMap_["verificarFuncionario"] = &ApiFuncionarioProcessor::process_verificarFuncionario;
    processMap_["getFuncionario"] = &ApiFuncionarioProcessor::process_getFuncionario;
    processMap_["getFuncionarios"] = &ApiFuncionarioProcessor::process_getFuncionarios;
    processMap_["cambiarEstatusFuncionario"] = &ApiFuncionarioProcessor::process_cambiarEstatusFuncionario;
    processMap_["modificarPerito"] = &ApiFuncionarioProcessor::process_modificarPerito;
    processMap_["cambiarContrasenaPerito"] = &ApiFuncionarioProcessor::process_cambiarContrasenaPerito;
    processMap_["registrarPerito"] = &ApiFuncionarioProcessor::process_registrarPerito;
    processMap_["getPerito"] = &ApiFuncionarioProcessor::process_getPerito;
    processMap_["getPeritos"] = &ApiFuncionarioProcessor::process_getPeritos;
    processMap_["getIdPerito"] = &ApiFuncionarioProcessor::process_getIdPerito;
    processMap_["getReportesPendientes"] = &ApiFuncionarioProcessor::process_getReportesPendientes;
    processMap_["getReportesAsignados"] = &ApiFuncionarioProcessor::process_getReportesAsignados;
    processMap_["asignarReportePerito"] = &ApiFuncionarioProcessor::process_asignarReportePerito;
    processMap_["getReporte"] = &ApiFuncionarioProcessor::process_getReporte;
    processMap_["levantarDictamen"] = &ApiFuncionarioProcessor::process_levantarDictamen;
    processMap_["getDictamen"] = &ApiFuncionarioProcessor::process_getDictamen;
    processMap_["getPlacasVehiculosReporte"] = &ApiFuncionarioProcessor::process_getPlacasVehiculosReporte;
    processMap_["cargarImagenes"] = &ApiFuncionarioProcessor::process_cargarImagenes;
    processMap_["getImagenes"] = &ApiFuncionarioProcessor::process_getImagenes;
  }

  virtual ~ApiFuncionarioProcessor() {}
};

class ApiFuncionarioProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ApiFuncionarioProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ApiFuncionarioIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ApiFuncionarioIfFactory > handlerFactory_;
};

class ApiFuncionarioMultiface : virtual public ApiFuncionarioIf {
 public:
  ApiFuncionarioMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ApiFuncionarioIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ApiFuncionarioMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ApiFuncionarioIf> > ifaces_;
  ApiFuncionarioMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ApiFuncionarioIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool verificarFuncionario(const std::string& usuario, const std::string& contrasena) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verificarFuncionario(usuario, contrasena);
    }
    return ifaces_[i]->verificarFuncionario(usuario, contrasena);
  }

  void getFuncionario(Funcionario& _return, const std::string& usuario) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFuncionario(_return, usuario);
    }
    ifaces_[i]->getFuncionario(_return, usuario);
    return;
  }

  void getFuncionarios(std::vector<Funcionario> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFuncionarios(_return);
    }
    ifaces_[i]->getFuncionarios(_return);
    return;
  }

  bool cambiarEstatusFuncionario(const std::string& usuario) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cambiarEstatusFuncionario(usuario);
    }
    return ifaces_[i]->cambiarEstatusFuncionario(usuario);
  }

  bool modificarPerito(const Funcionario& peritoAnterior, const Funcionario& peritoNuevo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modificarPerito(peritoAnterior, peritoNuevo);
    }
    return ifaces_[i]->modificarPerito(peritoAnterior, peritoNuevo);
  }

  bool cambiarContrasenaPerito(const std::string& usuario, const std::string& contrasena) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cambiarContrasenaPerito(usuario, contrasena);
    }
    return ifaces_[i]->cambiarContrasenaPerito(usuario, contrasena);
  }

  bool registrarPerito(const Funcionario& perito) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registrarPerito(perito);
    }
    return ifaces_[i]->registrarPerito(perito);
  }

  void getPerito(Funcionario& _return, const std::string& usuario) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPerito(_return, usuario);
    }
    ifaces_[i]->getPerito(_return, usuario);
    return;
  }

  void getPeritos(std::vector<Funcionario> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPeritos(_return);
    }
    ifaces_[i]->getPeritos(_return);
    return;
  }

  int32_t getIdPerito(const std::string& usuario) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getIdPerito(usuario);
    }
    return ifaces_[i]->getIdPerito(usuario);
  }

  void getReportesPendientes(std::vector<Reporte> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getReportesPendientes(_return);
    }
    ifaces_[i]->getReportesPendientes(_return);
    return;
  }

  void getReportesAsignados(std::vector<Reporte> & _return, const int32_t idPerito) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getReportesAsignados(_return, idPerito);
    }
    ifaces_[i]->getReportesAsignados(_return, idPerito);
    return;
  }

  bool asignarReportePerito(const int32_t idPerito, const int32_t idReporte) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->asignarReportePerito(idPerito, idReporte);
    }
    return ifaces_[i]->asignarReportePerito(idPerito, idReporte);
  }

  void getReporte(Reporte& _return, const int32_t idReporte) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getReporte(_return, idReporte);
    }
    ifaces_[i]->getReporte(_return, idReporte);
    return;
  }

  bool levantarDictamen(const Dictamen& dictamen) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->levantarDictamen(dictamen);
    }
    return ifaces_[i]->levantarDictamen(dictamen);
  }

  void getDictamen(Dictamen& _return, const int32_t idReporte) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDictamen(_return, idReporte);
    }
    ifaces_[i]->getDictamen(_return, idReporte);
    return;
  }

  void getPlacasVehiculosReporte(std::vector<VehiculosReporte> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPlacasVehiculosReporte(_return);
    }
    ifaces_[i]->getPlacasVehiculosReporte(_return);
    return;
  }

  bool cargarImagenes(const std::vector<std::string> & listaImagenes, const int32_t idreporte) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cargarImagenes(listaImagenes, idreporte);
    }
    return ifaces_[i]->cargarImagenes(listaImagenes, idreporte);
  }

  void getImagenes(std::vector<std::string> & _return, const int32_t idreporte) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getImagenes(_return, idreporte);
    }
    ifaces_[i]->getImagenes(_return, idreporte);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ApiFuncionarioConcurrentClient : virtual public ApiFuncionarioIf {
 public:
  ApiFuncionarioConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ApiFuncionarioConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool verificarFuncionario(const std::string& usuario, const std::string& contrasena);
  int32_t send_verificarFuncionario(const std::string& usuario, const std::string& contrasena);
  bool recv_verificarFuncionario(const int32_t seqid);
  void getFuncionario(Funcionario& _return, const std::string& usuario);
  int32_t send_getFuncionario(const std::string& usuario);
  void recv_getFuncionario(Funcionario& _return, const int32_t seqid);
  void getFuncionarios(std::vector<Funcionario> & _return);
  int32_t send_getFuncionarios();
  void recv_getFuncionarios(std::vector<Funcionario> & _return, const int32_t seqid);
  bool cambiarEstatusFuncionario(const std::string& usuario);
  int32_t send_cambiarEstatusFuncionario(const std::string& usuario);
  bool recv_cambiarEstatusFuncionario(const int32_t seqid);
  bool modificarPerito(const Funcionario& peritoAnterior, const Funcionario& peritoNuevo);
  int32_t send_modificarPerito(const Funcionario& peritoAnterior, const Funcionario& peritoNuevo);
  bool recv_modificarPerito(const int32_t seqid);
  bool cambiarContrasenaPerito(const std::string& usuario, const std::string& contrasena);
  int32_t send_cambiarContrasenaPerito(const std::string& usuario, const std::string& contrasena);
  bool recv_cambiarContrasenaPerito(const int32_t seqid);
  bool registrarPerito(const Funcionario& perito);
  int32_t send_registrarPerito(const Funcionario& perito);
  bool recv_registrarPerito(const int32_t seqid);
  void getPerito(Funcionario& _return, const std::string& usuario);
  int32_t send_getPerito(const std::string& usuario);
  void recv_getPerito(Funcionario& _return, const int32_t seqid);
  void getPeritos(std::vector<Funcionario> & _return);
  int32_t send_getPeritos();
  void recv_getPeritos(std::vector<Funcionario> & _return, const int32_t seqid);
  int32_t getIdPerito(const std::string& usuario);
  int32_t send_getIdPerito(const std::string& usuario);
  int32_t recv_getIdPerito(const int32_t seqid);
  void getReportesPendientes(std::vector<Reporte> & _return);
  int32_t send_getReportesPendientes();
  void recv_getReportesPendientes(std::vector<Reporte> & _return, const int32_t seqid);
  void getReportesAsignados(std::vector<Reporte> & _return, const int32_t idPerito);
  int32_t send_getReportesAsignados(const int32_t idPerito);
  void recv_getReportesAsignados(std::vector<Reporte> & _return, const int32_t seqid);
  bool asignarReportePerito(const int32_t idPerito, const int32_t idReporte);
  int32_t send_asignarReportePerito(const int32_t idPerito, const int32_t idReporte);
  bool recv_asignarReportePerito(const int32_t seqid);
  void getReporte(Reporte& _return, const int32_t idReporte);
  int32_t send_getReporte(const int32_t idReporte);
  void recv_getReporte(Reporte& _return, const int32_t seqid);
  bool levantarDictamen(const Dictamen& dictamen);
  int32_t send_levantarDictamen(const Dictamen& dictamen);
  bool recv_levantarDictamen(const int32_t seqid);
  void getDictamen(Dictamen& _return, const int32_t idReporte);
  int32_t send_getDictamen(const int32_t idReporte);
  void recv_getDictamen(Dictamen& _return, const int32_t seqid);
  void getPlacasVehiculosReporte(std::vector<VehiculosReporte> & _return);
  int32_t send_getPlacasVehiculosReporte();
  void recv_getPlacasVehiculosReporte(std::vector<VehiculosReporte> & _return, const int32_t seqid);
  bool cargarImagenes(const std::vector<std::string> & listaImagenes, const int32_t idreporte);
  int32_t send_cargarImagenes(const std::vector<std::string> & listaImagenes, const int32_t idreporte);
  bool recv_cargarImagenes(const int32_t seqid);
  void getImagenes(std::vector<std::string> & _return, const int32_t idreporte);
  int32_t send_getImagenes(const int32_t idreporte);
  void recv_getImagenes(std::vector<std::string> & _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
