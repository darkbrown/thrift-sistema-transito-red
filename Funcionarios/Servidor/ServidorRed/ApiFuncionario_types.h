/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ApiFuncionario_TYPES_H
#define ApiFuncionario_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace Thrift {

class Funcionario;

class Reporte;

class Dictamen;

class ErrorBD;

class VehiculosReporte;

typedef struct _Funcionario__isset {
  _Funcionario__isset() : nombre(false), estatus(false), cargo(false), usuario(false), contrasena(false) {}
  bool nombre :1;
  bool estatus :1;
  bool cargo :1;
  bool usuario :1;
  bool contrasena :1;
} _Funcionario__isset;

class Funcionario : public virtual ::apache::thrift::TBase {
 public:

  Funcionario(const Funcionario&);
  Funcionario& operator=(const Funcionario&);
  Funcionario() : nombre(), estatus(0), cargo(), usuario(), contrasena() {
  }

  virtual ~Funcionario() throw();
  std::string nombre;
  int32_t estatus;
  std::string cargo;
  std::string usuario;
  std::string contrasena;

  _Funcionario__isset __isset;

  void __set_nombre(const std::string& val);

  void __set_estatus(const int32_t val);

  void __set_cargo(const std::string& val);

  void __set_usuario(const std::string& val);

  void __set_contrasena(const std::string& val);

  bool operator == (const Funcionario & rhs) const
  {
    if (!(nombre == rhs.nombre))
      return false;
    if (!(estatus == rhs.estatus))
      return false;
    if (!(cargo == rhs.cargo))
      return false;
    if (!(usuario == rhs.usuario))
      return false;
    if (!(contrasena == rhs.contrasena))
      return false;
    return true;
  }
  bool operator != (const Funcionario &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Funcionario & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Funcionario &a, Funcionario &b);

std::ostream& operator<<(std::ostream& out, const Funcionario& obj);

typedef struct _Reporte__isset {
  _Reporte__isset() : idreporte(false), latitud(false), longitud(false), nombreOtroConduc(false), idconductor(false), folioUnico_dictamen(false), idFuncionario(false), nombreConductor(false), dictamen(false), fecha(false) {}
  bool idreporte :1;
  bool latitud :1;
  bool longitud :1;
  bool nombreOtroConduc :1;
  bool idconductor :1;
  bool folioUnico_dictamen :1;
  bool idFuncionario :1;
  bool nombreConductor :1;
  bool dictamen :1;
  bool fecha :1;
} _Reporte__isset;

class Reporte : public virtual ::apache::thrift::TBase {
 public:

  Reporte(const Reporte&);
  Reporte& operator=(const Reporte&);
  Reporte() : idreporte(0), latitud(), longitud(), nombreOtroConduc(), idconductor(0), folioUnico_dictamen(0), idFuncionario(0), nombreConductor(), dictamen(0), fecha() {
  }

  virtual ~Reporte() throw();
  int32_t idreporte;
  std::string latitud;
  std::string longitud;
  std::string nombreOtroConduc;
  int32_t idconductor;
  int32_t folioUnico_dictamen;
  int32_t idFuncionario;
  std::string nombreConductor;
  int32_t dictamen;
  std::string fecha;

  _Reporte__isset __isset;

  void __set_idreporte(const int32_t val);

  void __set_latitud(const std::string& val);

  void __set_longitud(const std::string& val);

  void __set_nombreOtroConduc(const std::string& val);

  void __set_idconductor(const int32_t val);

  void __set_folioUnico_dictamen(const int32_t val);

  void __set_idFuncionario(const int32_t val);

  void __set_nombreConductor(const std::string& val);

  void __set_dictamen(const int32_t val);

  void __set_fecha(const std::string& val);

  bool operator == (const Reporte & rhs) const
  {
    if (!(idreporte == rhs.idreporte))
      return false;
    if (!(latitud == rhs.latitud))
      return false;
    if (!(longitud == rhs.longitud))
      return false;
    if (!(nombreOtroConduc == rhs.nombreOtroConduc))
      return false;
    if (!(idconductor == rhs.idconductor))
      return false;
    if (!(folioUnico_dictamen == rhs.folioUnico_dictamen))
      return false;
    if (!(idFuncionario == rhs.idFuncionario))
      return false;
    if (!(nombreConductor == rhs.nombreConductor))
      return false;
    if (!(dictamen == rhs.dictamen))
      return false;
    if (!(fecha == rhs.fecha))
      return false;
    return true;
  }
  bool operator != (const Reporte &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Reporte & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Reporte &a, Reporte &b);

std::ostream& operator<<(std::ostream& out, const Reporte& obj);

typedef struct _Dictamen__isset {
  _Dictamen__isset() : dictamen(false), fecha(false), idfuncionario(false), idreporte(false), folioUnico(false) {}
  bool dictamen :1;
  bool fecha :1;
  bool idfuncionario :1;
  bool idreporte :1;
  bool folioUnico :1;
} _Dictamen__isset;

class Dictamen : public virtual ::apache::thrift::TBase {
 public:

  Dictamen(const Dictamen&);
  Dictamen& operator=(const Dictamen&);
  Dictamen() : dictamen(), fecha(), idfuncionario(0), idreporte(0), folioUnico(0) {
  }

  virtual ~Dictamen() throw();
  std::string dictamen;
  std::string fecha;
  int32_t idfuncionario;
  int32_t idreporte;
  int32_t folioUnico;

  _Dictamen__isset __isset;

  void __set_dictamen(const std::string& val);

  void __set_fecha(const std::string& val);

  void __set_idfuncionario(const int32_t val);

  void __set_idreporte(const int32_t val);

  void __set_folioUnico(const int32_t val);

  bool operator == (const Dictamen & rhs) const
  {
    if (!(dictamen == rhs.dictamen))
      return false;
    if (!(fecha == rhs.fecha))
      return false;
    if (!(idfuncionario == rhs.idfuncionario))
      return false;
    if (!(idreporte == rhs.idreporte))
      return false;
    if (!(folioUnico == rhs.folioUnico))
      return false;
    return true;
  }
  bool operator != (const Dictamen &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dictamen & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Dictamen &a, Dictamen &b);

std::ostream& operator<<(std::ostream& out, const Dictamen& obj);

typedef struct _ErrorBD__isset {
  _ErrorBD__isset() : problema(true), codigoError(true) {}
  bool problema :1;
  bool codigoError :1;
} _ErrorBD__isset;

class ErrorBD : public ::apache::thrift::TException {
 public:

  ErrorBD(const ErrorBD&);
  ErrorBD& operator=(const ErrorBD&);
  ErrorBD() : problema("Error de conexion"), codigoError(500) {
  }

  virtual ~ErrorBD() throw();
  std::string problema;
  int16_t codigoError;

  _ErrorBD__isset __isset;

  void __set_problema(const std::string& val);

  void __set_codigoError(const int16_t val);

  bool operator == (const ErrorBD & rhs) const
  {
    if (!(problema == rhs.problema))
      return false;
    if (!(codigoError == rhs.codigoError))
      return false;
    return true;
  }
  bool operator != (const ErrorBD &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ErrorBD & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(ErrorBD &a, ErrorBD &b);

std::ostream& operator<<(std::ostream& out, const ErrorBD& obj);

typedef struct _VehiculosReporte__isset {
  _VehiculosReporte__isset() : placaVehiculo1(false), placaVehiculo2(false) {}
  bool placaVehiculo1 :1;
  bool placaVehiculo2 :1;
} _VehiculosReporte__isset;

class VehiculosReporte : public virtual ::apache::thrift::TBase {
 public:

  VehiculosReporte(const VehiculosReporte&);
  VehiculosReporte& operator=(const VehiculosReporte&);
  VehiculosReporte() : placaVehiculo1(), placaVehiculo2() {
  }

  virtual ~VehiculosReporte() throw();
  std::string placaVehiculo1;
  std::string placaVehiculo2;

  _VehiculosReporte__isset __isset;

  void __set_placaVehiculo1(const std::string& val);

  void __set_placaVehiculo2(const std::string& val);

  bool operator == (const VehiculosReporte & rhs) const
  {
    if (!(placaVehiculo1 == rhs.placaVehiculo1))
      return false;
    if (!(placaVehiculo2 == rhs.placaVehiculo2))
      return false;
    return true;
  }
  bool operator != (const VehiculosReporte &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VehiculosReporte & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VehiculosReporte &a, VehiculosReporte &b);

std::ostream& operator<<(std::ostream& out, const VehiculosReporte& obj);

} // namespace

#endif
