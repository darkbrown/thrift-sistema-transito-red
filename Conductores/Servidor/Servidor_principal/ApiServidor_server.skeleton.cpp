/*// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ApiServidor.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::Thrift;

class ApiServidorHandler : virtual public ApiServidorIf {
 public:
  ApiServidorHandler() {
    // Your initialization goes here
  }

  bool confirmarConductor(const int64_t telefono, const std::string& contrasena) {
    // Your implementation goes here
    printf("confirmarConductor\n");
  }

  bool registrarConductor(const Conductor& conductor) {
    // Your implementation goes here
    printf("registrarConductor\n");
  }

  bool registrarVehiculo(const Vehiculo& vehiculo, const int64_t telefono) {
    // Your implementation goes here
    printf("registrarVehiculo\n");
  }

  bool modificarVehiculo(const Vehiculo& vehiculo, const std::string& numPLacaAnt) {
    // Your implementation goes here
    printf("modificarVehiculo\n");
  }

  bool deshabilitarVehiculo(const std::string& numPlaca) {
    // Your implementation goes here
    printf("deshabilitarVehiculo\n");
  }

  void consultarVehiculoPropio(std::vector<Vehiculo> & _return, const int64_t telefono) {
    // Your implementation goes here
    printf("consultarVehiculoPropio\n");
  }

  void consultarVehiculoInfo(Vehiculo& _return, const std::string& numPlaca) {
    // Your implementation goes here
    printf("consultarVehiculoInfo\n");
  }

  bool registrarReporte(const Reporte& reporte, const int64_t telefono) {
    // Your implementation goes here
    printf("registrarReporte\n");
  }

  bool registrarFotografia(const std::vector<std::string> & fotografias, const int64_t telefono) {
    // Your implementation goes here
    printf("registrarFotografia\n");
  }

  void consultarFotografia(std::vector<std::string> & _return, const int32_t folioUnico_dictamen) {
    // Your implementation goes here
    printf("consultarFotografia\n");
  }

  void registrarVehiculoReporte(std::string& _return, const Vehiculo& vehiculo) {
    // Your implementation goes here
    printf("registrarVehiculoReporte\n");
  }

  void consultarReporte(std::vector<Reporte> & _return, const int64_t telefono) {
    // Your implementation goes here
    printf("consultarReporte\n");
  }

  void consultarDictamen(std::vector<Dictamen> & _return, const std::vector<int32_t> & folioUnico) {
    // Your implementation goes here
    printf("consultarDictamen\n");
  }

  void consultarConductorPropio(Conductor& _return, const int64_t telefono) {
    // Your implementation goes here
    printf("consultarConductorPropio\n");
  }

  void recuperarNFuncionario(std::string& _return, const int32_t folioUnico) {
    // Your implementation goes here
    printf("recuperarNFuncionario\n");
  }

  void recuperarVehiculoReporte(std::vector<Vehiculo> & _return, const int32_t folioUnico_dictamen) {
    // Your implementation goes here
    printf("recuperarVehiculoReporte\n");
  }

  bool asociarVehiculoReporte(const std::vector<std::string> & numPLacas, const int64_t telefono) {
    // Your implementation goes here
    printf("asociarVehiculoReporte\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<ApiServidorHandler> handler(new ApiServidorHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new ApiServidorProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}*/

