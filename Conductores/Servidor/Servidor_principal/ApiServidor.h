/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ApiServidor_H
#define ApiServidor_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ApiServidor_types.h"

namespace Thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ApiServidorIf {
 public:
  virtual ~ApiServidorIf() {}
  virtual bool confirmarConductor(const int64_t telefono, const std::string& contrasena) = 0;
  virtual bool registrarConductor(const Conductor& conductor) = 0;
  virtual bool registrarVehiculo(const Vehiculo& vehiculo, const int64_t telefono) = 0;
  virtual bool modificarVehiculo(const Vehiculo& vehiculo, const std::string& numPLacaAnt) = 0;
  virtual bool deshabilitarVehiculo(const std::string& numPlaca) = 0;
  virtual void consultarVehiculoPropio(std::vector<Vehiculo> & _return, const int64_t telefono) = 0;
  virtual void consultarVehiculoInfo(Vehiculo& _return, const std::string& numPlaca) = 0;
  virtual bool registrarReporte(const Reporte& reporte, const int64_t telefono) = 0;
  virtual bool registrarFotografia(const std::vector<std::string> & fotografias, const int64_t telefono) = 0;
  virtual void consultarFotografia(std::vector<std::string> & _return, const int32_t folioUnico_dictamen) = 0;
  virtual void registrarVehiculoReporte(std::string& _return, const Vehiculo& vehiculo) = 0;
  virtual void consultarReporte(std::vector<Reporte> & _return, const int64_t telefono) = 0;
  virtual void consultarDictamen(std::vector<Dictamen> & _return, const std::vector<int32_t> & folioUnico) = 0;
  virtual void consultarConductorPropio(Conductor& _return, const int64_t telefono) = 0;
  virtual void recuperarNFuncionario(std::string& _return, const int32_t folioUnico) = 0;
  virtual void recuperarVehiculoReporte(std::vector<Vehiculo> & _return, const int32_t folioUnico_dictamen) = 0;
  virtual bool asociarVehiculoReporte(const std::vector<std::string> & numPLacas, const int64_t telefono) = 0;
};

class ApiServidorIfFactory {
 public:
  typedef ApiServidorIf Handler;

  virtual ~ApiServidorIfFactory() {}

  virtual ApiServidorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ApiServidorIf* /* handler */) = 0;
};

class ApiServidorIfSingletonFactory : virtual public ApiServidorIfFactory {
 public:
  ApiServidorIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ApiServidorIf>& iface) : iface_(iface) {}
  virtual ~ApiServidorIfSingletonFactory() {}

  virtual ApiServidorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ApiServidorIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ApiServidorIf> iface_;
};

class ApiServidorNull : virtual public ApiServidorIf {
 public:
  virtual ~ApiServidorNull() {}
  bool confirmarConductor(const int64_t /* telefono */, const std::string& /* contrasena */) {
    bool _return = false;
    return _return;
  }
  bool registrarConductor(const Conductor& /* conductor */) {
    bool _return = false;
    return _return;
  }
  bool registrarVehiculo(const Vehiculo& /* vehiculo */, const int64_t /* telefono */) {
    bool _return = false;
    return _return;
  }
  bool modificarVehiculo(const Vehiculo& /* vehiculo */, const std::string& /* numPLacaAnt */) {
    bool _return = false;
    return _return;
  }
  bool deshabilitarVehiculo(const std::string& /* numPlaca */) {
    bool _return = false;
    return _return;
  }
  void consultarVehiculoPropio(std::vector<Vehiculo> & /* _return */, const int64_t /* telefono */) {
    return;
  }
  void consultarVehiculoInfo(Vehiculo& /* _return */, const std::string& /* numPlaca */) {
    return;
  }
  bool registrarReporte(const Reporte& /* reporte */, const int64_t /* telefono */) {
    bool _return = false;
    return _return;
  }
  bool registrarFotografia(const std::vector<std::string> & /* fotografias */, const int64_t /* telefono */) {
    bool _return = false;
    return _return;
  }
  void consultarFotografia(std::vector<std::string> & /* _return */, const int32_t /* folioUnico_dictamen */) {
    return;
  }
  void registrarVehiculoReporte(std::string& /* _return */, const Vehiculo& /* vehiculo */) {
    return;
  }
  void consultarReporte(std::vector<Reporte> & /* _return */, const int64_t /* telefono */) {
    return;
  }
  void consultarDictamen(std::vector<Dictamen> & /* _return */, const std::vector<int32_t> & /* folioUnico */) {
    return;
  }
  void consultarConductorPropio(Conductor& /* _return */, const int64_t /* telefono */) {
    return;
  }
  void recuperarNFuncionario(std::string& /* _return */, const int32_t /* folioUnico */) {
    return;
  }
  void recuperarVehiculoReporte(std::vector<Vehiculo> & /* _return */, const int32_t /* folioUnico_dictamen */) {
    return;
  }
  bool asociarVehiculoReporte(const std::vector<std::string> & /* numPLacas */, const int64_t /* telefono */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _ApiServidor_confirmarConductor_args__isset {
  _ApiServidor_confirmarConductor_args__isset() : telefono(false), contrasena(false) {}
  bool telefono :1;
  bool contrasena :1;
} _ApiServidor_confirmarConductor_args__isset;

class ApiServidor_confirmarConductor_args {
 public:

  ApiServidor_confirmarConductor_args(const ApiServidor_confirmarConductor_args&);
  ApiServidor_confirmarConductor_args& operator=(const ApiServidor_confirmarConductor_args&);
  ApiServidor_confirmarConductor_args() : telefono(0), contrasena() {
  }

  virtual ~ApiServidor_confirmarConductor_args() throw();
  int64_t telefono;
  std::string contrasena;

  _ApiServidor_confirmarConductor_args__isset __isset;

  void __set_telefono(const int64_t val);

  void __set_contrasena(const std::string& val);

  bool operator == (const ApiServidor_confirmarConductor_args & rhs) const
  {
    if (!(telefono == rhs.telefono))
      return false;
    if (!(contrasena == rhs.contrasena))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_confirmarConductor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_confirmarConductor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_confirmarConductor_pargs {
 public:


  virtual ~ApiServidor_confirmarConductor_pargs() throw();
  const int64_t* telefono;
  const std::string* contrasena;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_confirmarConductor_result__isset {
  _ApiServidor_confirmarConductor_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_confirmarConductor_result__isset;

class ApiServidor_confirmarConductor_result {
 public:

  ApiServidor_confirmarConductor_result(const ApiServidor_confirmarConductor_result&);
  ApiServidor_confirmarConductor_result& operator=(const ApiServidor_confirmarConductor_result&);
  ApiServidor_confirmarConductor_result() : success(0) {
  }

  virtual ~ApiServidor_confirmarConductor_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiServidor_confirmarConductor_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_confirmarConductor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_confirmarConductor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_confirmarConductor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_confirmarConductor_presult__isset {
  _ApiServidor_confirmarConductor_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_confirmarConductor_presult__isset;

class ApiServidor_confirmarConductor_presult {
 public:


  virtual ~ApiServidor_confirmarConductor_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiServidor_confirmarConductor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_registrarConductor_args__isset {
  _ApiServidor_registrarConductor_args__isset() : conductor(false) {}
  bool conductor :1;
} _ApiServidor_registrarConductor_args__isset;

class ApiServidor_registrarConductor_args {
 public:

  ApiServidor_registrarConductor_args(const ApiServidor_registrarConductor_args&);
  ApiServidor_registrarConductor_args& operator=(const ApiServidor_registrarConductor_args&);
  ApiServidor_registrarConductor_args() {
  }

  virtual ~ApiServidor_registrarConductor_args() throw();
  Conductor conductor;

  _ApiServidor_registrarConductor_args__isset __isset;

  void __set_conductor(const Conductor& val);

  bool operator == (const ApiServidor_registrarConductor_args & rhs) const
  {
    if (!(conductor == rhs.conductor))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_registrarConductor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_registrarConductor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_registrarConductor_pargs {
 public:


  virtual ~ApiServidor_registrarConductor_pargs() throw();
  const Conductor* conductor;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_registrarConductor_result__isset {
  _ApiServidor_registrarConductor_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_registrarConductor_result__isset;

class ApiServidor_registrarConductor_result {
 public:

  ApiServidor_registrarConductor_result(const ApiServidor_registrarConductor_result&);
  ApiServidor_registrarConductor_result& operator=(const ApiServidor_registrarConductor_result&);
  ApiServidor_registrarConductor_result() : success(0) {
  }

  virtual ~ApiServidor_registrarConductor_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiServidor_registrarConductor_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_registrarConductor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_registrarConductor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_registrarConductor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_registrarConductor_presult__isset {
  _ApiServidor_registrarConductor_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_registrarConductor_presult__isset;

class ApiServidor_registrarConductor_presult {
 public:


  virtual ~ApiServidor_registrarConductor_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiServidor_registrarConductor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_registrarVehiculo_args__isset {
  _ApiServidor_registrarVehiculo_args__isset() : vehiculo(false), telefono(false) {}
  bool vehiculo :1;
  bool telefono :1;
} _ApiServidor_registrarVehiculo_args__isset;

class ApiServidor_registrarVehiculo_args {
 public:

  ApiServidor_registrarVehiculo_args(const ApiServidor_registrarVehiculo_args&);
  ApiServidor_registrarVehiculo_args& operator=(const ApiServidor_registrarVehiculo_args&);
  ApiServidor_registrarVehiculo_args() : telefono(0) {
  }

  virtual ~ApiServidor_registrarVehiculo_args() throw();
  Vehiculo vehiculo;
  int64_t telefono;

  _ApiServidor_registrarVehiculo_args__isset __isset;

  void __set_vehiculo(const Vehiculo& val);

  void __set_telefono(const int64_t val);

  bool operator == (const ApiServidor_registrarVehiculo_args & rhs) const
  {
    if (!(vehiculo == rhs.vehiculo))
      return false;
    if (!(telefono == rhs.telefono))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_registrarVehiculo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_registrarVehiculo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_registrarVehiculo_pargs {
 public:


  virtual ~ApiServidor_registrarVehiculo_pargs() throw();
  const Vehiculo* vehiculo;
  const int64_t* telefono;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_registrarVehiculo_result__isset {
  _ApiServidor_registrarVehiculo_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_registrarVehiculo_result__isset;

class ApiServidor_registrarVehiculo_result {
 public:

  ApiServidor_registrarVehiculo_result(const ApiServidor_registrarVehiculo_result&);
  ApiServidor_registrarVehiculo_result& operator=(const ApiServidor_registrarVehiculo_result&);
  ApiServidor_registrarVehiculo_result() : success(0) {
  }

  virtual ~ApiServidor_registrarVehiculo_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiServidor_registrarVehiculo_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_registrarVehiculo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_registrarVehiculo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_registrarVehiculo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_registrarVehiculo_presult__isset {
  _ApiServidor_registrarVehiculo_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_registrarVehiculo_presult__isset;

class ApiServidor_registrarVehiculo_presult {
 public:


  virtual ~ApiServidor_registrarVehiculo_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiServidor_registrarVehiculo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_modificarVehiculo_args__isset {
  _ApiServidor_modificarVehiculo_args__isset() : vehiculo(false), numPLacaAnt(false) {}
  bool vehiculo :1;
  bool numPLacaAnt :1;
} _ApiServidor_modificarVehiculo_args__isset;

class ApiServidor_modificarVehiculo_args {
 public:

  ApiServidor_modificarVehiculo_args(const ApiServidor_modificarVehiculo_args&);
  ApiServidor_modificarVehiculo_args& operator=(const ApiServidor_modificarVehiculo_args&);
  ApiServidor_modificarVehiculo_args() : numPLacaAnt() {
  }

  virtual ~ApiServidor_modificarVehiculo_args() throw();
  Vehiculo vehiculo;
  std::string numPLacaAnt;

  _ApiServidor_modificarVehiculo_args__isset __isset;

  void __set_vehiculo(const Vehiculo& val);

  void __set_numPLacaAnt(const std::string& val);

  bool operator == (const ApiServidor_modificarVehiculo_args & rhs) const
  {
    if (!(vehiculo == rhs.vehiculo))
      return false;
    if (!(numPLacaAnt == rhs.numPLacaAnt))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_modificarVehiculo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_modificarVehiculo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_modificarVehiculo_pargs {
 public:


  virtual ~ApiServidor_modificarVehiculo_pargs() throw();
  const Vehiculo* vehiculo;
  const std::string* numPLacaAnt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_modificarVehiculo_result__isset {
  _ApiServidor_modificarVehiculo_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_modificarVehiculo_result__isset;

class ApiServidor_modificarVehiculo_result {
 public:

  ApiServidor_modificarVehiculo_result(const ApiServidor_modificarVehiculo_result&);
  ApiServidor_modificarVehiculo_result& operator=(const ApiServidor_modificarVehiculo_result&);
  ApiServidor_modificarVehiculo_result() : success(0) {
  }

  virtual ~ApiServidor_modificarVehiculo_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiServidor_modificarVehiculo_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_modificarVehiculo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_modificarVehiculo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_modificarVehiculo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_modificarVehiculo_presult__isset {
  _ApiServidor_modificarVehiculo_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_modificarVehiculo_presult__isset;

class ApiServidor_modificarVehiculo_presult {
 public:


  virtual ~ApiServidor_modificarVehiculo_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiServidor_modificarVehiculo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_deshabilitarVehiculo_args__isset {
  _ApiServidor_deshabilitarVehiculo_args__isset() : numPlaca(false) {}
  bool numPlaca :1;
} _ApiServidor_deshabilitarVehiculo_args__isset;

class ApiServidor_deshabilitarVehiculo_args {
 public:

  ApiServidor_deshabilitarVehiculo_args(const ApiServidor_deshabilitarVehiculo_args&);
  ApiServidor_deshabilitarVehiculo_args& operator=(const ApiServidor_deshabilitarVehiculo_args&);
  ApiServidor_deshabilitarVehiculo_args() : numPlaca() {
  }

  virtual ~ApiServidor_deshabilitarVehiculo_args() throw();
  std::string numPlaca;

  _ApiServidor_deshabilitarVehiculo_args__isset __isset;

  void __set_numPlaca(const std::string& val);

  bool operator == (const ApiServidor_deshabilitarVehiculo_args & rhs) const
  {
    if (!(numPlaca == rhs.numPlaca))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_deshabilitarVehiculo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_deshabilitarVehiculo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_deshabilitarVehiculo_pargs {
 public:


  virtual ~ApiServidor_deshabilitarVehiculo_pargs() throw();
  const std::string* numPlaca;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_deshabilitarVehiculo_result__isset {
  _ApiServidor_deshabilitarVehiculo_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_deshabilitarVehiculo_result__isset;

class ApiServidor_deshabilitarVehiculo_result {
 public:

  ApiServidor_deshabilitarVehiculo_result(const ApiServidor_deshabilitarVehiculo_result&);
  ApiServidor_deshabilitarVehiculo_result& operator=(const ApiServidor_deshabilitarVehiculo_result&);
  ApiServidor_deshabilitarVehiculo_result() : success(0) {
  }

  virtual ~ApiServidor_deshabilitarVehiculo_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiServidor_deshabilitarVehiculo_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_deshabilitarVehiculo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_deshabilitarVehiculo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_deshabilitarVehiculo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_deshabilitarVehiculo_presult__isset {
  _ApiServidor_deshabilitarVehiculo_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_deshabilitarVehiculo_presult__isset;

class ApiServidor_deshabilitarVehiculo_presult {
 public:


  virtual ~ApiServidor_deshabilitarVehiculo_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiServidor_deshabilitarVehiculo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_consultarVehiculoPropio_args__isset {
  _ApiServidor_consultarVehiculoPropio_args__isset() : telefono(false) {}
  bool telefono :1;
} _ApiServidor_consultarVehiculoPropio_args__isset;

class ApiServidor_consultarVehiculoPropio_args {
 public:

  ApiServidor_consultarVehiculoPropio_args(const ApiServidor_consultarVehiculoPropio_args&);
  ApiServidor_consultarVehiculoPropio_args& operator=(const ApiServidor_consultarVehiculoPropio_args&);
  ApiServidor_consultarVehiculoPropio_args() : telefono(0) {
  }

  virtual ~ApiServidor_consultarVehiculoPropio_args() throw();
  int64_t telefono;

  _ApiServidor_consultarVehiculoPropio_args__isset __isset;

  void __set_telefono(const int64_t val);

  bool operator == (const ApiServidor_consultarVehiculoPropio_args & rhs) const
  {
    if (!(telefono == rhs.telefono))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_consultarVehiculoPropio_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_consultarVehiculoPropio_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_consultarVehiculoPropio_pargs {
 public:


  virtual ~ApiServidor_consultarVehiculoPropio_pargs() throw();
  const int64_t* telefono;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_consultarVehiculoPropio_result__isset {
  _ApiServidor_consultarVehiculoPropio_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_consultarVehiculoPropio_result__isset;

class ApiServidor_consultarVehiculoPropio_result {
 public:

  ApiServidor_consultarVehiculoPropio_result(const ApiServidor_consultarVehiculoPropio_result&);
  ApiServidor_consultarVehiculoPropio_result& operator=(const ApiServidor_consultarVehiculoPropio_result&);
  ApiServidor_consultarVehiculoPropio_result() {
  }

  virtual ~ApiServidor_consultarVehiculoPropio_result() throw();
  std::vector<Vehiculo>  success;
  ErrorBD ebd;

  _ApiServidor_consultarVehiculoPropio_result__isset __isset;

  void __set_success(const std::vector<Vehiculo> & val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_consultarVehiculoPropio_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_consultarVehiculoPropio_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_consultarVehiculoPropio_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_consultarVehiculoPropio_presult__isset {
  _ApiServidor_consultarVehiculoPropio_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_consultarVehiculoPropio_presult__isset;

class ApiServidor_consultarVehiculoPropio_presult {
 public:


  virtual ~ApiServidor_consultarVehiculoPropio_presult() throw();
  std::vector<Vehiculo> * success;
  ErrorBD ebd;

  _ApiServidor_consultarVehiculoPropio_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_consultarVehiculoInfo_args__isset {
  _ApiServidor_consultarVehiculoInfo_args__isset() : numPlaca(false) {}
  bool numPlaca :1;
} _ApiServidor_consultarVehiculoInfo_args__isset;

class ApiServidor_consultarVehiculoInfo_args {
 public:

  ApiServidor_consultarVehiculoInfo_args(const ApiServidor_consultarVehiculoInfo_args&);
  ApiServidor_consultarVehiculoInfo_args& operator=(const ApiServidor_consultarVehiculoInfo_args&);
  ApiServidor_consultarVehiculoInfo_args() : numPlaca() {
  }

  virtual ~ApiServidor_consultarVehiculoInfo_args() throw();
  std::string numPlaca;

  _ApiServidor_consultarVehiculoInfo_args__isset __isset;

  void __set_numPlaca(const std::string& val);

  bool operator == (const ApiServidor_consultarVehiculoInfo_args & rhs) const
  {
    if (!(numPlaca == rhs.numPlaca))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_consultarVehiculoInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_consultarVehiculoInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_consultarVehiculoInfo_pargs {
 public:


  virtual ~ApiServidor_consultarVehiculoInfo_pargs() throw();
  const std::string* numPlaca;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_consultarVehiculoInfo_result__isset {
  _ApiServidor_consultarVehiculoInfo_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_consultarVehiculoInfo_result__isset;

class ApiServidor_consultarVehiculoInfo_result {
 public:

  ApiServidor_consultarVehiculoInfo_result(const ApiServidor_consultarVehiculoInfo_result&);
  ApiServidor_consultarVehiculoInfo_result& operator=(const ApiServidor_consultarVehiculoInfo_result&);
  ApiServidor_consultarVehiculoInfo_result() {
  }

  virtual ~ApiServidor_consultarVehiculoInfo_result() throw();
  Vehiculo success;
  ErrorBD ebd;

  _ApiServidor_consultarVehiculoInfo_result__isset __isset;

  void __set_success(const Vehiculo& val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_consultarVehiculoInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_consultarVehiculoInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_consultarVehiculoInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_consultarVehiculoInfo_presult__isset {
  _ApiServidor_consultarVehiculoInfo_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_consultarVehiculoInfo_presult__isset;

class ApiServidor_consultarVehiculoInfo_presult {
 public:


  virtual ~ApiServidor_consultarVehiculoInfo_presult() throw();
  Vehiculo* success;
  ErrorBD ebd;

  _ApiServidor_consultarVehiculoInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_registrarReporte_args__isset {
  _ApiServidor_registrarReporte_args__isset() : reporte(false), telefono(false) {}
  bool reporte :1;
  bool telefono :1;
} _ApiServidor_registrarReporte_args__isset;

class ApiServidor_registrarReporte_args {
 public:

  ApiServidor_registrarReporte_args(const ApiServidor_registrarReporte_args&);
  ApiServidor_registrarReporte_args& operator=(const ApiServidor_registrarReporte_args&);
  ApiServidor_registrarReporte_args() : telefono(0) {
  }

  virtual ~ApiServidor_registrarReporte_args() throw();
  Reporte reporte;
  int64_t telefono;

  _ApiServidor_registrarReporte_args__isset __isset;

  void __set_reporte(const Reporte& val);

  void __set_telefono(const int64_t val);

  bool operator == (const ApiServidor_registrarReporte_args & rhs) const
  {
    if (!(reporte == rhs.reporte))
      return false;
    if (!(telefono == rhs.telefono))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_registrarReporte_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_registrarReporte_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_registrarReporte_pargs {
 public:


  virtual ~ApiServidor_registrarReporte_pargs() throw();
  const Reporte* reporte;
  const int64_t* telefono;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_registrarReporte_result__isset {
  _ApiServidor_registrarReporte_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_registrarReporte_result__isset;

class ApiServidor_registrarReporte_result {
 public:

  ApiServidor_registrarReporte_result(const ApiServidor_registrarReporte_result&);
  ApiServidor_registrarReporte_result& operator=(const ApiServidor_registrarReporte_result&);
  ApiServidor_registrarReporte_result() : success(0) {
  }

  virtual ~ApiServidor_registrarReporte_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiServidor_registrarReporte_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_registrarReporte_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_registrarReporte_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_registrarReporte_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_registrarReporte_presult__isset {
  _ApiServidor_registrarReporte_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_registrarReporte_presult__isset;

class ApiServidor_registrarReporte_presult {
 public:


  virtual ~ApiServidor_registrarReporte_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiServidor_registrarReporte_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_registrarFotografia_args__isset {
  _ApiServidor_registrarFotografia_args__isset() : fotografias(false), telefono(false) {}
  bool fotografias :1;
  bool telefono :1;
} _ApiServidor_registrarFotografia_args__isset;

class ApiServidor_registrarFotografia_args {
 public:

  ApiServidor_registrarFotografia_args(const ApiServidor_registrarFotografia_args&);
  ApiServidor_registrarFotografia_args& operator=(const ApiServidor_registrarFotografia_args&);
  ApiServidor_registrarFotografia_args() : telefono(0) {
  }

  virtual ~ApiServidor_registrarFotografia_args() throw();
  std::vector<std::string>  fotografias;
  int64_t telefono;

  _ApiServidor_registrarFotografia_args__isset __isset;

  void __set_fotografias(const std::vector<std::string> & val);

  void __set_telefono(const int64_t val);

  bool operator == (const ApiServidor_registrarFotografia_args & rhs) const
  {
    if (!(fotografias == rhs.fotografias))
      return false;
    if (!(telefono == rhs.telefono))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_registrarFotografia_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_registrarFotografia_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_registrarFotografia_pargs {
 public:


  virtual ~ApiServidor_registrarFotografia_pargs() throw();
  const std::vector<std::string> * fotografias;
  const int64_t* telefono;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_registrarFotografia_result__isset {
  _ApiServidor_registrarFotografia_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_registrarFotografia_result__isset;

class ApiServidor_registrarFotografia_result {
 public:

  ApiServidor_registrarFotografia_result(const ApiServidor_registrarFotografia_result&);
  ApiServidor_registrarFotografia_result& operator=(const ApiServidor_registrarFotografia_result&);
  ApiServidor_registrarFotografia_result() : success(0) {
  }

  virtual ~ApiServidor_registrarFotografia_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiServidor_registrarFotografia_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_registrarFotografia_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_registrarFotografia_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_registrarFotografia_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_registrarFotografia_presult__isset {
  _ApiServidor_registrarFotografia_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_registrarFotografia_presult__isset;

class ApiServidor_registrarFotografia_presult {
 public:


  virtual ~ApiServidor_registrarFotografia_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiServidor_registrarFotografia_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_consultarFotografia_args__isset {
  _ApiServidor_consultarFotografia_args__isset() : folioUnico_dictamen(false) {}
  bool folioUnico_dictamen :1;
} _ApiServidor_consultarFotografia_args__isset;

class ApiServidor_consultarFotografia_args {
 public:

  ApiServidor_consultarFotografia_args(const ApiServidor_consultarFotografia_args&);
  ApiServidor_consultarFotografia_args& operator=(const ApiServidor_consultarFotografia_args&);
  ApiServidor_consultarFotografia_args() : folioUnico_dictamen(0) {
  }

  virtual ~ApiServidor_consultarFotografia_args() throw();
  int32_t folioUnico_dictamen;

  _ApiServidor_consultarFotografia_args__isset __isset;

  void __set_folioUnico_dictamen(const int32_t val);

  bool operator == (const ApiServidor_consultarFotografia_args & rhs) const
  {
    if (!(folioUnico_dictamen == rhs.folioUnico_dictamen))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_consultarFotografia_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_consultarFotografia_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_consultarFotografia_pargs {
 public:


  virtual ~ApiServidor_consultarFotografia_pargs() throw();
  const int32_t* folioUnico_dictamen;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_consultarFotografia_result__isset {
  _ApiServidor_consultarFotografia_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_consultarFotografia_result__isset;

class ApiServidor_consultarFotografia_result {
 public:

  ApiServidor_consultarFotografia_result(const ApiServidor_consultarFotografia_result&);
  ApiServidor_consultarFotografia_result& operator=(const ApiServidor_consultarFotografia_result&);
  ApiServidor_consultarFotografia_result() {
  }

  virtual ~ApiServidor_consultarFotografia_result() throw();
  std::vector<std::string>  success;
  ErrorBD ebd;

  _ApiServidor_consultarFotografia_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_consultarFotografia_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_consultarFotografia_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_consultarFotografia_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_consultarFotografia_presult__isset {
  _ApiServidor_consultarFotografia_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_consultarFotografia_presult__isset;

class ApiServidor_consultarFotografia_presult {
 public:


  virtual ~ApiServidor_consultarFotografia_presult() throw();
  std::vector<std::string> * success;
  ErrorBD ebd;

  _ApiServidor_consultarFotografia_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_registrarVehiculoReporte_args__isset {
  _ApiServidor_registrarVehiculoReporte_args__isset() : vehiculo(false) {}
  bool vehiculo :1;
} _ApiServidor_registrarVehiculoReporte_args__isset;

class ApiServidor_registrarVehiculoReporte_args {
 public:

  ApiServidor_registrarVehiculoReporte_args(const ApiServidor_registrarVehiculoReporte_args&);
  ApiServidor_registrarVehiculoReporte_args& operator=(const ApiServidor_registrarVehiculoReporte_args&);
  ApiServidor_registrarVehiculoReporte_args() {
  }

  virtual ~ApiServidor_registrarVehiculoReporte_args() throw();
  Vehiculo vehiculo;

  _ApiServidor_registrarVehiculoReporte_args__isset __isset;

  void __set_vehiculo(const Vehiculo& val);

  bool operator == (const ApiServidor_registrarVehiculoReporte_args & rhs) const
  {
    if (!(vehiculo == rhs.vehiculo))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_registrarVehiculoReporte_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_registrarVehiculoReporte_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_registrarVehiculoReporte_pargs {
 public:


  virtual ~ApiServidor_registrarVehiculoReporte_pargs() throw();
  const Vehiculo* vehiculo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_registrarVehiculoReporte_result__isset {
  _ApiServidor_registrarVehiculoReporte_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_registrarVehiculoReporte_result__isset;

class ApiServidor_registrarVehiculoReporte_result {
 public:

  ApiServidor_registrarVehiculoReporte_result(const ApiServidor_registrarVehiculoReporte_result&);
  ApiServidor_registrarVehiculoReporte_result& operator=(const ApiServidor_registrarVehiculoReporte_result&);
  ApiServidor_registrarVehiculoReporte_result() : success() {
  }

  virtual ~ApiServidor_registrarVehiculoReporte_result() throw();
  std::string success;
  ErrorBD ebd;

  _ApiServidor_registrarVehiculoReporte_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_registrarVehiculoReporte_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_registrarVehiculoReporte_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_registrarVehiculoReporte_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_registrarVehiculoReporte_presult__isset {
  _ApiServidor_registrarVehiculoReporte_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_registrarVehiculoReporte_presult__isset;

class ApiServidor_registrarVehiculoReporte_presult {
 public:


  virtual ~ApiServidor_registrarVehiculoReporte_presult() throw();
  std::string* success;
  ErrorBD ebd;

  _ApiServidor_registrarVehiculoReporte_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_consultarReporte_args__isset {
  _ApiServidor_consultarReporte_args__isset() : telefono(false) {}
  bool telefono :1;
} _ApiServidor_consultarReporte_args__isset;

class ApiServidor_consultarReporte_args {
 public:

  ApiServidor_consultarReporte_args(const ApiServidor_consultarReporte_args&);
  ApiServidor_consultarReporte_args& operator=(const ApiServidor_consultarReporte_args&);
  ApiServidor_consultarReporte_args() : telefono(0) {
  }

  virtual ~ApiServidor_consultarReporte_args() throw();
  int64_t telefono;

  _ApiServidor_consultarReporte_args__isset __isset;

  void __set_telefono(const int64_t val);

  bool operator == (const ApiServidor_consultarReporte_args & rhs) const
  {
    if (!(telefono == rhs.telefono))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_consultarReporte_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_consultarReporte_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_consultarReporte_pargs {
 public:


  virtual ~ApiServidor_consultarReporte_pargs() throw();
  const int64_t* telefono;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_consultarReporte_result__isset {
  _ApiServidor_consultarReporte_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_consultarReporte_result__isset;

class ApiServidor_consultarReporte_result {
 public:

  ApiServidor_consultarReporte_result(const ApiServidor_consultarReporte_result&);
  ApiServidor_consultarReporte_result& operator=(const ApiServidor_consultarReporte_result&);
  ApiServidor_consultarReporte_result() {
  }

  virtual ~ApiServidor_consultarReporte_result() throw();
  std::vector<Reporte>  success;
  ErrorBD ebd;

  _ApiServidor_consultarReporte_result__isset __isset;

  void __set_success(const std::vector<Reporte> & val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_consultarReporte_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_consultarReporte_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_consultarReporte_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_consultarReporte_presult__isset {
  _ApiServidor_consultarReporte_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_consultarReporte_presult__isset;

class ApiServidor_consultarReporte_presult {
 public:


  virtual ~ApiServidor_consultarReporte_presult() throw();
  std::vector<Reporte> * success;
  ErrorBD ebd;

  _ApiServidor_consultarReporte_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_consultarDictamen_args__isset {
  _ApiServidor_consultarDictamen_args__isset() : folioUnico(false) {}
  bool folioUnico :1;
} _ApiServidor_consultarDictamen_args__isset;

class ApiServidor_consultarDictamen_args {
 public:

  ApiServidor_consultarDictamen_args(const ApiServidor_consultarDictamen_args&);
  ApiServidor_consultarDictamen_args& operator=(const ApiServidor_consultarDictamen_args&);
  ApiServidor_consultarDictamen_args() {
  }

  virtual ~ApiServidor_consultarDictamen_args() throw();
  std::vector<int32_t>  folioUnico;

  _ApiServidor_consultarDictamen_args__isset __isset;

  void __set_folioUnico(const std::vector<int32_t> & val);

  bool operator == (const ApiServidor_consultarDictamen_args & rhs) const
  {
    if (!(folioUnico == rhs.folioUnico))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_consultarDictamen_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_consultarDictamen_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_consultarDictamen_pargs {
 public:


  virtual ~ApiServidor_consultarDictamen_pargs() throw();
  const std::vector<int32_t> * folioUnico;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_consultarDictamen_result__isset {
  _ApiServidor_consultarDictamen_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_consultarDictamen_result__isset;

class ApiServidor_consultarDictamen_result {
 public:

  ApiServidor_consultarDictamen_result(const ApiServidor_consultarDictamen_result&);
  ApiServidor_consultarDictamen_result& operator=(const ApiServidor_consultarDictamen_result&);
  ApiServidor_consultarDictamen_result() {
  }

  virtual ~ApiServidor_consultarDictamen_result() throw();
  std::vector<Dictamen>  success;
  ErrorBD ebd;

  _ApiServidor_consultarDictamen_result__isset __isset;

  void __set_success(const std::vector<Dictamen> & val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_consultarDictamen_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_consultarDictamen_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_consultarDictamen_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_consultarDictamen_presult__isset {
  _ApiServidor_consultarDictamen_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_consultarDictamen_presult__isset;

class ApiServidor_consultarDictamen_presult {
 public:


  virtual ~ApiServidor_consultarDictamen_presult() throw();
  std::vector<Dictamen> * success;
  ErrorBD ebd;

  _ApiServidor_consultarDictamen_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_consultarConductorPropio_args__isset {
  _ApiServidor_consultarConductorPropio_args__isset() : telefono(false) {}
  bool telefono :1;
} _ApiServidor_consultarConductorPropio_args__isset;

class ApiServidor_consultarConductorPropio_args {
 public:

  ApiServidor_consultarConductorPropio_args(const ApiServidor_consultarConductorPropio_args&);
  ApiServidor_consultarConductorPropio_args& operator=(const ApiServidor_consultarConductorPropio_args&);
  ApiServidor_consultarConductorPropio_args() : telefono(0) {
  }

  virtual ~ApiServidor_consultarConductorPropio_args() throw();
  int64_t telefono;

  _ApiServidor_consultarConductorPropio_args__isset __isset;

  void __set_telefono(const int64_t val);

  bool operator == (const ApiServidor_consultarConductorPropio_args & rhs) const
  {
    if (!(telefono == rhs.telefono))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_consultarConductorPropio_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_consultarConductorPropio_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_consultarConductorPropio_pargs {
 public:


  virtual ~ApiServidor_consultarConductorPropio_pargs() throw();
  const int64_t* telefono;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_consultarConductorPropio_result__isset {
  _ApiServidor_consultarConductorPropio_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_consultarConductorPropio_result__isset;

class ApiServidor_consultarConductorPropio_result {
 public:

  ApiServidor_consultarConductorPropio_result(const ApiServidor_consultarConductorPropio_result&);
  ApiServidor_consultarConductorPropio_result& operator=(const ApiServidor_consultarConductorPropio_result&);
  ApiServidor_consultarConductorPropio_result() {
  }

  virtual ~ApiServidor_consultarConductorPropio_result() throw();
  Conductor success;
  ErrorBD ebd;

  _ApiServidor_consultarConductorPropio_result__isset __isset;

  void __set_success(const Conductor& val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_consultarConductorPropio_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_consultarConductorPropio_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_consultarConductorPropio_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_consultarConductorPropio_presult__isset {
  _ApiServidor_consultarConductorPropio_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_consultarConductorPropio_presult__isset;

class ApiServidor_consultarConductorPropio_presult {
 public:


  virtual ~ApiServidor_consultarConductorPropio_presult() throw();
  Conductor* success;
  ErrorBD ebd;

  _ApiServidor_consultarConductorPropio_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_recuperarNFuncionario_args__isset {
  _ApiServidor_recuperarNFuncionario_args__isset() : folioUnico(false) {}
  bool folioUnico :1;
} _ApiServidor_recuperarNFuncionario_args__isset;

class ApiServidor_recuperarNFuncionario_args {
 public:

  ApiServidor_recuperarNFuncionario_args(const ApiServidor_recuperarNFuncionario_args&);
  ApiServidor_recuperarNFuncionario_args& operator=(const ApiServidor_recuperarNFuncionario_args&);
  ApiServidor_recuperarNFuncionario_args() : folioUnico(0) {
  }

  virtual ~ApiServidor_recuperarNFuncionario_args() throw();
  int32_t folioUnico;

  _ApiServidor_recuperarNFuncionario_args__isset __isset;

  void __set_folioUnico(const int32_t val);

  bool operator == (const ApiServidor_recuperarNFuncionario_args & rhs) const
  {
    if (!(folioUnico == rhs.folioUnico))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_recuperarNFuncionario_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_recuperarNFuncionario_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_recuperarNFuncionario_pargs {
 public:


  virtual ~ApiServidor_recuperarNFuncionario_pargs() throw();
  const int32_t* folioUnico;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_recuperarNFuncionario_result__isset {
  _ApiServidor_recuperarNFuncionario_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_recuperarNFuncionario_result__isset;

class ApiServidor_recuperarNFuncionario_result {
 public:

  ApiServidor_recuperarNFuncionario_result(const ApiServidor_recuperarNFuncionario_result&);
  ApiServidor_recuperarNFuncionario_result& operator=(const ApiServidor_recuperarNFuncionario_result&);
  ApiServidor_recuperarNFuncionario_result() : success() {
  }

  virtual ~ApiServidor_recuperarNFuncionario_result() throw();
  std::string success;
  ErrorBD ebd;

  _ApiServidor_recuperarNFuncionario_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_recuperarNFuncionario_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_recuperarNFuncionario_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_recuperarNFuncionario_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_recuperarNFuncionario_presult__isset {
  _ApiServidor_recuperarNFuncionario_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_recuperarNFuncionario_presult__isset;

class ApiServidor_recuperarNFuncionario_presult {
 public:


  virtual ~ApiServidor_recuperarNFuncionario_presult() throw();
  std::string* success;
  ErrorBD ebd;

  _ApiServidor_recuperarNFuncionario_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_recuperarVehiculoReporte_args__isset {
  _ApiServidor_recuperarVehiculoReporte_args__isset() : folioUnico_dictamen(false) {}
  bool folioUnico_dictamen :1;
} _ApiServidor_recuperarVehiculoReporte_args__isset;

class ApiServidor_recuperarVehiculoReporte_args {
 public:

  ApiServidor_recuperarVehiculoReporte_args(const ApiServidor_recuperarVehiculoReporte_args&);
  ApiServidor_recuperarVehiculoReporte_args& operator=(const ApiServidor_recuperarVehiculoReporte_args&);
  ApiServidor_recuperarVehiculoReporte_args() : folioUnico_dictamen(0) {
  }

  virtual ~ApiServidor_recuperarVehiculoReporte_args() throw();
  int32_t folioUnico_dictamen;

  _ApiServidor_recuperarVehiculoReporte_args__isset __isset;

  void __set_folioUnico_dictamen(const int32_t val);

  bool operator == (const ApiServidor_recuperarVehiculoReporte_args & rhs) const
  {
    if (!(folioUnico_dictamen == rhs.folioUnico_dictamen))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_recuperarVehiculoReporte_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_recuperarVehiculoReporte_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_recuperarVehiculoReporte_pargs {
 public:


  virtual ~ApiServidor_recuperarVehiculoReporte_pargs() throw();
  const int32_t* folioUnico_dictamen;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_recuperarVehiculoReporte_result__isset {
  _ApiServidor_recuperarVehiculoReporte_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_recuperarVehiculoReporte_result__isset;

class ApiServidor_recuperarVehiculoReporte_result {
 public:

  ApiServidor_recuperarVehiculoReporte_result(const ApiServidor_recuperarVehiculoReporte_result&);
  ApiServidor_recuperarVehiculoReporte_result& operator=(const ApiServidor_recuperarVehiculoReporte_result&);
  ApiServidor_recuperarVehiculoReporte_result() {
  }

  virtual ~ApiServidor_recuperarVehiculoReporte_result() throw();
  std::vector<Vehiculo>  success;
  ErrorBD ebd;

  _ApiServidor_recuperarVehiculoReporte_result__isset __isset;

  void __set_success(const std::vector<Vehiculo> & val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_recuperarVehiculoReporte_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_recuperarVehiculoReporte_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_recuperarVehiculoReporte_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_recuperarVehiculoReporte_presult__isset {
  _ApiServidor_recuperarVehiculoReporte_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_recuperarVehiculoReporte_presult__isset;

class ApiServidor_recuperarVehiculoReporte_presult {
 public:


  virtual ~ApiServidor_recuperarVehiculoReporte_presult() throw();
  std::vector<Vehiculo> * success;
  ErrorBD ebd;

  _ApiServidor_recuperarVehiculoReporte_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApiServidor_asociarVehiculoReporte_args__isset {
  _ApiServidor_asociarVehiculoReporte_args__isset() : numPLacas(false), telefono(false) {}
  bool numPLacas :1;
  bool telefono :1;
} _ApiServidor_asociarVehiculoReporte_args__isset;

class ApiServidor_asociarVehiculoReporte_args {
 public:

  ApiServidor_asociarVehiculoReporte_args(const ApiServidor_asociarVehiculoReporte_args&);
  ApiServidor_asociarVehiculoReporte_args& operator=(const ApiServidor_asociarVehiculoReporte_args&);
  ApiServidor_asociarVehiculoReporte_args() : telefono(0) {
  }

  virtual ~ApiServidor_asociarVehiculoReporte_args() throw();
  std::vector<std::string>  numPLacas;
  int64_t telefono;

  _ApiServidor_asociarVehiculoReporte_args__isset __isset;

  void __set_numPLacas(const std::vector<std::string> & val);

  void __set_telefono(const int64_t val);

  bool operator == (const ApiServidor_asociarVehiculoReporte_args & rhs) const
  {
    if (!(numPLacas == rhs.numPLacas))
      return false;
    if (!(telefono == rhs.telefono))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_asociarVehiculoReporte_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_asociarVehiculoReporte_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApiServidor_asociarVehiculoReporte_pargs {
 public:


  virtual ~ApiServidor_asociarVehiculoReporte_pargs() throw();
  const std::vector<std::string> * numPLacas;
  const int64_t* telefono;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_asociarVehiculoReporte_result__isset {
  _ApiServidor_asociarVehiculoReporte_result__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_asociarVehiculoReporte_result__isset;

class ApiServidor_asociarVehiculoReporte_result {
 public:

  ApiServidor_asociarVehiculoReporte_result(const ApiServidor_asociarVehiculoReporte_result&);
  ApiServidor_asociarVehiculoReporte_result& operator=(const ApiServidor_asociarVehiculoReporte_result&);
  ApiServidor_asociarVehiculoReporte_result() : success(0) {
  }

  virtual ~ApiServidor_asociarVehiculoReporte_result() throw();
  bool success;
  ErrorBD ebd;

  _ApiServidor_asociarVehiculoReporte_result__isset __isset;

  void __set_success(const bool val);

  void __set_ebd(const ErrorBD& val);

  bool operator == (const ApiServidor_asociarVehiculoReporte_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ebd == rhs.ebd))
      return false;
    return true;
  }
  bool operator != (const ApiServidor_asociarVehiculoReporte_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApiServidor_asociarVehiculoReporte_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApiServidor_asociarVehiculoReporte_presult__isset {
  _ApiServidor_asociarVehiculoReporte_presult__isset() : success(false), ebd(false) {}
  bool success :1;
  bool ebd :1;
} _ApiServidor_asociarVehiculoReporte_presult__isset;

class ApiServidor_asociarVehiculoReporte_presult {
 public:


  virtual ~ApiServidor_asociarVehiculoReporte_presult() throw();
  bool* success;
  ErrorBD ebd;

  _ApiServidor_asociarVehiculoReporte_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ApiServidorClient : virtual public ApiServidorIf {
 public:
  ApiServidorClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ApiServidorClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool confirmarConductor(const int64_t telefono, const std::string& contrasena);
  void send_confirmarConductor(const int64_t telefono, const std::string& contrasena);
  bool recv_confirmarConductor();
  bool registrarConductor(const Conductor& conductor);
  void send_registrarConductor(const Conductor& conductor);
  bool recv_registrarConductor();
  bool registrarVehiculo(const Vehiculo& vehiculo, const int64_t telefono);
  void send_registrarVehiculo(const Vehiculo& vehiculo, const int64_t telefono);
  bool recv_registrarVehiculo();
  bool modificarVehiculo(const Vehiculo& vehiculo, const std::string& numPLacaAnt);
  void send_modificarVehiculo(const Vehiculo& vehiculo, const std::string& numPLacaAnt);
  bool recv_modificarVehiculo();
  bool deshabilitarVehiculo(const std::string& numPlaca);
  void send_deshabilitarVehiculo(const std::string& numPlaca);
  bool recv_deshabilitarVehiculo();
  void consultarVehiculoPropio(std::vector<Vehiculo> & _return, const int64_t telefono);
  void send_consultarVehiculoPropio(const int64_t telefono);
  void recv_consultarVehiculoPropio(std::vector<Vehiculo> & _return);
  void consultarVehiculoInfo(Vehiculo& _return, const std::string& numPlaca);
  void send_consultarVehiculoInfo(const std::string& numPlaca);
  void recv_consultarVehiculoInfo(Vehiculo& _return);
  bool registrarReporte(const Reporte& reporte, const int64_t telefono);
  void send_registrarReporte(const Reporte& reporte, const int64_t telefono);
  bool recv_registrarReporte();
  bool registrarFotografia(const std::vector<std::string> & fotografias, const int64_t telefono);
  void send_registrarFotografia(const std::vector<std::string> & fotografias, const int64_t telefono);
  bool recv_registrarFotografia();
  void consultarFotografia(std::vector<std::string> & _return, const int32_t folioUnico_dictamen);
  void send_consultarFotografia(const int32_t folioUnico_dictamen);
  void recv_consultarFotografia(std::vector<std::string> & _return);
  void registrarVehiculoReporte(std::string& _return, const Vehiculo& vehiculo);
  void send_registrarVehiculoReporte(const Vehiculo& vehiculo);
  void recv_registrarVehiculoReporte(std::string& _return);
  void consultarReporte(std::vector<Reporte> & _return, const int64_t telefono);
  void send_consultarReporte(const int64_t telefono);
  void recv_consultarReporte(std::vector<Reporte> & _return);
  void consultarDictamen(std::vector<Dictamen> & _return, const std::vector<int32_t> & folioUnico);
  void send_consultarDictamen(const std::vector<int32_t> & folioUnico);
  void recv_consultarDictamen(std::vector<Dictamen> & _return);
  void consultarConductorPropio(Conductor& _return, const int64_t telefono);
  void send_consultarConductorPropio(const int64_t telefono);
  void recv_consultarConductorPropio(Conductor& _return);
  void recuperarNFuncionario(std::string& _return, const int32_t folioUnico);
  void send_recuperarNFuncionario(const int32_t folioUnico);
  void recv_recuperarNFuncionario(std::string& _return);
  void recuperarVehiculoReporte(std::vector<Vehiculo> & _return, const int32_t folioUnico_dictamen);
  void send_recuperarVehiculoReporte(const int32_t folioUnico_dictamen);
  void recv_recuperarVehiculoReporte(std::vector<Vehiculo> & _return);
  bool asociarVehiculoReporte(const std::vector<std::string> & numPLacas, const int64_t telefono);
  void send_asociarVehiculoReporte(const std::vector<std::string> & numPLacas, const int64_t telefono);
  bool recv_asociarVehiculoReporte();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ApiServidorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ApiServidorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ApiServidorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_confirmarConductor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registrarConductor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registrarVehiculo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modificarVehiculo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deshabilitarVehiculo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_consultarVehiculoPropio(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_consultarVehiculoInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registrarReporte(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registrarFotografia(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_consultarFotografia(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registrarVehiculoReporte(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_consultarReporte(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_consultarDictamen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_consultarConductorPropio(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recuperarNFuncionario(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recuperarVehiculoReporte(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_asociarVehiculoReporte(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ApiServidorProcessor(::apache::thrift::stdcxx::shared_ptr<ApiServidorIf> iface) :
    iface_(iface) {
    processMap_["confirmarConductor"] = &ApiServidorProcessor::process_confirmarConductor;
    processMap_["registrarConductor"] = &ApiServidorProcessor::process_registrarConductor;
    processMap_["registrarVehiculo"] = &ApiServidorProcessor::process_registrarVehiculo;
    processMap_["modificarVehiculo"] = &ApiServidorProcessor::process_modificarVehiculo;
    processMap_["deshabilitarVehiculo"] = &ApiServidorProcessor::process_deshabilitarVehiculo;
    processMap_["consultarVehiculoPropio"] = &ApiServidorProcessor::process_consultarVehiculoPropio;
    processMap_["consultarVehiculoInfo"] = &ApiServidorProcessor::process_consultarVehiculoInfo;
    processMap_["registrarReporte"] = &ApiServidorProcessor::process_registrarReporte;
    processMap_["registrarFotografia"] = &ApiServidorProcessor::process_registrarFotografia;
    processMap_["consultarFotografia"] = &ApiServidorProcessor::process_consultarFotografia;
    processMap_["registrarVehiculoReporte"] = &ApiServidorProcessor::process_registrarVehiculoReporte;
    processMap_["consultarReporte"] = &ApiServidorProcessor::process_consultarReporte;
    processMap_["consultarDictamen"] = &ApiServidorProcessor::process_consultarDictamen;
    processMap_["consultarConductorPropio"] = &ApiServidorProcessor::process_consultarConductorPropio;
    processMap_["recuperarNFuncionario"] = &ApiServidorProcessor::process_recuperarNFuncionario;
    processMap_["recuperarVehiculoReporte"] = &ApiServidorProcessor::process_recuperarVehiculoReporte;
    processMap_["asociarVehiculoReporte"] = &ApiServidorProcessor::process_asociarVehiculoReporte;
  }

  virtual ~ApiServidorProcessor() {}
};

class ApiServidorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ApiServidorProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ApiServidorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ApiServidorIfFactory > handlerFactory_;
};

class ApiServidorMultiface : virtual public ApiServidorIf {
 public:
  ApiServidorMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ApiServidorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ApiServidorMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ApiServidorIf> > ifaces_;
  ApiServidorMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ApiServidorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool confirmarConductor(const int64_t telefono, const std::string& contrasena) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->confirmarConductor(telefono, contrasena);
    }
    return ifaces_[i]->confirmarConductor(telefono, contrasena);
  }

  bool registrarConductor(const Conductor& conductor) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registrarConductor(conductor);
    }
    return ifaces_[i]->registrarConductor(conductor);
  }

  bool registrarVehiculo(const Vehiculo& vehiculo, const int64_t telefono) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registrarVehiculo(vehiculo, telefono);
    }
    return ifaces_[i]->registrarVehiculo(vehiculo, telefono);
  }

  bool modificarVehiculo(const Vehiculo& vehiculo, const std::string& numPLacaAnt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modificarVehiculo(vehiculo, numPLacaAnt);
    }
    return ifaces_[i]->modificarVehiculo(vehiculo, numPLacaAnt);
  }

  bool deshabilitarVehiculo(const std::string& numPlaca) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deshabilitarVehiculo(numPlaca);
    }
    return ifaces_[i]->deshabilitarVehiculo(numPlaca);
  }

  void consultarVehiculoPropio(std::vector<Vehiculo> & _return, const int64_t telefono) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->consultarVehiculoPropio(_return, telefono);
    }
    ifaces_[i]->consultarVehiculoPropio(_return, telefono);
    return;
  }

  void consultarVehiculoInfo(Vehiculo& _return, const std::string& numPlaca) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->consultarVehiculoInfo(_return, numPlaca);
    }
    ifaces_[i]->consultarVehiculoInfo(_return, numPlaca);
    return;
  }

  bool registrarReporte(const Reporte& reporte, const int64_t telefono) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registrarReporte(reporte, telefono);
    }
    return ifaces_[i]->registrarReporte(reporte, telefono);
  }

  bool registrarFotografia(const std::vector<std::string> & fotografias, const int64_t telefono) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registrarFotografia(fotografias, telefono);
    }
    return ifaces_[i]->registrarFotografia(fotografias, telefono);
  }

  void consultarFotografia(std::vector<std::string> & _return, const int32_t folioUnico_dictamen) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->consultarFotografia(_return, folioUnico_dictamen);
    }
    ifaces_[i]->consultarFotografia(_return, folioUnico_dictamen);
    return;
  }

  void registrarVehiculoReporte(std::string& _return, const Vehiculo& vehiculo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registrarVehiculoReporte(_return, vehiculo);
    }
    ifaces_[i]->registrarVehiculoReporte(_return, vehiculo);
    return;
  }

  void consultarReporte(std::vector<Reporte> & _return, const int64_t telefono) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->consultarReporte(_return, telefono);
    }
    ifaces_[i]->consultarReporte(_return, telefono);
    return;
  }

  void consultarDictamen(std::vector<Dictamen> & _return, const std::vector<int32_t> & folioUnico) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->consultarDictamen(_return, folioUnico);
    }
    ifaces_[i]->consultarDictamen(_return, folioUnico);
    return;
  }

  void consultarConductorPropio(Conductor& _return, const int64_t telefono) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->consultarConductorPropio(_return, telefono);
    }
    ifaces_[i]->consultarConductorPropio(_return, telefono);
    return;
  }

  void recuperarNFuncionario(std::string& _return, const int32_t folioUnico) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recuperarNFuncionario(_return, folioUnico);
    }
    ifaces_[i]->recuperarNFuncionario(_return, folioUnico);
    return;
  }

  void recuperarVehiculoReporte(std::vector<Vehiculo> & _return, const int32_t folioUnico_dictamen) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recuperarVehiculoReporte(_return, folioUnico_dictamen);
    }
    ifaces_[i]->recuperarVehiculoReporte(_return, folioUnico_dictamen);
    return;
  }

  bool asociarVehiculoReporte(const std::vector<std::string> & numPLacas, const int64_t telefono) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->asociarVehiculoReporte(numPLacas, telefono);
    }
    return ifaces_[i]->asociarVehiculoReporte(numPLacas, telefono);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ApiServidorConcurrentClient : virtual public ApiServidorIf {
 public:
  ApiServidorConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ApiServidorConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool confirmarConductor(const int64_t telefono, const std::string& contrasena);
  int32_t send_confirmarConductor(const int64_t telefono, const std::string& contrasena);
  bool recv_confirmarConductor(const int32_t seqid);
  bool registrarConductor(const Conductor& conductor);
  int32_t send_registrarConductor(const Conductor& conductor);
  bool recv_registrarConductor(const int32_t seqid);
  bool registrarVehiculo(const Vehiculo& vehiculo, const int64_t telefono);
  int32_t send_registrarVehiculo(const Vehiculo& vehiculo, const int64_t telefono);
  bool recv_registrarVehiculo(const int32_t seqid);
  bool modificarVehiculo(const Vehiculo& vehiculo, const std::string& numPLacaAnt);
  int32_t send_modificarVehiculo(const Vehiculo& vehiculo, const std::string& numPLacaAnt);
  bool recv_modificarVehiculo(const int32_t seqid);
  bool deshabilitarVehiculo(const std::string& numPlaca);
  int32_t send_deshabilitarVehiculo(const std::string& numPlaca);
  bool recv_deshabilitarVehiculo(const int32_t seqid);
  void consultarVehiculoPropio(std::vector<Vehiculo> & _return, const int64_t telefono);
  int32_t send_consultarVehiculoPropio(const int64_t telefono);
  void recv_consultarVehiculoPropio(std::vector<Vehiculo> & _return, const int32_t seqid);
  void consultarVehiculoInfo(Vehiculo& _return, const std::string& numPlaca);
  int32_t send_consultarVehiculoInfo(const std::string& numPlaca);
  void recv_consultarVehiculoInfo(Vehiculo& _return, const int32_t seqid);
  bool registrarReporte(const Reporte& reporte, const int64_t telefono);
  int32_t send_registrarReporte(const Reporte& reporte, const int64_t telefono);
  bool recv_registrarReporte(const int32_t seqid);
  bool registrarFotografia(const std::vector<std::string> & fotografias, const int64_t telefono);
  int32_t send_registrarFotografia(const std::vector<std::string> & fotografias, const int64_t telefono);
  bool recv_registrarFotografia(const int32_t seqid);
  void consultarFotografia(std::vector<std::string> & _return, const int32_t folioUnico_dictamen);
  int32_t send_consultarFotografia(const int32_t folioUnico_dictamen);
  void recv_consultarFotografia(std::vector<std::string> & _return, const int32_t seqid);
  void registrarVehiculoReporte(std::string& _return, const Vehiculo& vehiculo);
  int32_t send_registrarVehiculoReporte(const Vehiculo& vehiculo);
  void recv_registrarVehiculoReporte(std::string& _return, const int32_t seqid);
  void consultarReporte(std::vector<Reporte> & _return, const int64_t telefono);
  int32_t send_consultarReporte(const int64_t telefono);
  void recv_consultarReporte(std::vector<Reporte> & _return, const int32_t seqid);
  void consultarDictamen(std::vector<Dictamen> & _return, const std::vector<int32_t> & folioUnico);
  int32_t send_consultarDictamen(const std::vector<int32_t> & folioUnico);
  void recv_consultarDictamen(std::vector<Dictamen> & _return, const int32_t seqid);
  void consultarConductorPropio(Conductor& _return, const int64_t telefono);
  int32_t send_consultarConductorPropio(const int64_t telefono);
  void recv_consultarConductorPropio(Conductor& _return, const int32_t seqid);
  void recuperarNFuncionario(std::string& _return, const int32_t folioUnico);
  int32_t send_recuperarNFuncionario(const int32_t folioUnico);
  void recv_recuperarNFuncionario(std::string& _return, const int32_t seqid);
  void recuperarVehiculoReporte(std::vector<Vehiculo> & _return, const int32_t folioUnico_dictamen);
  int32_t send_recuperarVehiculoReporte(const int32_t folioUnico_dictamen);
  void recv_recuperarVehiculoReporte(std::vector<Vehiculo> & _return, const int32_t seqid);
  bool asociarVehiculoReporte(const std::vector<std::string> & numPLacas, const int64_t telefono);
  int32_t send_asociarVehiculoReporte(const std::vector<std::string> & numPLacas, const int64_t telefono);
  bool recv_asociarVehiculoReporte(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
